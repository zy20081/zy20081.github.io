<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>APP手工测试</title>
      <link href="/2020/09/08/app-shou-gong-ce-shi/"/>
      <url>/2020/09/08/app-shou-gong-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="测试阶段"><a href="#测试阶段" class="headerlink" title="测试阶段"></a>测试阶段</h2><p> APP手工测试，流程和测试用例都跟web手工测试一样的，可以见本站的web手工测试帖子，这里主要写不同地方</p><h2 id="APP测试分类"><a href="#APP测试分类" class="headerlink" title="APP测试分类"></a>APP测试分类</h2><pre class=" language-bash"><code class="language-bash">1.业务功能测试2.APP专项测试  - 兼容性测试  - 安装、卸载、升级测试  - 交叉事件测试  - Push消息推送测试  - 性能测试  - 其他测试    - 用户体验    - 极限、边界    - 权限</code></pre><h2 id="测试机的选取原则"><a href="#测试机的选取原则" class="headerlink" title="测试机的选取原则"></a>测试机的选取原则</h2><pre class=" language-bash"><code class="language-bash">1. 借助testin等云测平台（<span class="token operator">&lt;</span>https://www.testin.cn/business/landing/machine.htm<span class="token operator">></span>）2.模拟器  - Genymotion（<span class="token operator">&lt;</span>http://www.genymotion.net/<span class="token operator">></span>）  - Xcode  - 夜神模拟器</code></pre><h2 id="屏幕分辨率和尺寸"><a href="#屏幕分辨率和尺寸" class="headerlink" title="屏幕分辨率和尺寸"></a>屏幕分辨率和尺寸</h2><pre class=" language-bash"><code class="language-bash">- Android  - 1080x1920  - 720x1280- IOS  - 2208*1242  - 1334*750屏幕参考网站：<span class="token operator">&lt;</span>http://www.woshipm.com/screen/<span class="token operator">></span>一般考虑：- 4.7- 5.5</code></pre><h3 id="APP专项测试——交叉事件测试"><a href="#APP专项测试——交叉事件测试" class="headerlink" title="APP专项测试——交叉事件测试"></a>APP专项测试——交叉事件测试</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><pre class=" language-bash"><code class="language-bash">交叉测试又叫**冲突测试**或者**干扰测试**。  是指一个功能正在执行过程中，另外一个事件或操作对该过程进行干扰的测试。</code></pre><h4 id="测试的关注点"><a href="#测试的关注点" class="headerlink" title="测试的关注点"></a>测试的关注点</h4><pre class=" language-bash"><code class="language-bash">- 拨打/接听电话- 接收/发送短信息- 插拔耳机- 网络切换- 系统自带应用（摄像头、计算器等）</code></pre><h3 id="APP专项测试——安装、卸载、升级测试"><a href="#APP专项测试——安装、卸载、升级测试" class="headerlink" title="APP专项测试——安装、卸载、升级测试"></a>APP专项测试——安装、卸载、升级测试</h3><h4 id="安装类型"><a href="#安装类型" class="headerlink" title="安装类型"></a>安装类型</h4><pre class=" language-bash"><code class="language-bash">- Andriod：.apk- ios: .ipa</code></pre><h4 id="安装渠道"><a href="#安装渠道" class="headerlink" title="安装渠道"></a>安装渠道</h4><pre class=" language-bash"><code class="language-bash">- Andriod  - 应用商城（小米、华为、vivo等）  - 豌豆荚  - 应用宝、360手机助手等- ios  - APP Store</code></pre><h4 id="安装测试测试关注点"><a href="#安装测试测试关注点" class="headerlink" title="安装测试测试关注点"></a>安装测试测试关注点</h4><h5 id="正常情况"><a href="#正常情况" class="headerlink" title="正常情况"></a>正常情况</h5><pre class=" language-bash"><code class="language-bash">- 正常安装测试，检查是否安装成功- APP版本覆盖测试- 回退版本测试- 在不同型号、操作系统、屏幕大小、分辨率上的手机进行安装- 安装完成后，能否正常启动应用程序- 安装完成后，重启手机能否正常启动应用程序</code></pre><h5 id="异常情况"><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h5><pre class=" language-bash"><code class="language-bash">- 安装时内存不足- 安装过程中的意外情况（强行断电、断网、来电话了、查看信息）等等- 能否取消安装</code></pre><h4 id="卸载测试关注点"><a href="#卸载测试关注点" class="headerlink" title="卸载测试关注点"></a>卸载测试关注点</h4><h5 id="正常情况-1"><a href="#正常情况-1" class="headerlink" title="正常情况"></a>正常情况</h5><pre class=" language-bash"><code class="language-bash">- 用自己的卸载程序进行卸载，检查是否卸载干净- 用第三方工具，检查是否卸载干净- 不同系统、硬件环境、网络环境下进行卸载- 卸载后再次安装，是否正常使用</code></pre><h5 id="异常情况-1"><a href="#异常情况-1" class="headerlink" title="异常情况"></a>异常情况</h5><pre class=" language-bash"><code class="language-bash">- 卸载中出现异常情况能否恢复（比如手机关机，内存、没电等），程序是否还能运行- 卸载后是否有残留，是否能够再次进行安装- 是否可以取消卸载 软件恢复使用</code></pre><h4 id="升级测试关注点"><a href="#升级测试关注点" class="headerlink" title="升级测试关注点"></a>升级测试关注点</h4><h5 id="更新版本需要提示用户"><a href="#更新版本需要提示用户" class="headerlink" title="更新版本需要提示用户"></a>更新版本需要提示用户</h5><h5 id="考虑是否进行强制升级"><a href="#考虑是否进行强制升级" class="headerlink" title="考虑是否进行强制升级"></a>考虑是否进行强制升级</h5><pre class=" language-bash"><code class="language-bash">- 软件存在严重缺陷- 软件不能够向前兼容</code></pre><h5 id="是否能够跨版本升级"><a href="#是否能够跨版本升级" class="headerlink" title="是否能够跨版本升级"></a>是否能够跨版本升级</h5><pre class=" language-bash"><code class="language-bash">- V5.0 <span class="token operator">==</span>》 V6.0 <span class="token operator">==</span>》 V7.0</code></pre><h4 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h4><pre class=" language-bash"><code class="language-bash">程序下载中间断开<span class="token punctuation">(</span>断网，关机<span class="token punctuation">)</span>，恢复后，能够接着原来的内容继续下载。</code></pre><h3 id="APP专项测试——push消息推送测试"><a href="#APP专项测试——push消息推送测试" class="headerlink" title="APP专项测试——push消息推送测试"></a>APP专项测试——push消息推送测试</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>push即为消息推送测试,主要目的就是为了唤醒或提醒用户</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><pre class=" language-bash"><code class="language-bash">- 全部推送- 部分推送- 精确推送</code></pre><h4 id="消息形式"><a href="#消息形式" class="headerlink" title="消息形式"></a>消息形式</h4><pre class=" language-bash"><code class="language-bash">- 弹窗- 消息通知栏</code></pre><h4 id="测试关注点"><a href="#测试关注点" class="headerlink" title="测试关注点"></a>测试关注点</h4><pre class=" language-bash"><code class="language-bash">- Push消息应该按设定规则发送特定用户- APP在后台运行时，应能正常收到其Push消息- 设备锁屏状态下，应能正常收到APP的Push消息- 设备网络断开后再一次建立连接时，应能收到Push消息- 系统设置不接收该APP通知消息时，用户应该不再收到Push消息</code></pre><h3 id="APP专项测试——性能测试"><a href="#APP专项测试——性能测试" class="headerlink" title="APP专项测试——性能测试"></a>APP专项测试——性能测试</h3><h4 id="性能测试指标"><a href="#性能测试指标" class="headerlink" title="性能测试指标"></a>性能测试指标</h4><pre class=" language-bash"><code class="language-bash">- 内存- CPU- 流量- 电量- 启动速度- 界面切换速度</code></pre><h4 id="测试的关注点-1"><a href="#测试的关注点-1" class="headerlink" title="测试的关注点"></a>测试的关注点</h4><pre class=" language-bash"><code class="language-bash">- APP的启动时间是否过长；- APP使用时对CPU、内存的占用情况；- APP使用时，电量流量的消耗情况；- **反复长期的操作情况下，系统资源的使用情况。**</code></pre><h4 id="面试题（扩展）"><a href="#面试题（扩展）" class="headerlink" title="面试题（扩展）"></a>面试题（扩展）</h4><h5 id="内存溢出与内存泄漏"><a href="#内存溢出与内存泄漏" class="headerlink" title="内存溢出与内存泄漏"></a>内存溢出与内存泄漏</h5><pre class=" language-bash"><code class="language-bash">1. 内存溢出 out of memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；2. 内存泄露 memory leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光；3. 二者的关系：memory leak会最终会导致out of memory！</code></pre><h5 id="冷启动与热启动"><a href="#冷启动与热启动" class="headerlink" title="冷启动与热启动"></a>冷启动与热启动</h5><pre class=" language-bash"><code class="language-bash">1. 指app被后台杀死后，在这个状态打开app，这种启动方式叫做冷启动；2. 热启动：指app没有被后台杀死，仍然在后台运行，通常我们再次去打开这个app，这种启动方式叫热启动。</code></pre><h3 id="APP专项测试——其他测试"><a href="#APP专项测试——其他测试" class="headerlink" title="APP专项测试——其他测试"></a>APP专项测试——其他测试</h3><h4 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h4><h5 id="测试关注点-1"><a href="#测试关注点-1" class="headerlink" title="测试关注点"></a>测试关注点</h5><pre class=" language-bash"><code class="language-bash">- 界面的美观性- 保持登录（APP）- 页面层级关系在4层左右</code></pre><h4 id="边界（极限测试）"><a href="#边界（极限测试）" class="headerlink" title="边界（极限测试）"></a>边界（极限测试）</h4><h5 id="测试关注点-2"><a href="#测试关注点-2" class="headerlink" title="测试关注点"></a>测试关注点</h5><pre class=" language-bash"><code class="language-bash">- 电量不足<span class="token punctuation">(</span><span class="token operator">&lt;</span>5%<span class="token punctuation">)</span>- 内存不足</code></pre><h4 id="权限测试"><a href="#权限测试" class="headerlink" title="权限测试"></a>权限测试</h4><h5 id="测试关注点-3"><a href="#测试关注点-3" class="headerlink" title="测试关注点"></a>测试关注点</h5><pre class=" language-bash"><code class="language-bash">- 摄像头权限- 相册权限- 位置权限- 通讯录权限</code></pre><h3 id="Web测试与APP测试的差异性（面试题）"><a href="#Web测试与APP测试的差异性（面试题）" class="headerlink" title="Web测试与APP测试的差异性（面试题）"></a>Web测试与APP测试的差异性（面试题）</h3><pre class=" language-bash"><code class="language-bash">- APP的兼容性测试尤为重要：由于手机厂商生产的手机型号及相关软硬件存在千千万万的差异性，进而APP端需要着重考虑分辨率、系统版本、尺寸、主流机型等等；- APP性能测试指标不一样：除了需要和web一样考虑APP客户端的性能外，我们还需要考虑电量、流量的消耗、GPU渲染等；- APP网络测试场景的复杂性：如2G、3G、4G、5G、wifi、弱网环境等- APP基于手机载体存在的交叉事件测试、前后台切换、安装/卸载/升级测试 - APP基于手机载体特有的一些用户操作习惯类测试，如横竖屏切换、多点触控、事件触发区域等</code></pre><h2 id="APP测试环境"><a href="#APP测试环境" class="headerlink" title="APP测试环境"></a>APP测试环境</h2><h3 id="APP的项目环境"><a href="#APP的项目环境" class="headerlink" title="APP的项目环境"></a>APP的项目环境</h3><pre class=" language-bash"><code class="language-bash">- 开发环境<span class="token operator">==</span>》开发工程师- 测试环境<span class="token operator">==</span>》测试工程师- 生产/线上环境<span class="token operator">==</span>》运维工程师</code></pre><h3 id="APP项目环境与项目流程的对照关系"><a href="#APP项目环境与项目流程的对照关系" class="headerlink" title="APP项目环境与项目流程的对照关系"></a>APP项目环境与项目流程的对照关系</h3><pre class=" language-bash"><code class="language-bash">- 开发（开发环境）<span class="token operator">==</span>》测试（测试环境）<span class="token operator">==</span>》上线（生产/线上环境）</code></pre><h2 id="APP发布平台"><a href="#APP发布平台" class="headerlink" title="APP发布平台"></a>APP发布平台</h2><h3 id="内测分发平台"><a href="#内测分发平台" class="headerlink" title="内测分发平台"></a>内测分发平台</h3><h4 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h4><pre class=" language-bash"><code class="language-bash">1. 开发将打好的程序包上传到内测分发平台上2. 内测分发平台基于上传的安装包生成唯一的二维码3. 测试扫描此二维码即可进行下载、安装并测试</code></pre><h4 id="常见的内测分发平台"><a href="#常见的内测分发平台" class="headerlink" title="常见的内测分发平台"></a>常见的内测分发平台</h4><pre class=" language-bash"><code class="language-bash">- 蒲公英（<span class="token operator">&lt;</span>https://www.pgyer.com/<span class="token operator">></span>）- fir.im（<span class="token operator">&lt;</span>https://fir.im/<span class="token operator">></span>）</code></pre><h3 id="线上发布平台"><a href="#线上发布平台" class="headerlink" title="线上发布平台"></a>线上发布平台</h3><pre class=" language-bash"><code class="language-bash">- Andriod  - 应用商店（华为、小米）  - 豌豆荚  - 360手机助手等- ios  - APP Store</code></pre><p><strong>注意：需要一定的审核过程、审核周期。</strong></p><h2 id="敏捷开发模式（了解）"><a href="#敏捷开发模式（了解）" class="headerlink" title="敏捷开发模式（了解）"></a>敏捷开发模式（了解）</h2><h3 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h3><pre class=" language-bash"><code class="language-bash">- 瀑布模型- 快速原型</code></pre><h3 id="互联网的特点"><a href="#互联网的特点" class="headerlink" title="互联网的特点"></a>互联网的特点</h3><pre class=" language-bash"><code class="language-bash">- 追求创新- 需求的高度不确定性</code></pre><h3 id="移动互联网的解决方案"><a href="#移动互联网的解决方案" class="headerlink" title="移动互联网的解决方案"></a>移动互联网的解决方案</h3><pre class=" language-bash"><code class="language-bash">- 快速的反馈机制- 快速试错- **思考：瀑布模型能解决移动互联网的痛点吗？**</code></pre><h3 id="敏捷开发模式"><a href="#敏捷开发模式" class="headerlink" title="敏捷开发模式"></a>敏捷开发模式</h3><h4 id="Scrum"><a href="#Scrum" class="headerlink" title="Scrum"></a>Scrum</h4><h5 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h5><pre class=" language-bash"><code class="language-bash">- 产品负责人（PO）：主要是负责整理需求，需求的呈现形式为用户故事- Scrum Master（SM）：负责带领团队完成相关任务- 开发团队<span class="token punctuation">(</span>Dev Team<span class="token punctuation">)</span>  - 开发  - 测试  - UI/UE</code></pre><h5 id="输出物"><a href="#输出物" class="headerlink" title="输出物"></a>输出物</h5><pre class=" language-bash"><code class="language-bash">- 产品待办列表（用户故事）- 迭代待办列表- 产品增量（可工作的软件）</code></pre><h5 id="5个活动"><a href="#5个活动" class="headerlink" title="5个活动"></a>5个活动</h5><pre class=" language-bash"><code class="language-bash">- 迭代（冲刺）sprint- 迭代计划：确定迭代待办列表内容- 每日站会- 评审会- 回顾会</code></pre><h2 id="敏捷测试流程（一次迭代）"><a href="#敏捷测试流程（一次迭代）" class="headerlink" title="敏捷测试流程（一次迭代）"></a>敏捷测试流程（一次迭代）</h2><pre class=" language-bash"><code class="language-bash">1. 需求分析与评审2. 编写测试计划（测试方案）3. 设计测试用例与评审4. 执行测试用例与缺陷跟踪5. 编写测试报告</code></pre>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> APP手工测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web手工测试</title>
      <link href="/2020/08/08/web-shou-gong-ce-shi/"/>
      <url>/2020/08/08/web-shou-gong-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="测试阶段（黑盒）"><a href="#测试阶段（黑盒）" class="headerlink" title="测试阶段（黑盒）"></a>测试阶段（黑盒）</h2><p> 主要工作阶段分为需求评审，编写测试计划，编写测试方案，熟悉项目的业务和数据库<br> 测试工作步骤分为<br> 主要测试阶段单元测试，集成测试，系统测试，验收测试<br> 其他阶段冒烟测试，回归测试，随机测试，探索性测试</p><h2 id="测试用例模板"><a href="#测试用例模板" class="headerlink" title="测试用例模板"></a>测试用例模板</h2><ol><li>测试用例：<br><img src="/2020/08/08/web-shou-gong-ce-shi/1.jpg" alt="图1"><br>2.项目测试用例与缺陷模板：<br><img src="/2020/08/08/web-shou-gong-ce-shi/2.jpg" alt="图2"></li></ol><h2 id="主要阶段"><a href="#主要阶段" class="headerlink" title="主要阶段"></a>主要阶段</h2><pre class=" language-bash"><code class="language-bash">需求评审：1.保证需求说明书的完整，准确           2.保证项目团队对需求的理解达成一致编写测试计划:1.明确的测试目标与测试范围,执行计划的角色与职责          2.任务的进度安排与资源分配         3.风险估计和应急计划         4.测试的准入/准出标准编写测试方案:1.测试策略              2.测试环境的规划          3.测试工具的设计和选择熟悉项目的业务和数据库:1.熟悉项目业务，了解所需达成的目标                        2.熟悉数据库常用的SQL语句和重要的数据表</code></pre><h2 id="测试工作"><a href="#测试工作" class="headerlink" title="测试工作"></a>测试工作</h2><pre class=" language-bash"><code class="language-bash">单元测试：模块测试，针对软件设计中的最小单位-程序模块，进行正确性检查的测试工作。集成测试：组装测试，通常在单元测试的基础上，将所有程序模块进行有序的、递增的测试。重点测试不同模块的接口部分。系统测试：整个软件系统看为一个整体进行测试，测试的依据是软件需求说明书。验收测试：检验软件是否符合用户需求的测试其他阶段：冒烟测试：对系统进行最基本功能的测试，保证基本的功能和流程能走通。回归测试：当修复一个BUG后，把之前的测试用例在新的代码下进行再次测试。随机测试：随机测试主要是对被测软件的一些重要功能进行复测，也包括测试那些当前的测试用例没有覆盖到的部分。探索性测试：探索性测试意味着同时设计测试和执行测试。测试人员通过测试来不断学习被测系统</code></pre><h2 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h2><pre class=" language-bash"><code class="language-bash">边界值：选取正好等于、刚刚好大于或刚刚好小于边界的值作为测试数据判定表：判定表法表示的是有多个输入，和多个输出，而且输入与输入之间有相互的组合关系、输入和输出之间有相互的依赖关系因果图：适用于分析程序输入条件的各种组合情况，以及输入与输出之间的依赖关系正交法：确定需求中的因素数（所有的输入）与对应的水平数，根据因素数与水平数选取正交表，用需求中的文字代替正交表中的字母如：$ L_9<span class="token punctuation">(</span>3^4<span class="token punctuation">)</span> $：有4个列，每个列有3个取值，9为列的组合个数，叫4因素3水平场景法：是用流程图描述用户的使用场景，然后通过覆盖流程路径来设计测试用例错误推测：指利用直觉和经验猜测出出错的可能类型，有针对性列举出程序中所有可能的错误和容易发生错误的情况</code></pre><h2 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h2><pre class=" language-bash"><code class="language-bash">1.测试工作的经过与结果2.风险评估3.缺陷汇总与分析4.测试工作总结与一般测试报告大纲：<span class="token operator">!</span><span class="token punctuation">[</span>图3<span class="token punctuation">]</span><span class="token punctuation">(</span>3.jpg<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web手工测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git下载某个文件夹</title>
      <link href="/2019/01/28/git-xia-zai-mou-ge-wen-jian-jia/"/>
      <url>/2019/01/28/git-xia-zai-mou-ge-wen-jian-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>需要工具：TortoiseSVN </p><p>操作举例：</p><ol><li>例如，你只需要“NLPIR SDK”中“classify”文件夹下的代码，先打开 classify,<br>其 URL 为: “<a href="https://github.com/NLPIR-team/NLPIR/tree/master/NLPIR%20SDK/Classify”" target="_blank" rel="noopener">https://github.com/NLPIR-team/NLPIR/tree/master/NLPIR%20SDK/Classify”</a> 然后将 /tree/master/ 换成 /trunk/ 。<br>2.“<a href="https://github.com/NLPIR-team/NLPIR/trunk/NLPIR%20SDK/Classify”" target="_blank" rel="noopener">https://github.com/NLPIR-team/NLPIR/trunk/NLPIR%20SDK/Classify”</a><br>然后, 输入:<br>svn checkout <a href="https://github.com/NLPIR-team/NLPIR/trunk/NLPIR%20SDK/Classify" target="_blank" rel="noopener">https://github.com/NLPIR-team/NLPIR/trunk/NLPIR%20SDK/Classify</a><br>ps: 第一次使用的话, <br><br>可能会出现下面这个提示:R)eject, accept (t)emporarily or accept (p)ermanently?<br>输入 P 就行了.</li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>1、如果是想克隆别人的项目或者自己的<br>很简单的一个网站就解决了。DownGit： 只需要找到仓库中对应文件夹的url,输入之后,点击 download 自动打包下载:</p><p>2、克隆自己的项目<br>注意：本方法会下载整个项目，但是，最后出现在本地项目文件下里只有需要的那个文件夹存在。类似先下载，再过滤。</p><p>有时候因为需要我们只想gitclone 下仓库的单个或多个文件夹，而不是全部的仓库内容，这样就很省事，所以下面就开始教程啦</p><p>在Git1.7.0以前，这无法实现，但是幸运的是在Git1.7.0以后加入了Sparse Checkout模式，这使得Check Out指定文件或者文件夹成为可能。</p><p>举个例子：</p><pre class=" language-bash"><code class="language-bash">现在有一个test仓库https://github.com/mygithub/test你要gitclone里面的tt子目录：在本地的硬盘位置打开Git Bash</code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init <span class="token function">test</span> <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> <span class="token function">test</span>     //新建仓库并进入文件夹<span class="token function">git</span> config core.sparsecheckout <span class="token boolean">true</span> //设置允许克隆子目录<span class="token keyword">echo</span> <span class="token string">'tt*'</span> <span class="token operator">>></span> .git/info/sparse-checkout //设置要克隆的仓库的子目录路径   //空格别漏<span class="token function">git</span> remote add origin git@github.com:mygithub/test.git  //这里换成你要克隆的项目和库<span class="token function">git</span> pull origin master    //下载ok，大功告成！！！</code></pre><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>点击这个链接就可以轻松下载单个文件夹</p><p><a href="https://minhaskamal.github.io/DownGit/#/home" target="_blank" rel="noopener">https://minhaskamal.github.io/DownGit/#/home</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM 复习总结</title>
      <link href="/2019/01/24/ssm-fu-xi-zong-jie/"/>
      <url>/2019/01/24/ssm-fu-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p>spring 项目中对象容器，帮我们管理项目中的所有对象<br><br>Spring 就是一个大工厂，可以将所有对象创建和依赖关系维护，交给 Spring 管理<br>AOP 编程的支持<br><br>Spring 提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能<br>声明式事务的支持<br><br>只需要通过配置就可以完成对事务的管理，而无需手动编程<br>方便程序的测试<br><br>Spring 对 Junit4 支持，可以通过注解方便的测试 Spring 程序<br>方便集成各种优秀框架<br><br>Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如：Struts、Hibernate、MyBatis、Quartz 等）的直接支持</p><h2 id="Spring搭建"><a href="#Spring搭建" class="headerlink" title="Spring搭建"></a>Spring搭建</h2><h3 id="1-下载Spring-的开发包"><a href="#1-下载Spring-的开发包" class="headerlink" title="1. 下载Spring 的开发包:"></a>1. 下载Spring 的开发包:</h3><pre><code>比如下spring-framework-4.2.4.RELEASE 包</code></pre><h3 id="2-把需要的包放到lib下4-2-4个核心包-2个日志："><a href="#2-把需要的包放到lib下4-2-4个核心包-2个日志：" class="headerlink" title="2. 把需要的包放到lib下4+2 4个核心包+2个日志："></a>2. 把需要的包放到lib下4+2 4个核心包+2个日志：</h3><p> <img src="/2019/01/24/ssm-fu-xi-zong-jie/1.jpg" alt="图1"><br> 在WEB环境中使用Spring容器<br><br>    1&gt;导包 4+2+1(spring-web)<br><br>    2&gt;在web.xml中配置listener =&gt; ContextLoaderListener<br><br>        |-配置参数,指定spring配置路径 <br><br>    3&gt;在Action中,使用工具类获得容器.<br><br>        |-WebApplicationContextUtils.getWebApplicationContext(ServletContext sc)</p><h3 id="3-创建一个对象"><a href="#3-创建一个对象" class="headerlink" title="3. 创建一个对象"></a>3. 创建一个对象</h3><pre class=" language-bash"><code class="language-bash"> package cn.itcast.bean<span class="token punctuation">;</span>public class User <span class="token punctuation">{</span>    public User<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"User对象空参构造方法!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    private String name<span class="token punctuation">;</span>    private Integer age<span class="token punctuation">;</span>    private Car car<span class="token punctuation">;</span>    public User<span class="token punctuation">(</span>String name, Car car<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"User(String name, Car car)!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>        this.car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public User<span class="token punctuation">(</span>Car car,String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"User(Car car,String name)!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>        this.car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public User<span class="token punctuation">(</span>Integer name, Car car<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"User(Integer name, Car car)!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        this.name <span class="token operator">=</span> name+<span class="token string">""</span><span class="token punctuation">;</span>        this.car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Car getCar<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCar<span class="token punctuation">(</span>Car car<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setName<span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Integer getAge<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setAge<span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"我是初始化方法!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void destory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"我是销毁方法!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public String toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User [name="</span> + name + <span class="token string">", age="</span> + age + <span class="token string">", car="</span> + car + <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-创建配置文件applicationContext-xml-导入约束"><a href="#4-创建配置文件applicationContext-xml-导入约束" class="headerlink" title="4. 创建配置文件applicationContext.xml,导入约束"></a>4. 创建配置文件applicationContext.xml,导入约束</h3><pre><code>1.window-&gt;Preferences-&gt;搜cata，架&lt;br&gt;2.点add-&gt;File System 选schema&gt;beans&gt;spring-beans-4.2.xsd架&lt;br&gt;3.然后![图2](2.jpg)导入约束完成架&lt;br&gt;4.xml文件中写beans,然后设计视图，右键 Edit Namespaces,然后Add,导入xsi,&lt;br&gt;![图3](3.jpg)![图4](4.jpg) </code></pre><p>   在点add，选择Specify New Namespace,Browse..&gt;<br>    Select XML Catalog entry选择<br>    <img src="/2019/01/24/ssm-fu-xi-zong-jie/5.jpg" alt="图5"><br>    <img src="/2019/01/24/ssm-fu-xi-zong-jie/6.jpg" alt="图6"><br>    <img src="/2019/01/24/ssm-fu-xi-zong-jie/7.jpg" alt="图7"> </p><pre class=" language-bash"><code class="language-bash">applicationContext.xml 导入成功后<span class="token operator">&lt;</span>会有提示的引入约束:spring-framework-4.2.4.RELEASE\docs\spring-framework-reference\html\xsd-configuration.html<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span> xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 将User对象交给spring容器管理 --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- Bean元素:使用该元素描述需要spring容器管理的对象            class属性:被管理对象的完整类名.            name属性:给被管理的对象起个名字.获得对象时根据该名称获得对象.                      可以重复.可以使用特殊字符.            id属性: 与name属性一模一样.                     名称不可重复.不能使用特殊字符.            结论: 尽量使用name属性.            Scope:Prototype 多例，singletion 单例      --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 方式一--<span class="token operator">></span>      <span class="token operator">&lt;</span>bean  name<span class="token operator">=</span><span class="token string">"user"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.bean.User"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--静态工厂创建  调用UserFactory的createUser方法创建名为user2的对象.放入容器 --<span class="token operator">></span>     <span class="token operator">&lt;</span>bean  name<span class="token operator">=</span><span class="token string">"user2"</span>         class<span class="token operator">=</span><span class="token string">"cn.itcast.b_create.UserFactory"</span>         factory-method<span class="token operator">=</span><span class="token string">"createUser"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 创建方式3:实例工厂创建          调用UserFactory对象的createUser2方法创建名为user3的对象.放入容器         <span class="token operator">&lt;</span>bean  name<span class="token operator">=</span><span class="token string">"user3"</span>         factory-bean<span class="token operator">=</span><span class="token string">"userFactory"</span>        factory-method<span class="token operator">=</span><span class="token string">"createUser2"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span>bean  name<span class="token operator">=</span><span class="token string">"userFactory"</span>         class<span class="token operator">=</span><span class="token string">"cn.itcast.b_create.UserFactory"</span>   <span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span>     --<span class="token operator">></span><span class="token operator">&lt;</span>/beans<span class="token operator">></span></code></pre><h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5. 测试"></a>5. 测试</h3><pre class=" language-bash"><code class="language-bash">public class Demo <span class="token punctuation">{</span>    @Test    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 创建容器对象        ApplicationContext ac <span class="token operator">=</span> new ClassPathXmlApplicationContext<span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        /*//2 向容器<span class="token string">"要"</span>user对象        User u <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> ac.getBean<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 打印user对象        System.out.println<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>*/    <span class="token punctuation">}</span>        @Test    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            //1 创建容器对象            ApplicationContext ac <span class="token operator">=</span> new ClassPathXmlApplicationContext<span class="token punctuation">(</span><span class="token string">"cn/itcast/b_create/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //2 向容器<span class="token string">"要"</span>user对象            User u <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> ac.getBean<span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //3 打印user对象            System.out.println<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //创建方式3:实例工厂                @Test                public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    //1 创建容器对象                    ApplicationContext ac <span class="token operator">=</span> new ClassPathXmlApplicationContext<span class="token punctuation">(</span><span class="token string">"cn/itcast/b_create/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    //2 向容器<span class="token string">"要"</span>user对象                    User u <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> ac.getBean<span class="token punctuation">(</span><span class="token string">"user3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    //3 打印user对象                    System.out.println<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span>package cn.itcast.b_create<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.bean.User<span class="token punctuation">;</span>public class UserFactory <span class="token punctuation">{</span>    public static User createUser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"静态工厂创建User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public  User createUser2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"实例工厂创建User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Spring-依赖注入"><a href="#Spring-依赖注入" class="headerlink" title="Spring  依赖注入"></a>Spring  依赖注入</h2><p>IOC 反转控制：对象的创建以及依赖关系可以由spring完成创建以及注入<br><br>DI 依赖注入： 需要有 IOC 的环境,Spring 创建这个类的过程中,Spring 将类的依<br>赖的属性设置进去<br>注入方式：set方法注入，构造方法注入，字段注入，注入类型：值类型，引用类型</p><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>         xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>        xmlns:p<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/p"</span>         xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd "</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- set方式注入: --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean  name<span class="token operator">=</span><span class="token string">"user"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.bean.User"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--值类型注入: 为User对象中名为name的属性注入tom作为值 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"tom"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"age"</span>  value<span class="token operator">=</span><span class="token string">"18"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 引用类型注入: 为car属性注入下方配置的car对象 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"car"</span>  ref<span class="token operator">=</span><span class="token string">"car"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 将car对象配置到容器中 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"car"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.bean.Car"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"兰博基尼"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"color"</span> value<span class="token operator">=</span><span class="token string">"黄色"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span> --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 构造函数注入 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"user2"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.bean.User"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- name属性: 构造函数的参数名 --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- index属性: 构造函数的参数索引 --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- type属性: 构造函数的参数类型--<span class="token operator">></span>    <span class="token operator">&lt;</span>constructor-arg name<span class="token operator">=</span><span class="token string">"name"</span> index<span class="token operator">=</span><span class="token string">"0"</span> type<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span> value<span class="token operator">=</span><span class="token string">"999"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/constructor-arg<span class="token operator">></span>    <span class="token operator">&lt;</span>constructor-arg name<span class="token operator">=</span><span class="token string">"car"</span> ref<span class="token operator">=</span><span class="token string">"car"</span> index<span class="token operator">=</span><span class="token string">"1"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/constructor-arg<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">package cn.itcast.c_injection<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.ApplicationContext<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.support.ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.bean.User<span class="token punctuation">;</span>public class Demo <span class="token punctuation">{</span>    @Test    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 创建容器对象        ApplicationContext ac <span class="token operator">=</span> new ClassPathXmlApplicationContext<span class="token punctuation">(</span><span class="token string">"cn/itcast/c_injection/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 向容器<span class="token string">"要"</span>user对象        User u <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> ac.getBean<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 打印user对象        System.out.println<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 创建容器对象        ApplicationContext ac <span class="token operator">=</span> new ClassPathXmlApplicationContext<span class="token punctuation">(</span><span class="token string">"cn/itcast/c_injection/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 向容器<span class="token string">"要"</span>user对象        User u <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> ac.getBean<span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 打印user对象        System.out.println<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="Spring-注解配置"><a href="#Spring-注解配置" class="headerlink" title="Spring  注解配置"></a>Spring  注解配置</h2><p>导入新的约束 spring-context-4.2.xsd，一样加xml命名空间<br> <img src="/2019/01/24/ssm-fu-xi-zong-jie/8.jpg" alt="图8"></p><pre class=" language-bash"><code class="language-bash"> applicationContext.xml <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span> xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd "</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定扫描cn.itcast.bean报下的所有类中的注解.     注意:扫描包时.会扫描指定报下的所有子孙包 --<span class="token operator">></span><span class="token operator">&lt;</span>context:component-scan base-package<span class="token operator">=</span><span class="token string">"cn.itcast.bean"</span><span class="token operator">></span><span class="token operator">&lt;</span>/context:component-scan<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"car2"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.bean.Car"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"name"</span> value<span class="token operator">=</span><span class="token string">"布加迪威龙"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"color"</span> value<span class="token operator">=</span><span class="token string">"black"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span>/beans<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"> User.java package cn.itcast.bean<span class="token punctuation">;</span><span class="token function">import</span> javax.annotation.PostConstruct<span class="token punctuation">;</span><span class="token function">import</span> javax.annotation.PreDestroy<span class="token punctuation">;</span><span class="token function">import</span> javax.annotation.Resource<span class="token punctuation">;</span><span class="token function">import</span> javax.xml.ws.RespectBinding<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.beans.factory.annotation.Autowired<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.beans.factory.annotation.Qualifier<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.beans.factory.annotation.Value<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.annotation.Scope<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.stereotype.Component<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.stereotype.Controller<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.stereotype.Repository<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.stereotype.Service<span class="token punctuation">;</span>//<span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"user"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.bean.User"</span>  /<span class="token operator">></span>//@Component<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>//    @Service<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> // service层//    @Controller<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> // web层    @Repository<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>// dao层//指定对象的作用范围@Scope<span class="token punctuation">(</span>scopeName<span class="token operator">=</span><span class="token string">"singleton"</span><span class="token punctuation">)</span>public class User <span class="token punctuation">{</span>    private String name<span class="token punctuation">;</span>    @Value<span class="token punctuation">(</span><span class="token string">"18"</span><span class="token punctuation">)</span>    private Integer age<span class="token punctuation">;</span>    //@Autowired //自动装配    //问题:如果匹配多个类型一致的对象.将无法选择具体注入哪一个对象.    //@Qualifier<span class="token punctuation">(</span><span class="token string">"car2"</span><span class="token punctuation">)</span>//使用@Qualifier注解告诉spring容器自动装配哪个名称的对象    @Resource<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"car"</span><span class="token punctuation">)</span>//手动注入,指定注入哪个名称的对象    private Car car<span class="token punctuation">;</span>    public Car getCar<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCar<span class="token punctuation">(</span>Car car<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.car <span class="token operator">=</span> car<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getName<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Value<span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span>        public void setName<span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Integer getAge<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setAge<span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @PostConstruct //在对象被创建后调用.init-method    public void init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"我是初始化方法!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @PreDestroy //在销毁之前调用.destory-method    public void destory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"我是销毁方法!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public String toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User [name="</span> + name + <span class="token string">", age="</span> + age + <span class="token string">", car="</span> + car + <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Spring-junit测试"><a href="#Spring-junit测试" class="headerlink" title="Spring  junit测试"></a>Spring  junit测试</h2><p>加入spring-test包：<br> <img src="/2019/01/24/ssm-fu-xi-zong-jie/9.jpg" alt="图9"></p><pre class=" language-bash"><code class="language-bash"> package cn.itcast.b_test<span class="token punctuation">;</span><span class="token function">import</span> javax.annotation.Resource<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> org.junit.runner.RunWith<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.ApplicationContext<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.support.ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.test.context.ContextConfiguration<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.bean.User<span class="token punctuation">;</span>//帮我们创建容器@RunWith<span class="token punctuation">(</span>SpringJUnit4ClassRunner.class<span class="token punctuation">)</span>//指定创建容器时使用哪个配置文件,要在src下面@ContextConfiguration<span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span>public class Demo <span class="token punctuation">{</span>    //将名为user的对象注入到u变量中    @Resource<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"user"</span><span class="token punctuation">)</span>    private User u<span class="token punctuation">;</span>    @Test    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Spring-AOP切面编程"><a href="#Spring-AOP切面编程" class="headerlink" title="Spring AOP切面编程"></a>Spring AOP切面编程</h2><h3 id="1-导包-4-2-2-2"><a href="#1-导包-4-2-2-2" class="headerlink" title="1.导包 4+2+2+2"></a>1.导包 4+2+2+2</h3><p> 前面一样，后面的包：<br> spring的aop包：<br><br>                      spring-aspects-4.2.4.RELEASE.jar<br><br>                     spring-aop-4.2.4.RELEASE.jar<br><br> spring需要第三方aop包：<br><br>    com.springsource.org.aopalliance-1.0.0.jar<br><br>    com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar </p><p><img src="/2019/01/24/ssm-fu-xi-zong-jie/10.jpg" alt="图10"></p><h3 id="2-准备目标对象"><a href="#2-准备目标对象" class="headerlink" title="2.准备目标对象"></a>2.准备目标对象</h3><pre class=" language-bash"><code class="language-bash">package cn.itcast.service<span class="token punctuation">;</span>public class UserServiceImpl implements UserService <span class="token punctuation">{</span>    @Override    public void save<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"保存用户!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //int i <span class="token operator">=</span> 1/0<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void delete<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"删除用户!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void update<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"更新用户!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void find<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"查找用户!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-准备通知"><a href="#3-准备通知" class="headerlink" title="3.准备通知"></a>3.准备通知</h3><pre class=" language-bash"><code class="language-bash"> package cn.itcast.d_springaop<span class="token punctuation">;</span><span class="token function">import</span> org.aspectj.lang.ProceedingJoinPoint<span class="token punctuation">;</span>//通知类public class MyAdvice <span class="token punctuation">{</span>    //前置通知    //        <span class="token operator">|</span>-目标方法运行之前调用    //后置通知<span class="token punctuation">(</span>如果出现异常不会调用<span class="token punctuation">)</span>//        <span class="token operator">|</span>-在目标方法运行之后调用    //环绕通知//        <span class="token operator">|</span>-在目标方法之前和之后都调用    //异常拦截通知//        <span class="token operator">|</span>-如果出现异常,就会调用    //后置通知<span class="token punctuation">(</span>无论是否出现 异常都会调用<span class="token punctuation">)</span>//        <span class="token operator">|</span>-在目标方法运行之后调用//----------------------------------------------------------------    //前置通知    public void before<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"这是前置通知!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //后置通知    public void afterReturning<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"这是后置通知(如果出现异常不会调用)!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //环绕通知    public Object around<span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> throws Throwable <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"这是环绕通知之前的部分!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object proceed <span class="token operator">=</span> pjp.proceed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//调用目标方法        System.out.println<span class="token punctuation">(</span><span class="token string">"这是环绕通知之后的部分!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //异常通知    public void afterException<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"出事啦!出现异常了!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //后置通知    public void after<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"这是后置通知(出现异常也会调用)!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-配置进行织入-将通知织入目标对象中"><a href="#4-配置进行织入-将通知织入目标对象中" class="headerlink" title="4.配置进行织入,将通知织入目标对象中"></a>4.配置进行织入,将通知织入目标对象中</h3><pre class=" language-bash"><code class="language-bash"> applicationContext.xml  导入新的约束 spring-aop-4.2.xsd，一样加xml命名空间 <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span> xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span> xmlns:aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd "</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 准备工作: 导入aop<span class="token punctuation">(</span>约束<span class="token punctuation">)</span>命名空间 --<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 1.配置目标对象 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"userService"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.service.UserServiceImpl"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 2.配置通知对象 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"myAdvice"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.d_springaop.MyAdvice"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 3.配置将通知织入目标对象 --<span class="token operator">></span>    <span class="token operator">&lt;</span>aop:config<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置切入点             public void cn.itcast.service.UserServiceImpl.save<span class="token punctuation">(</span><span class="token punctuation">)</span>             void cn.itcast.service.UserServiceImpl.save<span class="token punctuation">(</span><span class="token punctuation">)</span>            * cn.itcast.service.UserServiceImpl.save<span class="token punctuation">(</span><span class="token punctuation">)</span>            * cn.itcast.service.UserServiceImpl.*<span class="token punctuation">(</span><span class="token punctuation">)</span>            * cn.itcast.service.*ServiceImpl.*<span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span>            * cn.itcast.service<span class="token punctuation">..</span>*ServiceImpl.*<span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">)</span>        --<span class="token operator">></span>        <span class="token operator">&lt;</span>aop:pointcut expression<span class="token operator">=</span><span class="token string">"execution(* cn.itcast.service.*ServiceImpl.*(..))"</span> id<span class="token operator">=</span><span class="token string">"pc"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>aop:aspect ref<span class="token operator">=</span><span class="token string">"myAdvice"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定名为before方法作为前置通知 --<span class="token operator">></span>            <span class="token operator">&lt;</span>aop:before method<span class="token operator">=</span><span class="token string">"before"</span> pointcut-ref<span class="token operator">=</span><span class="token string">"pc"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 后置 --<span class="token operator">></span>            <span class="token operator">&lt;</span>aop:after-returning method<span class="token operator">=</span><span class="token string">"afterReturning"</span> pointcut-ref<span class="token operator">=</span><span class="token string">"pc"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 环绕通知 --<span class="token operator">></span>            <span class="token operator">&lt;</span>aop:around method<span class="token operator">=</span><span class="token string">"around"</span> pointcut-ref<span class="token operator">=</span><span class="token string">"pc"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 异常拦截通知 --<span class="token operator">></span>            <span class="token operator">&lt;</span>aop:after-throwing method<span class="token operator">=</span><span class="token string">"afterException"</span> pointcut-ref<span class="token operator">=</span><span class="token string">"pc"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 后置 --<span class="token operator">></span>            <span class="token operator">&lt;</span>aop:after method<span class="token operator">=</span><span class="token string">"after"</span> pointcut-ref<span class="token operator">=</span><span class="token string">"pc"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/aop:aspect<span class="token operator">></span>    <span class="token operator">&lt;</span>/aop:config<span class="token operator">></span><span class="token operator">&lt;</span>/beans<span class="token operator">></span>--测试  package cn.itcast.d_springaop<span class="token punctuation">;</span>  <span class="token function">import</span> javax.annotation.Resource<span class="token punctuation">;</span>  <span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span>  <span class="token function">import</span> org.junit.runner.RunWith<span class="token punctuation">;</span>  <span class="token function">import</span> org.springframework.context.ApplicationContext<span class="token punctuation">;</span>  <span class="token function">import</span> org.springframework.context.support.ClassPathXmlApplicationContext<span class="token punctuation">;</span>  <span class="token function">import</span> org.springframework.test.context.ContextConfiguration<span class="token punctuation">;</span>  <span class="token function">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner<span class="token punctuation">;</span>  <span class="token function">import</span> cn.itcast.bean.User<span class="token punctuation">;</span>  <span class="token function">import</span> cn.itcast.service.UserService<span class="token punctuation">;</span>  @RunWith<span class="token punctuation">(</span>SpringJUnit4ClassRunner.class<span class="token punctuation">)</span>  @ContextConfiguration<span class="token punctuation">(</span><span class="token string">"classpath:cn/itcast/d_springaop/applicationContext.xml"</span><span class="token punctuation">)</span>  public class Demo <span class="token punctuation">{</span>      @Resource<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"userService"</span><span class="token punctuation">)</span>      private UserService us<span class="token punctuation">;</span>      @Test      public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          us.save<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="用注解的写法"><a href="#用注解的写法" class="headerlink" title="用注解的写法"></a>用注解的写法</h3><pre class=" language-bash"><code class="language-bash">  applicationContext.xml  <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span> xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span> xmlns:aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd "</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 准备工作: 导入aop<span class="token punctuation">(</span>约束<span class="token punctuation">)</span>命名空间 --<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 1.配置目标对象 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"userService"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.service.UserServiceImpl"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 2.配置通知对象 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"myAdvice"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.e_annotationaop.MyAdvice"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 3.开启使用注解完成织入 --<span class="token operator">></span>    <span class="token operator">&lt;</span>aop:aspectj-autoproxy<span class="token operator">></span><span class="token operator">&lt;</span>/aop:aspectj-autoproxy<span class="token operator">></span><span class="token operator">&lt;</span>/beans<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"> package cn.itcast.e_annotationaop<span class="token punctuation">;</span><span class="token function">import</span> org.aspectj.lang.ProceedingJoinPoint<span class="token punctuation">;</span><span class="token function">import</span> org.aspectj.lang.annotation.After<span class="token punctuation">;</span><span class="token function">import</span> org.aspectj.lang.annotation.AfterReturning<span class="token punctuation">;</span><span class="token function">import</span> org.aspectj.lang.annotation.AfterThrowing<span class="token punctuation">;</span><span class="token function">import</span> org.aspectj.lang.annotation.Around<span class="token punctuation">;</span><span class="token function">import</span> org.aspectj.lang.annotation.Aspect<span class="token punctuation">;</span><span class="token function">import</span> org.aspectj.lang.annotation.Before<span class="token punctuation">;</span><span class="token function">import</span> org.aspectj.lang.annotation.Pointcut<span class="token punctuation">;</span>//通知类@Aspect//表示该类是一个通知类public class MyAdvice <span class="token punctuation">{</span>    @Pointcut<span class="token punctuation">(</span><span class="token string">"execution(* cn.itcast.service.*ServiceImpl.*(..))"</span><span class="token punctuation">)</span>    public void pc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    //前置通知    //指定该方法是前置通知,并制定切入点    @Before<span class="token punctuation">(</span><span class="token string">"MyAdvice.pc()"</span><span class="token punctuation">)</span>    public void before<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"这是前置通知!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //后置通知    @AfterReturning<span class="token punctuation">(</span><span class="token string">"execution(* cn.itcast.service.*ServiceImpl.*(..))"</span><span class="token punctuation">)</span>    public void afterReturning<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"这是后置通知(如果出现异常不会调用)!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //环绕通知    @Around<span class="token punctuation">(</span><span class="token string">"execution(* cn.itcast.service.*ServiceImpl.*(..))"</span><span class="token punctuation">)</span>    public Object around<span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span> throws Throwable <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"这是环绕通知之前的部分!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object proceed <span class="token operator">=</span> pjp.proceed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//调用目标方法        System.out.println<span class="token punctuation">(</span><span class="token string">"这是环绕通知之后的部分!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //异常通知    @AfterThrowing<span class="token punctuation">(</span><span class="token string">"execution(* cn.itcast.service.*ServiceImpl.*(..))"</span><span class="token punctuation">)</span>    public void afterException<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"出事啦!出现异常了!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //后置通知    @After<span class="token punctuation">(</span><span class="token string">"execution(* cn.itcast.service.*ServiceImpl.*(..))"</span><span class="token punctuation">)</span>    public void after<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"这是后置通知(出现异常也会调用)!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>测试还是上面一样的测</code></pre><h2 id="spring整合JDBC"><a href="#spring整合JDBC" class="headerlink" title="spring整合JDBC"></a>spring整合JDBC</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><p>4+2+spring-test，spring-aop，junit4类库<br>c3p0连接池，JDBC驱动，spring-jdbc，spring-tx事务</p><p><img src="/2019/01/24/ssm-fu-xi-zong-jie/11.jpg" alt="图11"></p><h3 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h3><pre class=" language-bash"><code class="language-bash">package cn.itcast.a_jdbctemplate<span class="token punctuation">;</span><span class="token function">import</span> java.sql.ResultSet<span class="token punctuation">;</span><span class="token function">import</span> java.sql.SQLException<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jdbc.core.RowMapper<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.bean.User<span class="token punctuation">;</span>//使用JDBC模板实现增删改查public class UserDaoImpl extends JdbcDaoSupport implements UserDao <span class="token punctuation">{</span>    @Override    public void save<span class="token punctuation">(</span>User u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into t_user values(null,?) "</span><span class="token punctuation">;</span>        super.getJdbcTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.update<span class="token punctuation">(</span>sql, u.getName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void delete<span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from t_user where id = ? "</span><span class="token punctuation">;</span>        super.getJdbcTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.update<span class="token punctuation">(</span>sql,id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void update<span class="token punctuation">(</span>User u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update  t_user set name = ? where id=? "</span><span class="token punctuation">;</span>        super.getJdbcTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.update<span class="token punctuation">(</span>sql, u.getName<span class="token punctuation">(</span><span class="token punctuation">)</span>,u.getId<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public User getById<span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from t_user where id = ? "</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> super.getJdbcTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.queryForObject<span class="token punctuation">(</span>sql,new RowMapper<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            @Override            public User mapRow<span class="token punctuation">(</span>ResultSet rs, int arg1<span class="token punctuation">)</span> throws SQLException <span class="token punctuation">{</span>                User u <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                u.setId<span class="token punctuation">(</span>rs.getInt<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                u.setName<span class="token punctuation">(</span>rs.getString<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> u<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>, id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public int getTotalCount<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select count(*) from t_user  "</span><span class="token punctuation">;</span>        Integer count <span class="token operator">=</span> super.getJdbcTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.queryForObject<span class="token punctuation">(</span>sql, Integer.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public List<span class="token operator">&lt;</span>User<span class="token operator">></span> getAll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from t_user  "</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> super.getJdbcTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.query<span class="token punctuation">(</span>sql, new RowMapper<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            @Override            public User mapRow<span class="token punctuation">(</span>ResultSet rs, int arg1<span class="token punctuation">)</span> throws SQLException <span class="token punctuation">{</span>                User u <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                u.setId<span class="token punctuation">(</span>rs.getInt<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                u.setName<span class="token punctuation">(</span>rs.getString<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> u<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="applicationContext-xml配置"><a href="#applicationContext-xml配置" class="headerlink" title="applicationContext.xml配置"></a>applicationContext.xml配置</h3><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span> xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd "</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定spring读取db.properties配置 --<span class="token operator">></span><span class="token operator">&lt;</span>context:property-placeholder location<span class="token operator">=</span><span class="token string">"classpath:db.properties"</span>  /<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 1.将连接池放入spring容器 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"dataSource"</span> class<span class="token operator">=</span><span class="token string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.jdbcUrl}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClass"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.driverClass}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.user}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.password}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 2.将JDBCTemplate放入spring容器 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"jdbcTemplate"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.jdbc.core.JdbcTemplate"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 3.将UserDao放入spring容器 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"userDao"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.a_jdbctemplate.UserDaoImpl"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jt"</span> ref<span class="token operator">=</span><span class="token string">"jdbcTemplate"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span> --<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span>/beans<span class="token operator">></span>db.propertiesjdbc.jdbcUrl<span class="token operator">=</span>jdbc:mysql:///hibernate_32jdbc.driverClass<span class="token operator">=</span>com.mysql.jdbc.Driverjdbc.user<span class="token operator">=</span>rootjdbc.password<span class="token operator">=</span>1234</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class=" language-bash"><code class="language-bash"> package cn.itcast.a_jdbctemplate<span class="token punctuation">;</span><span class="token function">import</span> java.beans.PropertyVetoException<span class="token punctuation">;</span><span class="token function">import</span> javax.annotation.Resource<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> org.junit.runner.RunWith<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.test.context.ContextConfiguration<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token function">import</span> com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.bean.User<span class="token punctuation">;</span>//演示JDBC模板@RunWith<span class="token punctuation">(</span>SpringJUnit4ClassRunner.class<span class="token punctuation">)</span>@ContextConfiguration<span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span>public class Demo <span class="token punctuation">{</span>        @Resource<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"userDao"</span><span class="token punctuation">)</span>    private UserDao ud<span class="token punctuation">;</span>    @Test    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        //0 准备连接池        ComboPooledDataSource dataSource <span class="token operator">=</span> new ComboPooledDataSource<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource.setDriverClass<span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource.setJdbcUrl<span class="token punctuation">(</span><span class="token string">"jdbc:mysql:///hibernate_32"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource.setUser<span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource.setPassword<span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //1 创建JDBC模板对象        JdbcTemplate jt <span class="token operator">=</span> new JdbcTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jt.setDataSource<span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 书写sql,并执行        String sql <span class="token operator">=</span> <span class="token string">"insert into t_user values(null,'rose') "</span><span class="token punctuation">;</span>        jt.update<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        User u <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u.setName<span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ud.save<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        User u <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u.setId<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>        u.setName<span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ud.update<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    public void fun4<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        ud.delete<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    public void fun5<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span>ud.getTotalCount<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    public void fun6<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span>ud.getById<span class="token punctuation">(</span>1<span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    public void fun7<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span>ud.getAll<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h2 id="导入新的约束"><a href="#导入新的约束" class="headerlink" title="导入新的约束"></a>导入新的约束</h2><p>spring-tx-4.2.4.RELEASE</p><p> <img src="/2019/01/24/ssm-fu-xi-zong-jie/12.jpg" alt="图12"></p><h2 id="事务配置"><a href="#事务配置" class="headerlink" title="事务配置"></a>事务配置</h2><pre class=" language-bash"><code class="language-bash"> applicationContext.xml <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span> xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span> xmlns:aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span> xmlns:tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd "</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定spring读取db.properties配置 --<span class="token operator">></span><span class="token operator">&lt;</span>context:property-placeholder location<span class="token operator">=</span><span class="token string">"classpath:db.properties"</span>  /<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 事务核心管理器,封装了所有事务操作. 依赖于连接池 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"transactionManager"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 事务模板对象 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"transactionTemplate"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.transaction.support.TransactionTemplate"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"transactionManager"</span> ref<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置事务通知 --<span class="token operator">></span><span class="token operator">&lt;</span>tx:advice id<span class="token operator">=</span><span class="token string">"txAdvice"</span> transaction-manager<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>tx:attributes<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 以方法为单位,指定方法应用什么事务属性            isolation:隔离级别            propagation:传播行为            read-only:是否只读         --<span class="token operator">></span>        <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"save*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"persist*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"update*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"modify*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"delete*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"remove*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"get*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"find*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"transfer"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/tx:attributes<span class="token operator">></span><span class="token operator">&lt;</span>/tx:advice<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置织入 --<span class="token operator">></span><span class="token operator">&lt;</span>aop:config  <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置切点表达式 --<span class="token operator">></span>    <span class="token operator">&lt;</span>aop:pointcut expression<span class="token operator">=</span><span class="token string">"execution(* cn.itcast.service.*ServiceImpl.*(..))"</span> id<span class="token operator">=</span><span class="token string">"txPc"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置切面 <span class="token keyword">:</span> 通知+切点             advice-ref:通知的名称             pointcut-ref:切点的名称     --<span class="token operator">></span>    <span class="token operator">&lt;</span>aop:advisor advice-ref<span class="token operator">=</span><span class="token string">"txAdvice"</span> pointcut-ref<span class="token operator">=</span><span class="token string">"txPc"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/aop:config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 1.将连接池 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"dataSource"</span> class<span class="token operator">=</span><span class="token string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.jdbcUrl}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClass"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.driverClass}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.user}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.password}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 2.Dao--<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"accountDao"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.dao.AccountDaoImpl"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 3.Service--<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"accountService"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.service.AccountServiceImpl"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ad"</span> ref<span class="token operator">=</span><span class="token string">"accountDao"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"tt"</span> ref<span class="token operator">=</span><span class="token string">"transactionTemplate"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span>  <span class="token operator">&lt;</span>/beans<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"> AccountDaoImpl.java package cn.itcast.dao<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.jdbc.core.support.JdbcDaoSupport<span class="token punctuation">;</span>public class AccountDaoImpl extends JdbcDaoSupport implements AccountDao  <span class="token punctuation">{</span>    @Override    public void increaseMoney<span class="token punctuation">(</span>Integer id, Double money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        getJdbcTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.update<span class="token punctuation">(</span><span class="token string">"update t_account set money = money+? where id = ? "</span>, money,id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void decreaseMoney<span class="token punctuation">(</span>Integer id, Double money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        getJdbcTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.update<span class="token punctuation">(</span><span class="token string">"update t_account set money = money-? where id = ? "</span>, money,id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试</p><pre class=" language-bash"><code class="language-bash"> package cn.itcast.tx<span class="token punctuation">;</span><span class="token function">import</span> javax.annotation.Resource<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> org.junit.runner.RunWith<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.test.context.ContextConfiguration<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.service.AccountService<span class="token punctuation">;</span>@RunWith<span class="token punctuation">(</span>SpringJUnit4ClassRunner.class<span class="token punctuation">)</span>@ContextConfiguration<span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span>public class Demo <span class="token punctuation">{</span>        @Resource<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"accountService"</span><span class="token punctuation">)</span>    private AccountService as<span class="token punctuation">;</span>    @Test    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        as.transfer<span class="token punctuation">(</span>1, 2, 100d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h2><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span> xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span> xmlns:aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span> xmlns:tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd "</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定spring读取db.properties配置 --<span class="token operator">></span><span class="token operator">&lt;</span>context:property-placeholder location<span class="token operator">=</span><span class="token string">"classpath:db.properties"</span>  /<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 事务核心管理器,封装了所有事务操作. 依赖于连接池 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"transactionManager"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 事务模板对象 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"transactionTemplate"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.transaction.support.TransactionTemplate"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"transactionManager"</span> ref<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 开启使用注解管理aop事务 --<span class="token operator">></span><span class="token operator">&lt;</span>tx:annotation-driven/<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 1.将连接池 --<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"dataSource"</span> class<span class="token operator">=</span><span class="token string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.jdbcUrl}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClass"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.driverClass}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.user}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.password}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 2.Dao--<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"accountDao"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.dao.AccountDaoImpl"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 3.Service--<span class="token operator">></span><span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"accountService"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.service.AccountServiceImpl"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ad"</span> ref<span class="token operator">=</span><span class="token string">"accountDao"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"tt"</span> ref<span class="token operator">=</span><span class="token string">"transactionTemplate"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/bean<span class="token operator">></span>  <span class="token operator">&lt;</span>/beans<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">  AccountServiceImpl.java  package cn.itcast.service<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.TransactionStatus<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.annotation.Isolation<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.annotation.Propagation<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.annotation.Transactional<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.support.TransactionCallback<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.support.TransactionCallbackWithoutResult<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.support.TransactionTemplate<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.dao.AccountDao<span class="token punctuation">;</span>@Transactional<span class="token punctuation">(</span>isolation<span class="token operator">=</span>Isolation.REPEATABLE_READ,propagation<span class="token operator">=</span>Propagation.REQUIRED,readOnly<span class="token operator">=</span>true<span class="token punctuation">)</span>public class AccountServiceImpl implements AccountService <span class="token punctuation">{</span>    private AccountDao ad <span class="token punctuation">;</span>    private TransactionTemplate tt<span class="token punctuation">;</span>    @Override    @Transactional<span class="token punctuation">(</span>isolation<span class="token operator">=</span>Isolation.REPEATABLE_READ,propagation<span class="token operator">=</span>Propagation.REQUIRED,readOnly<span class="token operator">=</span>false<span class="token punctuation">)</span>    public void transfer<span class="token punctuation">(</span>final Integer from,final Integer to,final Double money<span class="token punctuation">)</span> <span class="token punctuation">{</span>                //减钱                ad.decreaseMoney<span class="token punctuation">(</span>from, money<span class="token punctuation">)</span><span class="token punctuation">;</span>                int i <span class="token operator">=</span> 1/0<span class="token punctuation">;</span>                //加钱                ad.increaseMoney<span class="token punctuation">(</span>to, money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setAd<span class="token punctuation">(</span>AccountDao ad<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.ad <span class="token operator">=</span> ad<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setTt<span class="token punctuation">(</span>TransactionTemplate tt<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.tt <span class="token operator">=</span> tt<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><h3 id="导包-1"><a href="#导包-1" class="headerlink" title="导包"></a>导包</h3><p>下载mybatis<br>加入mybatis包和mysql驱动包</p><h3 id="xml-一般使用"><a href="#xml-一般使用" class="headerlink" title="xml 一般使用"></a>xml 一般使用</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapperPUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 写Sql语句   --<span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.mapper.UserMapper"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>sql id<span class="token operator">=</span><span class="token string">"selector"</span><span class="token operator">></span>        <span class="token keyword">select</span> * from user    <span class="token operator">&lt;</span>/sql<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 通过ID查询一个用户 --<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findUserById"</span> parameterType<span class="token operator">=</span><span class="token string">"Integer"</span> resultType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>        <span class="token keyword">select</span> * from user where <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{v}</span>    <span class="token operator">&lt;</span>/select<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- //根据用户名称模糊查询用户列表    <span class="token comment" spellcheck="true">#{}    select * from user where id = ？    占位符  ? ==  '五'</span>    $<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">select</span> * from user where username like <span class="token string">'%五%'</span>  字符串拼接       --<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findUserByUsername"</span> parameterType<span class="token operator">=</span><span class="token string">"String"</span> resultType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.User"</span><span class="token operator">></span>        <span class="token keyword">select</span> * from user where username like <span class="token string">"%"</span>#<span class="token punctuation">{</span>haha<span class="token punctuation">}</span><span class="token string">"%"</span>    <span class="token operator">&lt;</span>/select<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 添加用户 --<span class="token operator">></span>    <span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"insertUser"</span> parameterType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.User"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>selectKey keyProperty<span class="token operator">=</span><span class="token string">"id"</span> resultType<span class="token operator">=</span><span class="token string">"Integer"</span> order<span class="token operator">=</span><span class="token string">"AFTER"</span><span class="token operator">></span>            <span class="token keyword">select</span> LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">&lt;</span>/selectKey<span class="token operator">></span>        insert into user <span class="token punctuation">(</span>username,birthday,address,sex<span class="token punctuation">)</span>         values <span class="token punctuation">(</span><span class="token comment" spellcheck="true">#{username},#{birthday},#{address},#{sex})</span>    <span class="token operator">&lt;</span>/insert<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 更新 --<span class="token operator">></span>    <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updateUserById"</span> parameterType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.User"</span><span class="token operator">></span>        update user         <span class="token keyword">set</span> username <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{username},sex = #{sex},birthday = #{birthday},address = #{address}</span>        where <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id}</span>    <span class="token operator">&lt;</span>/update<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 删除 --<span class="token operator">></span>    <span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteUserById"</span> parameterType<span class="token operator">=</span><span class="token string">"Integer"</span><span class="token operator">></span>        delete from user         where <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{vvvvv}</span>    <span class="token operator">&lt;</span>/delete<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 根据用户名模糊查询 --<span class="token operator">></span>    <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"findUserByQueryVo"</span> parameterType<span class="token operator">=</span><span class="token string">"QueryVo"</span> resultType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.User"</span><span class="token operator">></span>        <span class="token keyword">select</span> * from user where username like <span class="token string">"%"</span>#<span class="token punctuation">{</span>user.username<span class="token punctuation">}</span><span class="token string">"%"</span>    <span class="token operator">&lt;</span>/select<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--      --<span class="token operator">></span>     <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"countUser"</span> resultType<span class="token operator">=</span><span class="token string">"Integer"</span><span class="token operator">></span>         <span class="token keyword">select</span> count<span class="token punctuation">(</span>1<span class="token punctuation">)</span> from user     <span class="token operator">&lt;</span>/select<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span>--    根据性别和名字查询用户  where 可以去掉第一个前ANd   --<span class="token operator">></span>     <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectUserBySexAndUsername"</span> parameterType<span class="token operator">=</span><span class="token string">"User"</span> resultType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"selector"</span>/<span class="token operator">></span>         <span class="token operator">&lt;</span>where<span class="token operator">></span>             <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"sex != null and sex != ''"</span><span class="token operator">></span>                  and sex <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{sex} </span>             <span class="token operator">&lt;</span>/if<span class="token operator">></span>             <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"username != null and username != ''"</span><span class="token operator">></span>                  and username <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{username}</span>             <span class="token operator">&lt;</span>/if<span class="token operator">></span>         <span class="token operator">&lt;</span>/where<span class="token operator">></span>     <span class="token operator">&lt;</span>/select<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span>-- 多个ID <span class="token punctuation">(</span>1,2,3<span class="token punctuation">)</span>--<span class="token operator">></span>     <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectUserByIds"</span> parameterType<span class="token operator">=</span><span class="token string">"QueryVo"</span> resultType<span class="token operator">=</span><span class="token string">"User"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"selector"</span>/<span class="token operator">></span>         <span class="token operator">&lt;</span>where<span class="token operator">></span>             <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"list"</span> item<span class="token operator">=</span><span class="token string">"id"</span> separator<span class="token operator">=</span><span class="token string">","</span> open<span class="token operator">=</span><span class="token string">"id in ("</span> close<span class="token operator">=</span><span class="token string">")"</span><span class="token operator">></span>                 <span class="token comment" spellcheck="true">#{id}</span>             <span class="token operator">&lt;</span>/foreach<span class="token operator">></span>         <span class="token operator">&lt;</span>/where<span class="token operator">></span>     <span class="token operator">&lt;</span>/select<span class="token operator">></span><span class="token operator">&lt;</span>/mapper<span class="token operator">></span></code></pre><h2 id="mybatis-spring整合"><a href="#mybatis-spring整合" class="headerlink" title="mybatis+spring整合"></a>mybatis+spring整合</h2><p><img src="/2019/01/24/ssm-fu-xi-zong-jie/13.jpg" alt="图13"></p><h3 id="sqlMapConfig-xml"><a href="#sqlMapConfig-xml" class="headerlink" title="sqlMapConfig.xml"></a>sqlMapConfig.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configurationPUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置别名 --<span class="token operator">></span>    <span class="token operator">&lt;</span>typeAliases<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 2. 指定扫描包，会把包内所有的类都设置别名，别名的名称就是类名，大小写不敏感 --<span class="token operator">></span>        <span class="token operator">&lt;</span>package name<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/typeAliases<span class="token operator">></span>    <span class="token operator">&lt;</span>mappers<span class="token operator">></span>        <span class="token operator">&lt;</span>package name<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.mapper"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>/mappers<span class="token operator">></span><span class="token operator">&lt;</span>/configuration<span class="token operator">></span></code></pre><h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>    xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span> xmlns:p<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/p"</span>    xmlns:aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span> xmlns:tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>    xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>    xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context:property-placeholder location<span class="token operator">=</span><span class="token string">"classpath:db.properties"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 数据库连接池 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> class<span class="token operator">=</span><span class="token string">"org.apache.commons.dbcp.BasicDataSource"</span>        destroy-method<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.driver}</span>"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.url}</span>"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.username}</span>"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.password}</span>"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxActive"</span> value<span class="token operator">=</span><span class="token string">"10"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxIdle"</span> value<span class="token operator">=</span><span class="token string">"5"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- Mybatis的工厂 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"sqlSessionFactoryBean"</span> class<span class="token operator">=</span><span class="token string">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 核心配置文件的位置 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"configLocation"</span> value<span class="token operator">=</span><span class="token string">"classpath:sqlMapConfig.xml"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- Mapper动态代理开发   扫描 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean class<span class="token operator">=</span><span class="token string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 基本包 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"basePackage"</span> value<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.mapper"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span>/beans<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"> db.propertiesjdbc.driver<span class="token operator">=</span>com.mysql.jdbc.Driverjdbc.url<span class="token operator">=</span>jdbc:mysql://localhost:3306/mybatis?characterEncoding<span class="token operator">=</span>utf-8jdbc.username<span class="token operator">=</span>rootjdbc.password<span class="token operator">=</span>root</code></pre><pre class=" language-bash"><code class="language-bash">log4j.properties <span class="token comment" spellcheck="true"># Global logging configuration</span>log4j.rootLogger<span class="token operator">=</span>DEBUG, stdout<span class="token comment" spellcheck="true"># Console output...</span>log4j.appender.stdout<span class="token operator">=</span>org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout<span class="token operator">=</span>org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern<span class="token operator">=</span>%5p <span class="token punctuation">[</span>%t<span class="token punctuation">]</span> - %m%n</code></pre><h3 id="Pojo"><a href="#Pojo" class="headerlink" title="Pojo"></a>Pojo</h3><pre class=" language-bash"><code class="language-bash">  User.javapackage com.itheima.mybatis.pojo<span class="token punctuation">;</span><span class="token function">import</span> java.util.Date<span class="token punctuation">;</span>public class User <span class="token punctuation">{</span>    private Integer <span class="token function">id</span><span class="token punctuation">;</span>    private String username<span class="token punctuation">;</span>    private Date birthday<span class="token punctuation">;</span>    private String sex<span class="token punctuation">;</span>    private String address<span class="token punctuation">;</span>    public Integer getId<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setId<span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.id <span class="token operator">=</span> <span class="token function">id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getUsername<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUsername<span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.username <span class="token operator">=</span> username <span class="token operator">==</span> null ? null <span class="token keyword">:</span> username.trim<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Date getBirthday<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setBirthday<span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getSex<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setSex<span class="token punctuation">(</span>String sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.sex <span class="token operator">=</span> sex <span class="token operator">==</span> null ? null <span class="token keyword">:</span> sex.trim<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getAddress<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setAddress<span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.address <span class="token operator">=</span> address <span class="token operator">==</span> null ? null <span class="token keyword">:</span> address.trim<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><pre class=" language-bash"><code class="language-bash"> UserMapper.java package com.itheima.mybatis.mapper<span class="token punctuation">;</span><span class="token function">import</span> com.itheima.mybatis.pojo.User<span class="token punctuation">;</span><span class="token function">import</span> com.itheima.mybatis.pojo.UserExample<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span><span class="token function">import</span> org.apache.ibatis.annotations.Param<span class="token punctuation">;</span>public interface UserMapper <span class="token punctuation">{</span>    int countByExample<span class="token punctuation">(</span>UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span>    int deleteByExample<span class="token punctuation">(</span>UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span>    int deleteByPrimaryKey<span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    int insert<span class="token punctuation">(</span>User record<span class="token punctuation">)</span><span class="token punctuation">;</span>    int insertSelective<span class="token punctuation">(</span>User record<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> selectByExample<span class="token punctuation">(</span>UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span>    User selectByPrimaryKey<span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    int updateByExampleSelective<span class="token punctuation">(</span>@Param<span class="token punctuation">(</span><span class="token string">"record"</span><span class="token punctuation">)</span> User record, @Param<span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span> UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span>    int updateByExample<span class="token punctuation">(</span>@Param<span class="token punctuation">(</span><span class="token string">"record"</span><span class="token punctuation">)</span> User record, @Param<span class="token punctuation">(</span><span class="token string">"example"</span><span class="token punctuation">)</span> UserExample example<span class="token punctuation">)</span><span class="token punctuation">;</span>    int updateByPrimaryKeySelective<span class="token punctuation">(</span>User record<span class="token punctuation">)</span><span class="token punctuation">;</span>    int updateByPrimaryKey<span class="token punctuation">(</span>User record<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">  mapper.xml  <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE mapper PUBLIC <span class="token string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="token string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> <span class="token operator">></span><span class="token operator">&lt;</span>mapper namespace<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.mapper.UserMapper"</span> <span class="token operator">></span>  <span class="token operator">&lt;</span>resultMap id<span class="token operator">=</span><span class="token string">"BaseResultMap"</span> type<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.User"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>id column<span class="token operator">=</span><span class="token string">"id"</span> property<span class="token operator">=</span><span class="token string">"id"</span> jdbcType<span class="token operator">=</span><span class="token string">"INTEGER"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"username"</span> property<span class="token operator">=</span><span class="token string">"username"</span> jdbcType<span class="token operator">=</span><span class="token string">"VARCHAR"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"birthday"</span> property<span class="token operator">=</span><span class="token string">"birthday"</span> jdbcType<span class="token operator">=</span><span class="token string">"DATE"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"sex"</span> property<span class="token operator">=</span><span class="token string">"sex"</span> jdbcType<span class="token operator">=</span><span class="token string">"CHAR"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>result column<span class="token operator">=</span><span class="token string">"address"</span> property<span class="token operator">=</span><span class="token string">"address"</span> jdbcType<span class="token operator">=</span><span class="token string">"VARCHAR"</span> /<span class="token operator">></span>  <span class="token operator">&lt;</span>/resultMap<span class="token operator">></span>  <span class="token operator">&lt;</span>sql id<span class="token operator">=</span><span class="token string">"Example_Where_Clause"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>where <span class="token operator">></span>      <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"oredCriteria"</span> item<span class="token operator">=</span><span class="token string">"criteria"</span> separator<span class="token operator">=</span><span class="token string">"or"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"criteria.valid"</span> <span class="token operator">></span>          <span class="token operator">&lt;</span>trim prefix<span class="token operator">=</span><span class="token string">"("</span> suffix<span class="token operator">=</span><span class="token string">")"</span> prefixOverrides<span class="token operator">=</span><span class="token string">"and"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"criteria.criteria"</span> item<span class="token operator">=</span><span class="token string">"criterion"</span> <span class="token operator">></span>              <span class="token operator">&lt;</span>choose <span class="token operator">></span>                <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"criterion.noValue"</span> <span class="token operator">></span>                  and <span class="token variable">${criterion.condition}</span>                <span class="token operator">&lt;</span>/when<span class="token operator">></span>                <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"criterion.singleValue"</span> <span class="token operator">></span>                  and <span class="token variable">${criterion.condition}</span> <span class="token comment" spellcheck="true">#{criterion.value}</span>                <span class="token operator">&lt;</span>/when<span class="token operator">></span>                <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"criterion.betweenValue"</span> <span class="token operator">></span>                  and <span class="token variable">${criterion.condition}</span> <span class="token comment" spellcheck="true">#{criterion.value} and #{criterion.secondValue}</span>                <span class="token operator">&lt;</span>/when<span class="token operator">></span>                <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"criterion.listValue"</span> <span class="token operator">></span>                  and <span class="token variable">${criterion.condition}</span>                  <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"criterion.value"</span> item<span class="token operator">=</span><span class="token string">"listItem"</span> open<span class="token operator">=</span><span class="token string">"("</span> close<span class="token operator">=</span><span class="token string">")"</span> separator<span class="token operator">=</span><span class="token string">","</span> <span class="token operator">></span>                    <span class="token comment" spellcheck="true">#{listItem}</span>                  <span class="token operator">&lt;</span>/foreach<span class="token operator">></span>                <span class="token operator">&lt;</span>/when<span class="token operator">></span>              <span class="token operator">&lt;</span>/choose<span class="token operator">></span>            <span class="token operator">&lt;</span>/foreach<span class="token operator">></span>          <span class="token operator">&lt;</span>/trim<span class="token operator">></span>        <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>/foreach<span class="token operator">></span>    <span class="token operator">&lt;</span>/where<span class="token operator">></span>  <span class="token operator">&lt;</span>/sql<span class="token operator">></span>  <span class="token operator">&lt;</span>sql id<span class="token operator">=</span><span class="token string">"Update_By_Example_Where_Clause"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>where <span class="token operator">></span>      <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"example.oredCriteria"</span> item<span class="token operator">=</span><span class="token string">"criteria"</span> separator<span class="token operator">=</span><span class="token string">"or"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"criteria.valid"</span> <span class="token operator">></span>          <span class="token operator">&lt;</span>trim prefix<span class="token operator">=</span><span class="token string">"("</span> suffix<span class="token operator">=</span><span class="token string">")"</span> prefixOverrides<span class="token operator">=</span><span class="token string">"and"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"criteria.criteria"</span> item<span class="token operator">=</span><span class="token string">"criterion"</span> <span class="token operator">></span>              <span class="token operator">&lt;</span>choose <span class="token operator">></span>                <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"criterion.noValue"</span> <span class="token operator">></span>                  and <span class="token variable">${criterion.condition}</span>                <span class="token operator">&lt;</span>/when<span class="token operator">></span>                <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"criterion.singleValue"</span> <span class="token operator">></span>                  and <span class="token variable">${criterion.condition}</span> <span class="token comment" spellcheck="true">#{criterion.value}</span>                <span class="token operator">&lt;</span>/when<span class="token operator">></span>                <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"criterion.betweenValue"</span> <span class="token operator">></span>                  and <span class="token variable">${criterion.condition}</span> <span class="token comment" spellcheck="true">#{criterion.value} and #{criterion.secondValue}</span>                <span class="token operator">&lt;</span>/when<span class="token operator">></span>                <span class="token operator">&lt;</span>when test<span class="token operator">=</span><span class="token string">"criterion.listValue"</span> <span class="token operator">></span>                  and <span class="token variable">${criterion.condition}</span>                  <span class="token operator">&lt;</span>foreach collection<span class="token operator">=</span><span class="token string">"criterion.value"</span> item<span class="token operator">=</span><span class="token string">"listItem"</span> open<span class="token operator">=</span><span class="token string">"("</span> close<span class="token operator">=</span><span class="token string">")"</span> separator<span class="token operator">=</span><span class="token string">","</span> <span class="token operator">></span>                    <span class="token comment" spellcheck="true">#{listItem}</span>                  <span class="token operator">&lt;</span>/foreach<span class="token operator">></span>                <span class="token operator">&lt;</span>/when<span class="token operator">></span>              <span class="token operator">&lt;</span>/choose<span class="token operator">></span>            <span class="token operator">&lt;</span>/foreach<span class="token operator">></span>          <span class="token operator">&lt;</span>/trim<span class="token operator">></span>        <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>/foreach<span class="token operator">></span>    <span class="token operator">&lt;</span>/where<span class="token operator">></span>  <span class="token operator">&lt;</span>/sql<span class="token operator">></span>  <span class="token operator">&lt;</span>sql id<span class="token operator">=</span><span class="token string">"Base_Column_List"</span> <span class="token operator">></span>    id, username, birthday, sex, address  <span class="token operator">&lt;</span>/sql<span class="token operator">></span>  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectByExample"</span> resultMap<span class="token operator">=</span><span class="token string">"BaseResultMap"</span> parameterType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.UserExample"</span> <span class="token operator">></span>    <span class="token keyword">select</span>    <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"distinct"</span> <span class="token operator">></span>      distinct    <span class="token operator">&lt;</span>/if<span class="token operator">></span>    <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span> /<span class="token operator">></span>    from user    <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"_parameter != null"</span> <span class="token operator">></span>      <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Example_Where_Clause"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/if<span class="token operator">></span>    <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"orderByClause != null"</span> <span class="token operator">></span>      order by <span class="token variable">${orderByClause}</span>    <span class="token operator">&lt;</span>/if<span class="token operator">></span>  <span class="token operator">&lt;</span>/select<span class="token operator">></span>  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"selectByPrimaryKey"</span> resultMap<span class="token operator">=</span><span class="token string">"BaseResultMap"</span> parameterType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span> <span class="token operator">></span>    <span class="token keyword">select</span>     <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Base_Column_List"</span> /<span class="token operator">></span>    from user    where <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id,jdbcType=INTEGER}</span>  <span class="token operator">&lt;</span>/select<span class="token operator">></span>  <span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteByPrimaryKey"</span> parameterType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span> <span class="token operator">></span>    delete from user    where <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id,jdbcType=INTEGER}</span>  <span class="token operator">&lt;</span>/delete<span class="token operator">></span>  <span class="token operator">&lt;</span>delete id<span class="token operator">=</span><span class="token string">"deleteByExample"</span> parameterType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.UserExample"</span> <span class="token operator">></span>    delete from user    <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"_parameter != null"</span> <span class="token operator">></span>      <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Example_Where_Clause"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/if<span class="token operator">></span>  <span class="token operator">&lt;</span>/delete<span class="token operator">></span>  <span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"insert"</span> parameterType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.User"</span> <span class="token operator">></span>    insert into user <span class="token punctuation">(</span>id, username, birthday,       sex, address<span class="token punctuation">)</span>    values <span class="token punctuation">(</span><span class="token comment" spellcheck="true">#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{birthday,jdbcType=DATE}, </span>      <span class="token comment" spellcheck="true">#{sex,jdbcType=CHAR}, #{address,jdbcType=VARCHAR})</span>  <span class="token operator">&lt;</span>/insert<span class="token operator">></span>  <span class="token operator">&lt;</span>insert id<span class="token operator">=</span><span class="token string">"insertSelective"</span> parameterType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.User"</span> <span class="token operator">></span>    insert into user    <span class="token operator">&lt;</span>trim prefix<span class="token operator">=</span><span class="token string">"("</span> suffix<span class="token operator">=</span><span class="token string">")"</span> suffixOverrides<span class="token operator">=</span><span class="token string">","</span> <span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"id != null"</span> <span class="token operator">></span>        id,      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"username != null"</span> <span class="token operator">></span>        username,      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"birthday != null"</span> <span class="token operator">></span>        birthday,      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"sex != null"</span> <span class="token operator">></span>        sex,      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"address != null"</span> <span class="token operator">></span>        address,      <span class="token operator">&lt;</span>/if<span class="token operator">></span>    <span class="token operator">&lt;</span>/trim<span class="token operator">></span>    <span class="token operator">&lt;</span>trim prefix<span class="token operator">=</span><span class="token string">"values ("</span> suffix<span class="token operator">=</span><span class="token string">")"</span> suffixOverrides<span class="token operator">=</span><span class="token string">","</span> <span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"id != null"</span> <span class="token operator">></span>        <span class="token comment" spellcheck="true">#{id,jdbcType=INTEGER},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"username != null"</span> <span class="token operator">></span>        <span class="token comment" spellcheck="true">#{username,jdbcType=VARCHAR},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"birthday != null"</span> <span class="token operator">></span>        <span class="token comment" spellcheck="true">#{birthday,jdbcType=DATE},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"sex != null"</span> <span class="token operator">></span>        <span class="token comment" spellcheck="true">#{sex,jdbcType=CHAR},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"address != null"</span> <span class="token operator">></span>        <span class="token comment" spellcheck="true">#{address,jdbcType=VARCHAR},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>    <span class="token operator">&lt;</span>/trim<span class="token operator">></span>  <span class="token operator">&lt;</span>/insert<span class="token operator">></span>  <span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"countByExample"</span> parameterType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.UserExample"</span> resultType<span class="token operator">=</span><span class="token string">"java.lang.Integer"</span> <span class="token operator">></span>    <span class="token keyword">select</span> count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from user    <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"_parameter != null"</span> <span class="token operator">></span>      <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Example_Where_Clause"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/if<span class="token operator">></span>  <span class="token operator">&lt;</span>/select<span class="token operator">></span>  <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updateByExampleSelective"</span> parameterType<span class="token operator">=</span><span class="token string">"map"</span> <span class="token operator">></span>    update user    <span class="token operator">&lt;</span>set <span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"record.id != null"</span> <span class="token operator">></span>        <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.id,jdbcType=INTEGER},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"record.username != null"</span> <span class="token operator">></span>        username <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.username,jdbcType=VARCHAR},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"record.birthday != null"</span> <span class="token operator">></span>        birthday <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.birthday,jdbcType=DATE},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"record.sex != null"</span> <span class="token operator">></span>        sex <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.sex,jdbcType=CHAR},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"record.address != null"</span> <span class="token operator">></span>        address <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.address,jdbcType=VARCHAR},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>    <span class="token operator">&lt;</span>/set<span class="token operator">></span>    <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"_parameter != null"</span> <span class="token operator">></span>      <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Update_By_Example_Where_Clause"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/if<span class="token operator">></span>  <span class="token operator">&lt;</span>/update<span class="token operator">></span>  <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updateByExample"</span> parameterType<span class="token operator">=</span><span class="token string">"map"</span> <span class="token operator">></span>    update user    <span class="token keyword">set</span> <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.id,jdbcType=INTEGER},</span>      username <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.username,jdbcType=VARCHAR},</span>      birthday <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.birthday,jdbcType=DATE},</span>      sex <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.sex,jdbcType=CHAR},</span>      address <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{record.address,jdbcType=VARCHAR}</span>    <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"_parameter != null"</span> <span class="token operator">></span>      <span class="token operator">&lt;</span>include refid<span class="token operator">=</span><span class="token string">"Update_By_Example_Where_Clause"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/if<span class="token operator">></span>  <span class="token operator">&lt;</span>/update<span class="token operator">></span>  <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updateByPrimaryKeySelective"</span> parameterType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.User"</span> <span class="token operator">></span>    update user    <span class="token operator">&lt;</span>set <span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"username != null"</span> <span class="token operator">></span>        username <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{username,jdbcType=VARCHAR},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"birthday != null"</span> <span class="token operator">></span>        birthday <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{birthday,jdbcType=DATE},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"sex != null"</span> <span class="token operator">></span>        sex <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{sex,jdbcType=CHAR},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>      <span class="token operator">&lt;</span>if test<span class="token operator">=</span><span class="token string">"address != null"</span> <span class="token operator">></span>        address <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{address,jdbcType=VARCHAR},</span>      <span class="token operator">&lt;</span>/if<span class="token operator">></span>    <span class="token operator">&lt;</span>/set<span class="token operator">></span>    where <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id,jdbcType=INTEGER}</span>  <span class="token operator">&lt;</span>/update<span class="token operator">></span>  <span class="token operator">&lt;</span>update id<span class="token operator">=</span><span class="token string">"updateByPrimaryKey"</span> parameterType<span class="token operator">=</span><span class="token string">"com.itheima.mybatis.pojo.User"</span> <span class="token operator">></span>    update user    <span class="token keyword">set</span> username <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{username,jdbcType=VARCHAR},</span>      birthday <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{birthday,jdbcType=DATE},</span>      sex <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{sex,jdbcType=CHAR},</span>      address <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{address,jdbcType=VARCHAR}</span>    where <span class="token function">id</span> <span class="token operator">=</span> <span class="token comment" spellcheck="true">#{id,jdbcType=INTEGER}</span>  <span class="token operator">&lt;</span>/update<span class="token operator">></span><span class="token operator">&lt;</span>/mapper<span class="token operator">></span></code></pre><h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><pre class=" language-bash"><code class="language-bash">  package com.itheima.mybatis.junit<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.ApplicationContext<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.support.ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token function">import</span> com.itheima.mybatis.mapper.UserMapper<span class="token punctuation">;</span><span class="token function">import</span> com.itheima.mybatis.pojo.User<span class="token punctuation">;</span><span class="token function">import</span> com.itheima.mybatis.pojo.UserExample<span class="token punctuation">;</span>public class JunitTest <span class="token punctuation">{</span>    @Test    public void testMapper<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        ApplicationContext ac <span class="token operator">=</span> new ClassPathXmlApplicationContext<span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper userMapper <span class="token operator">=</span> ac.getBean<span class="token punctuation">(</span>UserMapper.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserExample example <span class="token operator">=</span> new UserExample<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String username <span class="token operator">=</span> <span class="token string">"明"</span><span class="token punctuation">;</span>        example.createCriteria<span class="token punctuation">(</span><span class="token punctuation">)</span>.andSexEqualTo<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>.andUsernameLike<span class="token punctuation">(</span><span class="token string">"%"</span> + username + <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        example.setOrderByClause<span class="token punctuation">(</span><span class="token string">"id desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int countByExample <span class="token operator">=</span> userMapper.countByExample<span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>countByExample<span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userMapper.selectByPrimaryKey<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">users</span> <span class="token operator">=</span> userMapper.selectByExample<span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User user2 <span class="token keyword">:</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span>user2.getId<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="springmvc-SSM整合Demo"><a href="#springmvc-SSM整合Demo" class="headerlink" title="springmvc/SSM整合Demo"></a>springmvc/SSM整合Demo</h2><h3 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h3><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>    xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns:p<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/p"</span>    xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>    xmlns:mvc<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/mvc"</span>    xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 扫描@Controler  @Service   --<span class="token operator">></span>        <span class="token operator">&lt;</span>context:component-scan base-package<span class="token operator">=</span><span class="token string">"com.itheima"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 处理器映射器 --<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--         <span class="token operator">&lt;</span>bean class<span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/<span class="token operator">></span> --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 处理器适配器 --<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--         <span class="token operator">&lt;</span>bean class<span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/<span class="token operator">></span> --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 注解驱动 --<span class="token operator">></span>        <span class="token operator">&lt;</span>mvc:annotation-driven conversion-service<span class="token operator">=</span><span class="token string">"conversionServiceFactoryBean"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置Conveter转换器  转换工厂 （日期、去掉前后空格）。。 --<span class="token operator">></span>        <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"conversionServiceFactoryBean"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置 多个转换器--<span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"converters"</span><span class="token operator">></span>                <span class="token operator">&lt;</span>list<span class="token operator">></span>                    <span class="token operator">&lt;</span>bean class<span class="token operator">=</span><span class="token string">"com.itheima.springmvc.conversion.DateConveter"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>/list<span class="token operator">></span>            <span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>/bean<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 上传图片配置实现类 --<span class="token operator">></span>        <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"multipartResolver"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 上传图片的大小   B   5M  1*1024*1024*5--<span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxUploadSize"</span> value<span class="token operator">=</span><span class="token string">"5000000"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/bean<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- Springmvc的异常处理器 --<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>--         <span class="token operator">&lt;</span>bean class<span class="token operator">=</span><span class="token string">"com.itheima.springmvc.exception.CustomExceptionResolver"</span>/<span class="token operator">></span> --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- SPringmvc的拦截器 --<span class="token operator">></span>        <span class="token operator">&lt;</span>mvc:interceptors<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- 多个拦截器 --<span class="token operator">></span>            <span class="token operator">&lt;</span>mvc:interceptor<span class="token operator">></span>                <span class="token operator">&lt;</span>mvc:mapping path<span class="token operator">=</span><span class="token string">"/**"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span>-- 自定义的拦截器类 --<span class="token operator">></span>                <span class="token operator">&lt;</span>bean class<span class="token operator">=</span><span class="token string">"com.itheima.springmvc.interceptor.Interceptor1"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>/mvc:interceptor<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--         <span class="token operator">&lt;</span>mvc:interceptor<span class="token operator">></span>                <span class="token operator">&lt;</span>mvc:mapping path<span class="token operator">=</span><span class="token string">"/**"</span>/<span class="token operator">></span>                自定义的拦截器类                <span class="token operator">&lt;</span>bean class<span class="token operator">=</span><span class="token string">"com.itheima.springmvc.interceptor.Interceptor2"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>/mvc:interceptor<span class="token operator">></span> --<span class="token operator">></span>        <span class="token operator">&lt;</span>/mvc:interceptors<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 视图解释器 --<span class="token operator">></span>        <span class="token operator">&lt;</span>bean class<span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"prefix"</span> value<span class="token operator">=</span><span class="token string">"/WEB-INF/jsp/"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"suffix"</span> value<span class="token operator">=</span><span class="token string">".jsp"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/bean<span class="token operator">></span>   <span class="token operator">&lt;</span>/beans<span class="token operator">></span></code></pre><h3 id="applicationContext-xml-1"><a href="#applicationContext-xml-1" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>    xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span> xmlns:p<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/p"</span>    xmlns:aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span> xmlns:tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>    xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>    xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context:property-placeholder location<span class="token operator">=</span><span class="token string">"classpath:db.properties"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 数据库连接池 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> class<span class="token operator">=</span><span class="token string">"org.apache.commons.dbcp.BasicDataSource"</span>        destroy-method<span class="token operator">=</span><span class="token string">"close"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.driver}</span>"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.url}</span>"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.username}</span>"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.password}</span>"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxActive"</span> value<span class="token operator">=</span><span class="token string">"10"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxIdle"</span> value<span class="token operator">=</span><span class="token string">"5"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- Mybatis的工厂 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"sqlSessionFactoryBean"</span> class<span class="token operator">=</span><span class="token string">"org.mybatis.spring.SqlSessionFactoryBean"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 核心配置文件的位置 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"configLocation"</span> value<span class="token operator">=</span><span class="token string">"classpath:sqlMapConfig.xml"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- Mapper动态代理开发   扫描 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean class<span class="token operator">=</span><span class="token string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 基本包 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"basePackage"</span> value<span class="token operator">=</span><span class="token string">"com.itheima.springmvc.dao"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 注解事务 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 开启注解 --<span class="token operator">></span>    <span class="token operator">&lt;</span>tx:annotation-driven transaction-manager<span class="token operator">=</span><span class="token string">"transactionManager"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/beans<span class="token operator">></span></code></pre><h3 id="sqlMapConfig-xml-1"><a href="#sqlMapConfig-xml-1" class="headerlink" title="sqlMapConfig.xml"></a>sqlMapConfig.xml</h3><pre class=" language-bash"><code class="language-bash">    <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE configurationPUBLIC <span class="token string">"-//mybatis.org//DTD Config 3.0//EN"</span><span class="token string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 设置别名 --<span class="token operator">></span>    <span class="token operator">&lt;</span>typeAliases<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 2. 指定扫描包，会把包内所有的类都设置别名，别名的名称就是类名，大小写不敏感 --<span class="token operator">></span>        <span class="token operator">&lt;</span>package name<span class="token operator">=</span><span class="token string">"com.itheima.springmvc.pojo"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/typeAliases<span class="token operator">></span><span class="token operator">&lt;</span>/configuration<span class="token operator">></span></code></pre><h3 id="SSM-整合代码下载"><a href="#SSM-整合代码下载" class="headerlink" title="SSM 整合代码下载"></a>SSM 整合代码下载</h3><p> 一个小demo 对SSM整合</p><p>   <img src="/2019/01/24/ssm-fu-xi-zong-jie/14.jpg" alt="图14"></p><p>  github代码下载：   <a href="https://github.com/zy20081/JAVA/tree/master/springmvc-mybatis02" target="_blank" rel="noopener">https://github.com/zy20081/JAVA/tree/master/springmvc-mybatis02</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传与下载</title>
      <link href="/2019/01/17/shang-chuan-yu-xia-zai/"/>
      <url>/2019/01/17/shang-chuan-yu-xia-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="上传与下载"><a href="#上传与下载" class="headerlink" title="上传与下载"></a>上传与下载</h2><p>听说好多面试的时候喜欢出上传与下载的题目，这里我就写winform版本和.net版本都写一个，写核心代码，细节就不写了，仅供参考</p><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><p><img src="/2019/01/17/shang-chuan-yu-xia-zai/1.jpg" alt="图1"></p><pre class=" language-bash"><code class="language-bash"> //上传        private void btnUpload_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            openFile.ShowDialog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            using <span class="token punctuation">(</span>FileStream fileStream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span>openFile.FileName, FileMode.Open<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> new byte<span class="token punctuation">[</span>fileStream.Length<span class="token punctuation">]</span><span class="token punctuation">;</span>                fileStream.Read<span class="token punctuation">(</span>buffer, 0, buffer.Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>FileStream <span class="token function">file</span> <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span>@<span class="token string">"../../images/11.jpg"</span>, FileMode.CreateNew<span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    file.Write<span class="token punctuation">(</span>buffer, 0, buffer.Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //下载        private void btnDowload_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string path <span class="token operator">=</span> @<span class="token string">"../../images/11.jpg"</span><span class="token punctuation">;</span>            using <span class="token punctuation">(</span>FileStream filestream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span>path, FileMode.Open<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> new byte<span class="token punctuation">[</span>filestream.Length<span class="token punctuation">]</span><span class="token punctuation">;</span>                filestream.Read<span class="token punctuation">(</span>buffer, 0, buffer.Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>FileStream <span class="token function">file</span> <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span>@<span class="token string">"C://1.jpg"</span>, FileMode.CreateNew<span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    file.Write<span class="token punctuation">(</span>buffer, 0, buffer.Length<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> </code></pre><h2 id="asp-net"><a href="#asp-net" class="headerlink" title="asp.net"></a>asp.net</h2><p><img src="/2019/01/17/shang-chuan-yu-xia-zai/2.jpg" alt="图2"></p><pre class=" language-bash"><code class="language-bash">前台：  <span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"form1"</span> method<span class="token operator">=</span><span class="token string">"post"</span> action<span class="token operator">=</span><span class="token string">"index.aspx"</span>enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span> runat<span class="token operator">=</span><span class="token string">"server"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"file"</span> id<span class="token operator">=</span><span class="token string">"txtFile"</span> name<span class="token operator">=</span><span class="token string">"picfile"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"上传"</span>/<span class="token operator">></span>       <span class="token operator">&lt;</span>asp:Button ID<span class="token operator">=</span><span class="token string">"btnDowloand"</span> runat<span class="token operator">=</span><span class="token string">"server"</span> Text<span class="token operator">=</span><span class="token string">"下载"</span>             onclick<span class="token operator">=</span><span class="token string">"btnDowloand_Click"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/form<span class="token operator">></span>  cs代码：namespace 上传与下载<span class="token punctuation">{</span>    public partial class index <span class="token keyword">:</span> System.Web.UI.Page    <span class="token punctuation">{</span>        protected void Page_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IsPostBack<span class="token punctuation">)</span> <span class="token punctuation">{</span>                string directoryPath <span class="token operator">=</span> Server.MapPath<span class="token punctuation">(</span>@<span class="token string">"~/images"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                string path <span class="token operator">=</span> directoryPath + <span class="token string">"\\13.jpg"</span><span class="token punctuation">;</span>                Request.Files<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.SaveAs<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                Response.Write<span class="token punctuation">(</span><span class="token string">"上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        //下载        protected void btnDowloand_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string path <span class="token operator">=</span> Server.MapPath<span class="token punctuation">(</span>@<span class="token string">"~/images/13.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string fileName<span class="token operator">=</span>Path.GetFileName<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            Response.AddHeader<span class="token punctuation">(</span><span class="token string">"content-Disposition"</span>, string.Format<span class="token punctuation">(</span><span class="token string">"attachment;filename=\"{0}\""</span>,path<span class="token punctuation">))</span><span class="token punctuation">;</span>            Response.WriteFile<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            Response.End<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="asp-net-一般处理器"><a href="#asp-net-一般处理器" class="headerlink" title="asp.net 一般处理器"></a>asp.net 一般处理器</h2><pre class=" language-bash"><code class="language-bash">    <span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"form1"</span> runat<span class="token operator">=</span><span class="token string">"server"</span> method<span class="token operator">=</span><span class="token string">"post"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span> action<span class="token operator">=</span><span class="token string">"upLoadHandler.ashx"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>       上传： <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"FileUpload"</span> type<span class="token operator">=</span><span class="token string">"file"</span> name<span class="token operator">=</span><span class="token string">"upload"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"SubmitUpload"</span> type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"上传"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"DownLoadHandler.ashx"</span><span class="token operator">></span>下载<span class="token operator">&lt;</span>/a<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/form<span class="token operator">></span>upLoadHandler.ashx：    <span class="token operator">&lt;</span>%@ WebHandler Language<span class="token operator">=</span><span class="token string">"C#"</span> Class<span class="token operator">=</span><span class="token string">"upLoadHandler"</span> %<span class="token operator">></span>using System<span class="token punctuation">;</span>using System.Web<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>public class upLoadHandler <span class="token keyword">:</span> IHttpHandler <span class="token punctuation">{</span>    public void ProcessRequest <span class="token punctuation">(</span>HttpContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>   HttpPostedFile file<span class="token operator">=</span>  context.Request.Files<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>   string fileName <span class="token operator">=</span> Path.GetFileName<span class="token punctuation">(</span>file.FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>   var filepostfix <span class="token operator">=</span> fileName.Split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>filepostfix.Equals<span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">)</span> <span class="token operator">||</span> filepostfix.Equals<span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">))</span>   <span class="token punctuation">{</span>   //直接上传图片       file.SaveAs<span class="token punctuation">(</span>context.Server.MapPath<span class="token punctuation">(</span>@<span class="token string">"~\upLaodFile\" +Guid.NewGuid().ToString()+ fileName));       //上传缩略图       //CreateImageOutput(80, 80, file);       context.Response.Write("</span>上传成功<span class="token string">");   }   else    {       context.Response.Write("</span>只能上传图片格式"<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public bool IsReusable <span class="token punctuation">{</span>        get <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向接口编程框架</title>
      <link href="/2019/01/17/mian-xiang-jie-kou-bian-cheng-kuang-jia/"/>
      <url>/2019/01/17/mian-xiang-jie-kou-bian-cheng-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h2 id="面向接口编程框架"><a href="#面向接口编程框架" class="headerlink" title="面向接口编程框架"></a>面向接口编程框架</h2><p>框架：MVC+EF模型+面向接口式三层架构+工厂模式，UnitWork模式，使用了t4模板，框架用于分享 <br><br>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p><h2 id="前台代码展示"><a href="#前台代码展示" class="headerlink" title="前台代码展示"></a>前台代码展示</h2><pre class=" language-bash"><code class="language-bash">  public class LoginController <span class="token keyword">:</span> Controller    <span class="token punctuation">{</span>        public IUserInfoService UserInfoService <span class="token operator">=</span> new UserInfoService<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        public ActionResult LogOn<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">return</span> View<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region 创建验证码</span>        public ActionResult GetValidateCode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ValidateCode vCode <span class="token operator">=</span> new ValidateCode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string code <span class="token operator">=</span> vCode.CreateValidateCode<span class="token punctuation">(</span>4<span class="token punctuation">)</span><span class="token punctuation">;</span>//获取随机的数字            Session<span class="token punctuation">[</span><span class="token string">"ValidateCode"</span><span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">;</span>////把验证码防到  session            byte<span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> vCode.CreateValidateGraphic<span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> File<span class="token punctuation">(</span>bytes, @<span class="token string">"image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>        <span class="token comment" spellcheck="true">#region 用户名/验证码校验</span>        public ActionResult ProcessUserLogin<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //校验用户验证码            //var code <span class="token operator">=</span> Request<span class="token punctuation">[</span><span class="token string">"ValidateCode"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            //if <span class="token punctuation">(</span>Session<span class="token punctuation">[</span><span class="token string">"ValidateCode"</span><span class="token punctuation">]</span> <span class="token operator">==</span> null <span class="token operator">||</span> code <span class="token operator">!=</span> Session<span class="token punctuation">[</span><span class="token string">"ValidateCode"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span>            //<span class="token punctuation">{</span>            //    <span class="token keyword">return</span> Content<span class="token punctuation">(</span><span class="token string">"验证码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //<span class="token punctuation">}</span>            //校验用户名密码是否匹配            string userName <span class="token operator">=</span> Request<span class="token punctuation">[</span><span class="token string">"UserName"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            string userPwd <span class="token operator">=</span> Request<span class="token punctuation">[</span><span class="token string">"UserPwd"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            var currentUser <span class="token operator">=</span> UserInfoService.LoadEntities<span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u.UserName <span class="token operator">==</span> userName <span class="token operator">&amp;&amp;</span> u.UPwd <span class="token operator">==</span> userPwd<span class="token punctuation">)</span>.FirstOrDefault<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> Content<span class="token punctuation">(</span><span class="token string">"用户名错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            //将用户放到session            Session<span class="token punctuation">[</span><span class="token string">"UserInfo"</span><span class="token punctuation">]</span> <span class="token operator">=</span> currentUser<span class="token punctuation">;</span>            <span class="token keyword">return</span> Content<span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>    <span class="token punctuation">}</span></code></pre><h2 id="IDAL"><a href="#IDAL" class="headerlink" title="IDAL"></a>IDAL</h2><h3 id="IBaseRepository-cs"><a href="#IBaseRepository-cs" class="headerlink" title="IBaseRepository.cs"></a>IBaseRepository.cs</h3><pre class=" language-bash"><code class="language-bash">    public  interface IBaseRepository<span class="token operator">&lt;</span>T<span class="token operator">></span> where T:class,new<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        IQueryable<span class="token operator">&lt;</span>T<span class="token operator">></span> LoadEntities<span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>T, bool<span class="token operator">></span> whereLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>        IQueryable<span class="token operator">&lt;</span>T<span class="token operator">></span> LoadPageEntities<span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token punctuation">(</span>int pageSize, int pageIndex, out int total, Func<span class="token operator">&lt;</span>T, bool<span class="token operator">></span> whereLambda, Func<span class="token operator">&lt;</span>T, S<span class="token operator">></span> orderByLambda, bool isAsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        T AddEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        bool UpdateEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        bool DeleteEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="IDbSession-tt"><a href="#IDbSession-tt" class="headerlink" title="IDbSession.tt"></a>IDbSession.tt</h3><pre class=" language-bash"><code class="language-bash">    public partial interface IDbSession    <span class="token punctuation">{</span>        IActionGroupRepository ActionGroupRepository<span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        IActionInfoRepository ActionInfoRepository<span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        IDepartmentRepository DepartmentRepository<span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        IProductRepository ProductRepository<span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        IR_UserInfo_AcitonInfoRepository R_UserInfo_AcitonInfoRepository<span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        IRoleRepository RoleRepository<span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        IUserInfoRepository UserInfoRepository<span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    </code></pre><h3 id="IDbSession-cs"><a href="#IDbSession-cs" class="headerlink" title="IDbSession.cs"></a>IDbSession.cs</h3><p>上面和下面是2个部分类，也可以写到一个文件里</p><pre class=" language-bash"><code class="language-bash"> public partial  interface IDbSession    <span class="token punctuation">{</span>        //IUserInfoRepository UserInfoRepository <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        //IProductRepository ProductRepository <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        int ExcuteSql<span class="token punctuation">(</span>string sql, params ObjectParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 将整个数据库访问层的所有的修改都一次性的提交回数据库        /// 业务逻辑层：一个业务场景，肯定会对多个表做修改，和对多表进行处理，        /// 有此方法的存在，能极大的提高数据库访问层批量提交sql的性能，提高数据库的吞吐率，减少          了跟数据库的交互次数        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        int SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//UnitWork模式    <span class="token punctuation">}</span></code></pre><h3 id="Reposiotroy-cs"><a href="#Reposiotroy-cs" class="headerlink" title="Reposiotroy.cs"></a>Reposiotroy.cs</h3><pre class=" language-bash"><code class="language-bash">public partial interface IActionGroupRepository :IBaseRepository<span class="token operator">&lt;</span>ActionGroup<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial interface IActionInfoRepository :IBaseRepository<span class="token operator">&lt;</span>ActionInfo<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial interface IDepartmentRepository :IBaseRepository<span class="token operator">&lt;</span>Department<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial interface IProductRepository :IBaseRepository<span class="token operator">&lt;</span>Product<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial interface IR_UserInfo_AcitonInfoRepository :IBaseRepository<span class="token operator">&lt;</span>R_UserInfo_AcitonInfo<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial interface IRoleRepository :IBaseRepository<span class="token operator">&lt;</span>Role<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial interface IUserInfoRepository :IBaseRepository<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="IUserInfoRepository-cs"><a href="#IUserInfoRepository-cs" class="headerlink" title="IUserInfoRepository.cs"></a>IUserInfoRepository.cs</h3><pre class=" language-bash"><code class="language-bash"> public partial interface IUserInfoRepository:IBaseRepository<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h2 id="IBLL"><a href="#IBLL" class="headerlink" title="IBLL"></a>IBLL</h2><h3 id="IServices-tt-生成类"><a href="#IServices-tt-生成类" class="headerlink" title="IServices.tt 生成类"></a>IServices.tt 生成类</h3><pre class=" language-bash"><code class="language-bash">    public partial interface IActionGroupService <span class="token keyword">:</span> IBaseService<span class="token operator">&lt;</span>ActionGroup<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>       public partial interface IActionInfoService <span class="token keyword">:</span> IBaseService<span class="token operator">&lt;</span>ActionInfo<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>       public partial interface IDepartmentService <span class="token keyword">:</span> IBaseService<span class="token operator">&lt;</span>Department<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>       public partial interface IProductService <span class="token keyword">:</span> IBaseService<span class="token operator">&lt;</span>Product<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>       public partial interface IR_UserInfo_AcitonInfoService <span class="token keyword">:</span> IBaseService<span class="token operator">&lt;</span>R_UserInfo_AcitonInfo<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>       public partial interface IRoleService <span class="token keyword">:</span> IBaseService<span class="token operator">&lt;</span>Role<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>       public partial interface IUserInfoService <span class="token keyword">:</span> IBaseService<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>   </code></pre><h3 id="IBaseService-cs"><a href="#IBaseService-cs" class="headerlink" title="IBaseService.cs"></a>IBaseService.cs</h3><pre class=" language-bash"><code class="language-bash"> public interface IBaseService<span class="token operator">&lt;</span>T<span class="token operator">></span> where T:class,new <span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        IDbSession DbSession <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>        IBaseRepository<span class="token operator">&lt;</span>T<span class="token operator">></span> CurrentReposiotry <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        IQueryable<span class="token operator">&lt;</span>T<span class="token operator">></span> LoadEntities<span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>T, bool<span class="token operator">></span> whereLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>        IQueryable<span class="token operator">&lt;</span>T<span class="token operator">></span> LoadPageEntities<span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token punctuation">(</span>int pageSize, int pageIndex, out int total, Func<span class="token operator">&lt;</span>T, bool<span class="token operator">></span> whereLambda, Func<span class="token operator">&lt;</span>T, S<span class="token operator">></span> orderByLambda, bool isAsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        T AddEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        bool UpdateEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        bool DeleteEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><h3 id="IUserInfoService-cs"><a href="#IUserInfoService-cs" class="headerlink" title="IUserInfoService.cs"></a>IUserInfoService.cs</h3><pre class=" language-bash"><code class="language-bash">    public partial interface IUserInfoService <span class="token keyword">:</span> IBaseService<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span>    <span class="token punctuation">{</span>       IQueryable<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span> LoadUsers<span class="token punctuation">(</span>Model.UserInfoSearchParam param<span class="token punctuation">)</span><span class="token punctuation">;</span>       int DeleteUsers<span class="token punctuation">(</span>List<span class="token operator">&lt;</span>int<span class="token operator">></span> listIds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="DAL"><a href="#DAL" class="headerlink" title="DAL"></a>DAL</h2><h3 id="DbSession-tt-生成类"><a href="#DbSession-tt-生成类" class="headerlink" title="DbSession.tt 生成类"></a>DbSession.tt 生成类</h3><pre class=" language-bash"><code class="language-bash">public partial class DbSession :IDbSession    <span class="token punctuation">{</span>        private IActionGroupRepository _ActionGroupRepository<span class="token punctuation">;</span>        public IActionGroupRepository ActionGroupRepository        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                if<span class="token punctuation">(</span>_ActionGroupRepository <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    _ActionGroupRepository <span class="token operator">=</span> new ActionGroupRepository<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _ActionGroupRepository<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _ActionGroupRepository <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private IActionInfoRepository _ActionInfoRepository<span class="token punctuation">;</span>        public IActionInfoRepository ActionInfoRepository        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                if<span class="token punctuation">(</span>_ActionInfoRepository <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    _ActionInfoRepository <span class="token operator">=</span> new ActionInfoRepository<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _ActionInfoRepository<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _ActionInfoRepository <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private IDepartmentRepository _DepartmentRepository<span class="token punctuation">;</span>        public IDepartmentRepository DepartmentRepository        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                if<span class="token punctuation">(</span>_DepartmentRepository <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    _DepartmentRepository <span class="token operator">=</span> new DepartmentRepository<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _DepartmentRepository<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _DepartmentRepository <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private IProductRepository _ProductRepository<span class="token punctuation">;</span>        public IProductRepository ProductRepository        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                if<span class="token punctuation">(</span>_ProductRepository <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    _ProductRepository <span class="token operator">=</span> new ProductRepository<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _ProductRepository<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _ProductRepository <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private IR_UserInfo_AcitonInfoRepository _R_UserInfo_AcitonInfoRepository<span class="token punctuation">;</span>        public IR_UserInfo_AcitonInfoRepository R_UserInfo_AcitonInfoRepository        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                if<span class="token punctuation">(</span>_R_UserInfo_AcitonInfoRepository <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    _R_UserInfo_AcitonInfoRepository <span class="token operator">=</span> new R_UserInfo_AcitonInfoRepository<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _R_UserInfo_AcitonInfoRepository<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _R_UserInfo_AcitonInfoRepository <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private IRoleRepository _RoleRepository<span class="token punctuation">;</span>        public IRoleRepository RoleRepository        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                if<span class="token punctuation">(</span>_RoleRepository <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    _RoleRepository <span class="token operator">=</span> new RoleRepository<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _RoleRepository<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _RoleRepository <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private IUserInfoRepository _UserInfoRepository<span class="token punctuation">;</span>        public IUserInfoRepository UserInfoRepository        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                if<span class="token punctuation">(</span>_UserInfoRepository <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    _UserInfoRepository <span class="token operator">=</span> new UserInfoRepository<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> _UserInfoRepository<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _UserInfoRepository <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    </code></pre><h3 id="DbSession-cs"><a href="#DbSession-cs" class="headerlink" title="DbSession.cs"></a>DbSession.cs</h3><pre class=" language-bash"><code class="language-bash"> public partial class DbSession:IDbSession    <span class="token punctuation">{</span>        //public ObjectContext DbContext <span class="token operator">=</span> new HeimaShopDBEntities<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//EF上下文实例怎么进行管理:保证线程内唯一       public ObjectContext DbContext <span class="token operator">=</span> DbContentFactory.GetCurrentDbContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        public int ExcuteSql<span class="token punctuation">(</span>string sql, params ObjectParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> Parameters<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> DbContext.ExecuteFunction<span class="token punctuation">(</span>sql, Parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public int SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span>//可以写一个批量保存，最后保存下，别的DAL层可以不写保存,把DAL的SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span>提高倒也BLL层        <span class="token punctuation">{</span>            <span class="token keyword">return</span> DbContext.SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="BaseRepository-cs"><a href="#BaseRepository-cs" class="headerlink" title="BaseRepository.cs"></a>BaseRepository.cs</h3><pre class=" language-bash"><code class="language-bash">public  class BaseRepository<span class="token operator">&lt;</span>T<span class="token operator">></span> where T:class    <span class="token punctuation">{</span>        //public HeimaShopDBEntities db <span class="token operator">=</span> new HeimaShopDBEntities<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         public ObjectContext db <span class="token operator">=</span> DbContentFactory.GetCurrentDbContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 查询        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"whereLambda"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public IQueryable<span class="token operator">&lt;</span>T<span class="token operator">></span> LoadEntities<span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>T, bool<span class="token operator">></span> whereLambda<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> db.CreateObjectSet<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>.Where<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span>.AsQueryable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 分页        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public IQueryable<span class="token operator">&lt;</span>T<span class="token operator">></span> LoadPageEntities<span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token punctuation">(</span>int pageSize, int pageIndex, out int total, Func<span class="token operator">&lt;</span>T, bool<span class="token operator">></span> whereLambda, Func<span class="token operator">&lt;</span>T, S<span class="token operator">></span> orderByLambda, bool isAsc<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            var temp <span class="token operator">=</span> db.CreateObjectSet<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>.Where<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>            total <span class="token operator">=</span> temp.Count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isAsc<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp.OrderBy<span class="token operator">&lt;</span>T, S<span class="token operator">></span><span class="token punctuation">(</span>orderByLambda<span class="token punctuation">)</span>.Skip<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">((</span>pageIndex - 1<span class="token punctuation">)</span> * pageSize<span class="token punctuation">)</span>.                    Take<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp.OrderByDescending<span class="token punctuation">(</span>orderByLambda<span class="token punctuation">)</span>.Skip<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">((</span>pageIndex - 1<span class="token punctuation">)</span> * pageSize<span class="token punctuation">)</span>.Take<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> temp.AsQueryable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 添加        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public T AddEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            db.CreateObjectSet<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>.AddObject<span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            //db.SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> entity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 删        /// <span class="token operator">&lt;</span>/summary        public bool DeleteEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            db.CreateObjectSet<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>.Attach<span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            db.ObjectStateManager.ChangeObjectState<span class="token punctuation">(</span>entity, System.Data.EntityState.Deleted<span class="token punctuation">)</span><span class="token punctuation">;</span>            //return db.SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> 0<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 更新        /// <span class="token operator">&lt;</span>/summary        public bool UpdateEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            db.CreateObjectSet<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>.Attach<span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            db.ObjectStateManager.ChangeObjectState<span class="token punctuation">(</span>entity, System.Data.EntityState.Modified<span class="token punctuation">)</span><span class="token punctuation">;</span>            //db.SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="DbContentFactory-cs"><a href="#DbContentFactory-cs" class="headerlink" title="DbContentFactory.cs"></a>DbContentFactory.cs</h3><pre class=" language-bash"><code class="language-bash"> /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>    /// 实现对EF上下文实例进行管理，保证线程内唯一    /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>   public  class DbContentFactory    <span class="token punctuation">{</span>        //CallContext 是类似于方法调用的线程本地存储区的专用集合对象，并提供对每个逻辑执行线程都唯一的数据槽。 数据槽不在其他逻辑线程上的调用上下文之间共享。 当 CallContext 沿执行代码路径往返传播并且由该路径中的各个对象检查时，可将对象添加到其中。       public static ObjectContext GetCurrentDbContext<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">{</span>           ObjectContext context <span class="token operator">=</span> <span class="token punctuation">(</span>ObjectContext<span class="token punctuation">)</span>CallContext.GetData<span class="token punctuation">(</span><span class="token string">"DbContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> null<span class="token punctuation">)</span>           <span class="token punctuation">{</span>               context <span class="token operator">=</span> new HeimaShopDBEntities<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               CallContext.SetData<span class="token punctuation">(</span><span class="token string">"DbContext"</span>, context<span class="token punctuation">)</span><span class="token punctuation">;</span>//要存储在调用上下文中的对象,1名字，2对象           <span class="token punctuation">}</span>           <span class="token keyword">return</span> context<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="DbSessionFactory-cs"><a href="#DbSessionFactory-cs" class="headerlink" title="DbSessionFactory.cs"></a>DbSessionFactory.cs</h3><pre class=" language-bash"><code class="language-bash">public class DbSessionFactory    <span class="token punctuation">{</span>       /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>       /// 保证DbSession的实例是线程内唯一的       /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>       /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>       public static IDbSession GetCurrentDbSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        //从线程内数据槽获取数据，保证线程内数据不被其它线程所访问到           IDbSession dbSession <span class="token operator">=</span> <span class="token punctuation">(</span>IDbSession<span class="token punctuation">)</span>CallContext.GetData<span class="token punctuation">(</span><span class="token string">"DbSession"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>dbSession <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>               dbSession <span class="token operator">=</span> new DbSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               CallContext.SetData<span class="token punctuation">(</span><span class="token string">"DbSession"</span>, dbSession<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">return</span> dbSession<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="Repository-tt生成的cs"><a href="#Repository-tt生成的cs" class="headerlink" title="Repository.tt生成的cs"></a>Repository.tt生成的cs</h3><pre class=" language-bash"><code class="language-bash">public partial class ActionGroupRepository :BaseRepository<span class="token operator">&lt;</span>ActionGroup<span class="token operator">></span>,IActionGroupRepository    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial class ActionInfoRepository :BaseRepository<span class="token operator">&lt;</span>ActionInfo<span class="token operator">></span>,IActionInfoRepository    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial class DepartmentRepository :BaseRepository<span class="token operator">&lt;</span>Department<span class="token operator">></span>,IDepartmentRepository    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial class ProductRepository :BaseRepository<span class="token operator">&lt;</span>Product<span class="token operator">></span>,IProductRepository    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial class R_UserInfo_AcitonInfoRepository :BaseRepository<span class="token operator">&lt;</span>R_UserInfo_AcitonInfo<span class="token operator">></span>,IR_UserInfo_AcitonInfoRepository    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial class RoleRepository :BaseRepository<span class="token operator">&lt;</span>Role<span class="token operator">></span>,IRoleRepository    <span class="token punctuation">{</span><span class="token punctuation">}</span>    public partial class UserInfoRepository :BaseRepository<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span>,IUserInfoRepository    <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="UserInfoRepository-cs"><a href="#UserInfoRepository-cs" class="headerlink" title="UserInfoRepository.cs"></a>UserInfoRepository.cs</h3><pre class=" language-bash"><code class="language-bash">  public partial class UserInfoRepository <span class="token keyword">:</span> BaseRepository<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span>, IUserInfoRepository    <span class="token punctuation">{</span>    <span class="token punctuation">}</span></code></pre><h2 id="BLL"><a href="#BLL" class="headerlink" title="BLL"></a>BLL</h2><h3 id="IServices-tt"><a href="#IServices-tt" class="headerlink" title="IServices.tt"></a>IServices.tt</h3><pre class=" language-bash"><code class="language-bash">    public partial class ActionGroupService :BaseService<span class="token operator">&lt;</span>ActionGroup<span class="token operator">></span>,IActionGroupService    <span class="token punctuation">{</span>        public override void SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CurrentReposiotry <span class="token operator">=</span> this.DbSession.ActionGroupRepository<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       public partial class ActionInfoService :BaseService<span class="token operator">&lt;</span>ActionInfo<span class="token operator">></span>,IActionInfoService    <span class="token punctuation">{</span>        public override void SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CurrentReposiotry <span class="token operator">=</span> this.DbSession.ActionInfoRepository<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       public partial class DepartmentService :BaseService<span class="token operator">&lt;</span>Department<span class="token operator">></span>,IDepartmentService    <span class="token punctuation">{</span>        public override void SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CurrentReposiotry <span class="token operator">=</span> this.DbSession.DepartmentRepository<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       public partial class ProductService :BaseService<span class="token operator">&lt;</span>Product<span class="token operator">></span>,IProductService    <span class="token punctuation">{</span>        public override void SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CurrentReposiotry <span class="token operator">=</span> this.DbSession.ProductRepository<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       public partial class R_UserInfo_AcitonInfoService :BaseService<span class="token operator">&lt;</span>R_UserInfo_AcitonInfo<span class="token operator">></span>,IR_UserInfo_AcitonInfoService    <span class="token punctuation">{</span>        public override void SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CurrentReposiotry <span class="token operator">=</span> this.DbSession.R_UserInfo_AcitonInfoRepository<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       public partial class RoleService :BaseService<span class="token operator">&lt;</span>Role<span class="token operator">></span>,IRoleService    <span class="token punctuation">{</span>        public override void SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CurrentReposiotry <span class="token operator">=</span> this.DbSession.RoleRepository<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>       public partial class UserInfoService :BaseService<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span>,IUserInfoService    <span class="token punctuation">{</span>        public override void SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CurrentReposiotry <span class="token operator">=</span> this.DbSession.UserInfoRepository<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="BaseService-cs"><a href="#BaseService-cs" class="headerlink" title="BaseService.cs"></a>BaseService.cs</h3><pre class=" language-bash"><code class="language-bash">public abstract class BaseService<span class="token operator">&lt;</span>T<span class="token operator">></span> where T:class,new<span class="token punctuation">(</span><span class="token punctuation">)</span> //构造函数    <span class="token punctuation">{</span>        public IDbSession DbSession         <span class="token punctuation">{</span>            get <span class="token punctuation">{</span> <span class="token keyword">return</span> DbSessionFactory.GetCurrentDbSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 基类中直接调用此抽象方法，那么必须在子类中实现        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public BaseService<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 当前仓储        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public IBaseRepository<span class="token operator">&lt;</span>T<span class="token operator">></span> CurrentReposiotry        <span class="token punctuation">{</span>            get<span class="token punctuation">;</span>            <span class="token keyword">set</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 设置下当前的仓储        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public abstract void SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //最基本的crud方法        public virtual IQueryable<span class="token operator">&lt;</span>T<span class="token operator">></span> LoadEntities<span class="token punctuation">(</span>Func<span class="token operator">&lt;</span>T, bool<span class="token operator">></span> whereLambda<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //调用数据库访问层来实现  过滤查询            //这个地方我们不知当前仓储是谁。那么就调用 当前仓储的属性            <span class="token keyword">return</span> CurrentReposiotry.LoadEntities<span class="token punctuation">(</span>whereLambda<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 分页        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public IQueryable<span class="token operator">&lt;</span>T<span class="token operator">></span> LoadPageEntities<span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token punctuation">(</span>int pageSize, int pageIndex, out int total, Func<span class="token operator">&lt;</span>T, bool<span class="token operator">></span> whereLambda, Func<span class="token operator">&lt;</span>T, S<span class="token operator">></span> orderByLambda, bool isAsc<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> CurrentReposiotry.LoadPageEntities<span class="token operator">&lt;</span>S<span class="token operator">></span><span class="token punctuation">(</span>pageSize, pageIndex, out total, whereLambda, orderByLambda, isAsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 添加        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public T AddEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            CurrentReposiotry.AddEntity<span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            DbSession.SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> entity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 删除        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public bool DeleteEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //return CurrentReposiotry.DeleteEntity<span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            CurrentReposiotry.DeleteEntity<span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> DbSession.SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> 0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 修改        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public bool UpdateEntity<span class="token punctuation">(</span>T entity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //return CurrentReposiotry.UpdateEntity<span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            CurrentReposiotry.UpdateEntity<span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> DbSession.SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> 0<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="UserInfoService-cs"><a href="#UserInfoService-cs" class="headerlink" title="UserInfoService.cs"></a>UserInfoService.cs</h3><pre class=" language-bash"><code class="language-bash">  public partial class UserInfoService <span class="token keyword">:</span> BaseService<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span>,IUserInfoService    <span class="token punctuation">{</span>       // public override void SetCurrentReposiotry<span class="token punctuation">(</span><span class="token punctuation">)</span>       //<span class="token punctuation">{</span>       //    CurrentReposiotry <span class="token operator">=</span> this.DbSession.UserInfoRepository<span class="token punctuation">;</span>       //<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region 多条件查询</span>        public IQueryable<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span> LoadUsers<span class="token punctuation">(</span>UserInfoSearchParam param<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //先过滤，在分页            var temp <span class="token operator">=</span> DbSession.UserInfoRepository.LoadEntities<span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> true<span class="token punctuation">)</span><span class="token punctuation">;</span>//会延迟加载            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>string.IsNullOrEmpty<span class="token punctuation">(</span>param.Email<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp.Where<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u.Email.Contains<span class="token punctuation">(</span>param.Email<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>string.IsNullOrEmpty<span class="token punctuation">(</span>param.UserName<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> temp.Where<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span><span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u.UserName.Contains<span class="token punctuation">(</span>param.UserName<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            param.Total <span class="token operator">=</span> temp.Count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> temp.OrderByDescending<span class="token punctuation">(</span>u <span class="token operator">=</span><span class="token operator">></span> u.ID<span class="token punctuation">)</span>.Skip<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span><span class="token punctuation">((</span>param.PageIndex - 1<span class="token punctuation">)</span> * param.PageSize<span class="token punctuation">)</span>.Take<span class="token operator">&lt;</span>UserInfo<span class="token operator">></span><span class="token punctuation">(</span>param.PageSize<span class="token punctuation">)</span>.AsQueryable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>        <span class="token comment" spellcheck="true">#region 批量删除</span>        public int DeleteUsers<span class="token punctuation">(</span>List<span class="token operator">&lt;</span>int<span class="token operator">></span> listIds<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            var Users <span class="token operator">=</span> DbSession.UserInfoRepository.LoadEntities<span class="token punctuation">(</span>a <span class="token operator">=</span><span class="token operator">></span> listIds.Contains<span class="token punctuation">(</span>a.ID<span class="token punctuation">))</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>var user <span class="token keyword">in</span> Users<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                DbSession.UserInfoRepository.DeleteEntity<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> DbSession.SaveChanges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数</title>
      <link href="/2019/01/16/gou-zao-han-shu/"/>
      <url>/2019/01/16/gou-zao-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数主要是用来创建对象时为对象赋初值来初始化对象。总与new运算符一起使用在创建对象的语句中 。A a=new A();</p><p>构造函数具有和类一样的名称；但它是一个函数具有函数的所有特性，同一个类里面可以有多个参数不同的构造函数，也就是函数的多态。</p><p>构造函数是在实例化类时最先执行的方法，通过这个特性可以给对象赋初值。</p><p>构造函数没有返回值，也不能用void修饰，只有访问修饰符。</p><p>每个类中都会一个构造函数，如果用户定义的类中没有显式的定义任何构造函数，编译器就会自动为该类型生成默认构造函数，类里面没有构造函数也可以，系统会为你自动创建无参构造函数。</p><h2 id="构造函数代码练习"><a href="#构造函数代码练习" class="headerlink" title="构造函数代码练习"></a>构造函数代码练习</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>namespace 构造函数<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            person person <span class="token operator">=</span> new person<span class="token punctuation">(</span><span class="token string">"xx"</span>, 18, <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span>person.name+person.age+person.sex<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    class warface<span class="token punctuation">{</span>        public warface<span class="token punctuation">(</span>string name,int age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            this.name <span class="token operator">=</span> name<span class="token punctuation">;</span>            this.age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public string name<span class="token punctuation">;</span>         public int age<span class="token punctuation">;</span>        public string sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>//    构造函数不能被继承，//子类中的构造函数会默认调用父类无参数的构造函数//不修改父类，而是在子类的构造函数后面通过base<span class="token punctuation">(</span><span class="token punctuation">)</span>，调用父类的构造函数//:base<span class="token punctuation">(</span><span class="token string">"xx"</span>,<span class="token string">"11"</span><span class="token punctuation">)</span>调用父类构造函数    class person <span class="token keyword">:</span> warface <span class="token punctuation">{</span>        public person<span class="token punctuation">(</span>string name,int age,string sex<span class="token punctuation">)</span>:base<span class="token punctuation">(</span>name,age<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            this.sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="this调用自己的构造函数"><a href="#this调用自己的构造函数" class="headerlink" title="this调用自己的构造函数"></a>this调用自己的构造函数</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>namespace this调用自己的构造函数<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public class Person     <span class="token punctuation">{</span>        public Person<span class="token punctuation">(</span>string name, int age, string email, double salary<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            this.Name <span class="token operator">=</span> name<span class="token punctuation">;</span>            this.Age <span class="token operator">=</span> age<span class="token punctuation">;</span>            this.Email <span class="token operator">=</span> email<span class="token punctuation">;</span>            this.Salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //this作用1：在当前类的构造函数后面通过:this来调用当前类自己的其他构造函数。        public Person<span class="token punctuation">(</span>string name<span class="token punctuation">)</span>            <span class="token keyword">:</span> this<span class="token punctuation">(</span>name, 0, null, 0<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            // this.Name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public Person<span class="token punctuation">(</span>string name, int age<span class="token punctuation">)</span>            <span class="token keyword">:</span> this<span class="token punctuation">(</span>name, age, null, 0<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //this.Name <span class="token operator">=</span> name<span class="token punctuation">;</span>            //this.Age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public Person<span class="token punctuation">(</span>string name, string email<span class="token punctuation">)</span>            <span class="token keyword">:</span> this<span class="token punctuation">(</span>name, 0, email, 0<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //this.Name <span class="token operator">=</span> name<span class="token punctuation">;</span>            //this.Email <span class="token operator">=</span> email<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public string Name        <span class="token punctuation">{</span>            get<span class="token punctuation">;</span>            <span class="token keyword">set</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public int Age        <span class="token punctuation">{</span>            get<span class="token punctuation">;</span>            <span class="token keyword">set</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public string Email        <span class="token punctuation">{</span>            get<span class="token punctuation">;</span>            <span class="token keyword">set</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public double Salary        <span class="token punctuation">{</span>            get<span class="token punctuation">;</span>            <span class="token keyword">set</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json处理</title>
      <link href="/2019/01/16/json-chu-li/"/>
      <url>/2019/01/16/json-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="json常见转换函数"><a href="#json常见转换函数" class="headerlink" title="json常见转换函数"></a>json常见转换函数</h2><p>从一个字符串中解析出json对象 ： JSON.parse() <br><br>从一个对象中解析出字符串 : JSON.stringify(data) <br><br>常见的还有：eval(“(“+A+”)”); 也可以把 一个字符串中解析出json对象</p><h2 id="json-统计汇总"><a href="#json-统计汇总" class="headerlink" title="json 统计汇总"></a>json 统计汇总</h2><pre class=" language-bash"><code class="language-bash"> 原json data  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"A"</span>, <span class="token string">"orderAmt"</span><span class="token keyword">:</span> 100, <span class="token string">"Qty"</span><span class="token keyword">:</span> 1<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"A"</span>, <span class="token string">"orderAmt"</span><span class="token keyword">:</span> 200, <span class="token string">"Qty"</span><span class="token keyword">:</span> 3<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"B"</span>, <span class="token string">"orderAmt"</span><span class="token keyword">:</span> 400, <span class="token string">"Qty"</span><span class="token keyword">:</span> 5<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"B"</span>, <span class="token string">"orderAmt"</span><span class="token keyword">:</span> 200, <span class="token string">"Qty"</span><span class="token keyword">:</span> 5<span class="token punctuation">}</span>,<span class="token punctuation">]</span><span class="token punctuation">;</span>根据 companyName进行分组统计，相同公司名的 orderAmt和Qty相加，希望得到以下结果，如何操作。 data1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"A"</span>, <span class="token string">"orderAmt"</span><span class="token keyword">:</span> 300, <span class="token string">"Qty"</span><span class="token keyword">:</span> 4<span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"B"</span>, <span class="token string">"orderAmt"</span><span class="token keyword">:</span> 600, <span class="token string">"Qty"</span><span class="token keyword">:</span> 10<span class="token punctuation">}</span>,<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>解决：</p><pre class=" language-bash"><code class="language-bash">var data  <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"A"</span>,<span class="token string">"orderAmt"</span><span class="token keyword">:</span> 100, <span class="token string">"Qty"</span><span class="token keyword">:</span> 1<span class="token punctuation">}</span>,  <span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"A"</span>,<span class="token string">"orderAmt"</span><span class="token keyword">:</span> 200, <span class="token string">"Qty"</span><span class="token keyword">:</span> 3<span class="token punctuation">}</span>,  <span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"B"</span>,<span class="token string">"orderAmt"</span><span class="token keyword">:</span> 400, <span class="token string">"Qty"</span><span class="token keyword">:</span> 5<span class="token punctuation">}</span>,  <span class="token punctuation">{</span><span class="token string">"companyName"</span><span class="token keyword">:</span> <span class="token string">"B"</span>,<span class="token string">"orderAmt"</span><span class="token keyword">:</span> 200, <span class="token string">"Qty"</span><span class="token keyword">:</span> 5<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>var map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>var res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>var i<span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data.length<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>  var name <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.companyName<span class="token punctuation">;</span>  if<span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>      companyName <span class="token keyword">:</span> name,      orderAmt <span class="token keyword">:</span> 0,      Qty <span class="token keyword">:</span> 0    <span class="token punctuation">}</span>    res.push<span class="token punctuation">(</span>map<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  for<span class="token punctuation">(</span>var p <span class="token keyword">in</span> map<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token string">'companyName'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      map<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span> +<span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console.log<span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单三层架构</title>
      <link href="/2019/01/16/jian-dan-san-ceng-jia-gou/"/>
      <url>/2019/01/16/jian-dan-san-ceng-jia-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="简单三层架构"><a href="#简单三层架构" class="headerlink" title="简单三层架构"></a>简单三层架构</h2><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><pre class=" language-bash"><code class="language-bash">namespace 三层架构<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btExecutescalar_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>//查询一个值        <span class="token punctuation">{</span>            <span class="token function">users</span> model <span class="token operator">=</span> new users<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            model.userid <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>            model.userpass <span class="token operator">=</span> 123456<span class="token punctuation">;</span>            PersonBLL person <span class="token operator">=</span> new PersonBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int ExecuteScalar<span class="token operator">=</span> person.selectNew<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"查询到的值为"</span>+ExecuteScalar.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnInsert_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>//添加数据        <span class="token punctuation">{</span>            <span class="token function">users</span> model <span class="token operator">=</span> new users<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            model.userid <span class="token operator">=</span> <span class="token string">"xiao"</span><span class="token punctuation">;</span>            model.userpass <span class="token operator">=</span> 1234567<span class="token punctuation">;</span>            PersonBLL person <span class="token operator">=</span> new PersonBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person.insert<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnDel_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>//删除数据        <span class="token punctuation">{</span>            PersonBLL person <span class="token operator">=</span> new PersonBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">users</span> model <span class="token operator">=</span> new users<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            model.userid <span class="token operator">=</span> <span class="token string">"xiaomi"</span><span class="token punctuation">;</span>            person.delete<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnUpdate_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>//更新        <span class="token punctuation">{</span>            PersonBLL person <span class="token operator">=</span> new PersonBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">users</span> model <span class="token operator">=</span> new users<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            model.userid <span class="token operator">=</span> <span class="token string">"zhouyong"</span><span class="token punctuation">;</span>            person.update<span class="token punctuation">(</span>2,model<span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"更新成功成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnSelect_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>//查询数据        <span class="token punctuation">{</span>            PersonBLL person <span class="token operator">=</span> new PersonBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">users</span> model <span class="token operator">=</span> new users<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            model<span class="token operator">=</span>person.get<span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"用户名"</span>+model.userid+<span class="token string">"密码"</span>+model.userpass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void Form1_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dgvselect.DataSource <span class="token operator">=</span> new PersonBLL<span class="token punctuation">(</span><span class="token punctuation">)</span>.GetAll<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //显示数据        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="DAL"><a href="#DAL" class="headerlink" title="DAL"></a>DAL</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using 三层架构.Model<span class="token punctuation">;</span>using System.Data.SqlClient<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>namespace 三层架构.DAL<span class="token punctuation">{</span>    class PersonDAL    <span class="token punctuation">{</span>        public int selectNew<span class="token punctuation">(</span>users model<span class="token punctuation">)</span>//查询单个数据        <span class="token punctuation">{</span>            object ExecuteScalar <span class="token operator">=</span> sqlHelper.ExecuteScalar<span class="token punctuation">(</span><span class="token string">"select userpass from username where userid=@id and userpass=@pwd"</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@id"</span>, model.userid<span class="token punctuation">)</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pwd"</span>, model.userpass<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Convert.ToInt32<span class="token punctuation">(</span>ExecuteScalar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public int insert<span class="token punctuation">(</span>users model<span class="token punctuation">)</span> //增加数据        <span class="token punctuation">{</span>         <span class="token keyword">return</span> sqlHelper.ExecNonQuery<span class="token punctuation">(</span><span class="token string">"insert into username(userid,userpass) values(@id,@pass)"</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@id"</span>, model.userid<span class="token punctuation">)</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pass"</span>, model.userpass<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public int delete<span class="token punctuation">(</span>users model<span class="token punctuation">)</span> //删除数据        <span class="token punctuation">{</span>          <span class="token keyword">return</span> sqlHelper.ExecNonQuery<span class="token punctuation">(</span><span class="token string">"delete from username where userid=@id"</span>,new SqlParameter<span class="token punctuation">(</span><span class="token string">"id"</span>,model.userid<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public int update<span class="token punctuation">(</span>int id,users model<span class="token punctuation">)</span> //更新数据        <span class="token punctuation">{</span>            <span class="token keyword">return</span> sqlHelper.ExecNonQuery<span class="token punctuation">(</span><span class="token string">"update username set userid =@userid where ID=@id"</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@userid"</span>,model.userid<span class="token punctuation">)</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@id"</span>,id<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public <span class="token function">users</span> get<span class="token punctuation">(</span>string id<span class="token punctuation">)</span> //查询数据        <span class="token punctuation">{</span>            DataTable dt <span class="token operator">=</span> sqlHelper.ExecuteDataTable<span class="token punctuation">(</span><span class="token string">"select * from username where userid=@id"</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@id"</span>, id<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dt.Rows.Count <span class="token operator">&lt;=</span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dt.Rows.Count <span class="token operator">>=</span> 1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">users</span> model <span class="token operator">=</span> new users<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                DataRow row <span class="token operator">=</span> dt.Rows<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>                model.userid <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">"userid"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                model.userpass <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"userpass"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> model<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                throw new Exception<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public IEnumerable<span class="token operator">&lt;</span>users<span class="token operator">></span> GetAll<span class="token punctuation">(</span><span class="token punctuation">)</span> //查询所有值用到了IEumerable接口        <span class="token punctuation">{</span>            DataTable dt <span class="token operator">=</span> sqlHelper.ExecuteDataTable<span class="token punctuation">(</span><span class="token string">"select * from username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>users<span class="token operator">></span> list<span class="token operator">=</span>new List<span class="token operator">&lt;</span>users<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>DataRow row <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token function">users</span> model <span class="token operator">=</span> new users<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                model.id <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                model.userid <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token string">"userid"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                model.userpass <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">"userpass"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list.Add<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="sqlHelper"><a href="#sqlHelper" class="headerlink" title="sqlHelper"></a>sqlHelper</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Configuration<span class="token punctuation">;</span>using System.Data.SqlClient<span class="token punctuation">;</span>namespace 三层架构.DAL<span class="token punctuation">{</span>    class sqlHelper    <span class="token punctuation">{</span>        private static string constr <span class="token operator">=</span> ConfigurationManager.ConnectionStrings<span class="token punctuation">[</span><span class="token string">"conStr"</span><span class="token punctuation">]</span>.ConnectionString<span class="token punctuation">;</span>        //封装方法的原则：把不变大的放到方法里，把变化的放参数中到        private static SqlConnection conn<span class="token punctuation">;</span> //连接        public static SqlConnection Conn        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> null <span class="token operator">||</span> conn.State <span class="token operator">==</span> ConnectionState.Broken<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> conn<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static int ExecuteNonQuery<span class="token punctuation">(</span>string sql<span class="token punctuation">)</span>//参数执行的语句 执行增删改        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static int ExecNonQuery<span class="token punctuation">(</span>string sqlstr, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, Conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int res <span class="token operator">=</span> 0<span class="token punctuation">;</span>            res <span class="token operator">=</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Conn.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static object ExecuteScalar<span class="token punctuation">(</span>string sql<span class="token punctuation">)</span> //查询单个值        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ExecuteScalar<span class="token punctuation">(</span>string sql,params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span> //查询单个值        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static DataTable ExecuteDataTable<span class="token punctuation">(</span>string sql, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span> //查询结果集比较少的sql        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sql, Conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            SqlDataAdapter adapter <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                adapter.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                throw ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> dt<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="App-config"><a href="#App-config" class="headerlink" title="App.config"></a>App.config</h2><pre class=" language-bash"><code class="language-bash">?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span>  <span class="token operator">&lt;</span>connectionStrings<span class="token operator">></span>    <span class="token operator">&lt;</span>add name<span class="token operator">=</span><span class="token string">"conStr"</span> connectionString<span class="token operator">=</span><span class="token string">"server=.;database=hushi;uid=sa;pwd=sa;"</span>/<span class="token operator">></span>  <span class="token operator">&lt;</span>/connectionStrings<span class="token operator">></span><span class="token operator">&lt;</span>/configuration<span class="token operator">></span></code></pre><h2 id="BLL"><a href="#BLL" class="headerlink" title="BLL"></a>BLL</h2><pre class=" language-bash"><code class="language-bash">namespace 三层架构.BLL<span class="token punctuation">{</span>    class PersonBLL    <span class="token punctuation">{</span>        public int selectNew<span class="token punctuation">(</span>users model<span class="token punctuation">)</span>//查询单个数据        <span class="token punctuation">{</span>            <span class="token keyword">return</span> new PersonDAL<span class="token punctuation">(</span><span class="token punctuation">)</span>.selectNew<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public int insert<span class="token punctuation">(</span>users model<span class="token punctuation">)</span> //增加数据        <span class="token punctuation">{</span>            <span class="token keyword">return</span> new PersonDAL<span class="token punctuation">(</span><span class="token punctuation">)</span>.insert<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public int delete<span class="token punctuation">(</span>users model<span class="token punctuation">)</span> //删除数据        <span class="token punctuation">{</span>            <span class="token keyword">return</span> new PersonDAL<span class="token punctuation">(</span><span class="token punctuation">)</span>.delete<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public int update<span class="token punctuation">(</span>int id,users model<span class="token punctuation">)</span> //删除数据        <span class="token punctuation">{</span>            <span class="token keyword">return</span> new PersonDAL<span class="token punctuation">(</span><span class="token punctuation">)</span>.update<span class="token punctuation">(</span>id,model<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public <span class="token function">users</span> get<span class="token punctuation">(</span>string id<span class="token punctuation">)</span> //查询数据        <span class="token punctuation">{</span>            <span class="token keyword">return</span> new PersonDAL<span class="token punctuation">(</span><span class="token punctuation">)</span>.get<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public IEnumerable<span class="token operator">&lt;</span>users<span class="token operator">></span> GetAll<span class="token punctuation">(</span><span class="token punctuation">)</span> //查询所有数据        <span class="token punctuation">{</span>            <span class="token keyword">return</span> new PersonDAL<span class="token punctuation">(</span><span class="token punctuation">)</span>.GetAll<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2019/01/15/fan-she/"/>
      <url>/2019/01/15/fan-she/</url>
      
        <content type="html"><![CDATA[<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h2 id="定义一个类，并且生成dll"><a href="#定义一个类，并且生成dll" class="headerlink" title="定义一个类，并且生成dll"></a>定义一个类，并且生成dll</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>namespace ClassLibrary1<span class="token punctuation">{</span>    public class Class1    <span class="token punctuation">{</span>        private int _age<span class="token punctuation">;</span>        public int Age        <span class="token punctuation">{</span>            get <span class="token punctuation">{</span> <span class="token keyword">return</span> _age<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _age <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private string _name<span class="token punctuation">;</span>        public string Name        <span class="token punctuation">{</span>            get <span class="token punctuation">{</span> <span class="token keyword">return</span> _name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> _name <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public void SayHi<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"大家好1！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public void AAA<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            MyClass mc <span class="token operator">=</span> new MyClass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mc.BBB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public interface IFlyable    <span class="token punctuation">{</span>        void Fly<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public delegate void MyDelegate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public enum Good    <span class="token punctuation">{</span>        高,        富,        帅    <span class="token punctuation">}</span>    internal class MyClass    <span class="token punctuation">{</span>        internal void BBB<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"能看到吗》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public class Person    <span class="token punctuation">{</span>        public string Name        <span class="token punctuation">{</span>            get<span class="token punctuation">;</span>            <span class="token keyword">set</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public int Age        <span class="token punctuation">{</span>            get<span class="token punctuation">;</span>            <span class="token keyword">set</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public string Email        <span class="token punctuation">{</span>            get<span class="token punctuation">;</span>            <span class="token keyword">set</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    public class Chinese <span class="token keyword">:</span> Person, IZiWoXiuFu    <span class="token punctuation">{</span>        //户口        public string HuKouSuoZaiDi        <span class="token punctuation">{</span>            get<span class="token punctuation">;</span>            <span class="token keyword">set</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region IZiWoXiuFu 成员</span>        public void XiuFu<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"调用了XiuFu方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>    <span class="token punctuation">}</span>    public interface IZiWoXiuFu    <span class="token punctuation">{</span>        void XiuFu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public abstract class MyAbsClass    <span class="token punctuation">{</span>        public abstract void SayHello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static class MyStaticClass    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="反射调用dll里面的方法"><a href="#反射调用dll里面的方法" class="headerlink" title="反射调用dll里面的方法"></a>反射调用dll里面的方法</h2><pre class=" language-bash"><code class="language-bash">  //1加载一个程序集  string path <span class="token operator">=</span>@<span class="token string">"C:\Users\zhouyong\Desktop\反射\反射\ClassLibrary1.dll"</span><span class="token punctuation">;</span>    Assembly asm <span class="token operator">=</span> Assembly.LoadFile<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            //2.获取Person类型            Type <span class="token function">type</span> <span class="token operator">=</span> asm.GetType<span class="token punctuation">(</span><span class="token string">"ClassLibrary1.Class1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             //获得个方法             MethodInfo minfo <span class="token operator">=</span> type.GetMethod<span class="token punctuation">(</span><span class="token string">"SayHi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             Console.WriteLine<span class="token punctuation">(</span>minfo.Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建一个type类型的对象obj             object obj <span class="token operator">=</span> Activator.CreateInstance<span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>             //调用方法             minfo.Invoke<span class="token punctuation">(</span>obj, null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="常用的一些反射方法练习"><a href="#常用的一些反射方法练习" class="headerlink" title="常用的一些反射方法练习"></a>常用的一些反射方法练习</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Reflection<span class="token punctuation">;</span>namespace Type的一些应用<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string path <span class="token operator">=</span> @<span class="token string">"C:\Users\zhouyong\Desktop\日常软件\我的资料\programme\practice\反射\反射\ClassLibrary1.dll"</span><span class="token punctuation">;</span>            Assembly asm <span class="token operator">=</span> Assembly.LoadFile<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            //获取chinese类型的Type             Type chinese<span class="token operator">=</span> asm.GetType<span class="token punctuation">(</span><span class="token string">"ClassLibrary1.Chinese"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //获取Person类型的Type            Type Person<span class="token operator">=</span> asm.GetType<span class="token punctuation">(</span><span class="token string">"ClassLibrary1.Person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //获取接口类型的Type            Type IZiWoXiuFu<span class="token operator">=</span>asm.GetType<span class="token punctuation">(</span><span class="token string">"ClassLibrary1.IZiWoXiuFu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //获取抽象类的Type            Type MyAbsClass <span class="token operator">=</span>asm.GetType<span class="token punctuation">(</span><span class="token string">"ClassLibrary1.MyAbsClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //获取静态类MyStaticClass的Type             Type MyStaticClass<span class="token operator">=</span>  asm.GetType<span class="token punctuation">(</span><span class="token string">"ClassLibrary1.MyStaticClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">#region IsAssiginableFrom</span>             //3.验证一下Person类型是不是Chinese类型的父类。            //验证是不是可以把typChinese类型的对象赋值给typPerson类型。            bool b<span class="token operator">=</span> Person.IsAssignableFrom<span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>//ture            //判断是否可以将chinese<span class="token operator">=</span>的对象赋值给IZiWoXiuFu接口类型            bool z <span class="token operator">=</span> IZiWoXiuFu.IsAssignableFrom<span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>//ture             Console.WriteLine<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">#endregion</span>             <span class="token comment" spellcheck="true">#region IsInstanceOfType</span>                   ////创建了一个Chinese类型的对象obj            object obj<span class="token operator">=</span> Activator.CreateInstance<span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token punctuation">;</span>            MethodInfo xiufu <span class="token operator">=</span>chinese.GetMethod<span class="token punctuation">(</span><span class="token string">"XiuFu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //调用方法            xiufu.Invoke<span class="token punctuation">(</span>obj, null<span class="token punctuation">)</span><span class="token punctuation">;</span>            //验证obj是不是Chinese类型的对象            bool a <span class="token operator">=</span> chinese.IsInstanceOfType<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>//ture            Console.WriteLine<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            bool a1 <span class="token operator">=</span> Person.IsInstanceOfType<span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>//ture            Console.WriteLine<span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">#endregion</span>            <span class="token comment" spellcheck="true">#region IsSubclassOf</span>            ////验证Chinese是否是Person的子类             bool a3 <span class="token operator">=</span>  chinese.IsSubclassOf<span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">;</span>//true             //IsSubclassOf不考虑接口，只考虑父子类关系。             bool a4<span class="token operator">=</span>chinese.IsSubclassOf<span class="token punctuation">(</span>IZiWoXiuFu<span class="token punctuation">)</span><span class="token punctuation">;</span>//false             Console.WriteLine<span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>             Console.WriteLine<span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">#endregion</span>             <span class="token comment" spellcheck="true">#region IsAbstract,判断某个类型是否是一个抽象的。</span>             Console.WriteLine<span class="token punctuation">(</span>MyAbsClass.IsAbstract<span class="token punctuation">)</span><span class="token punctuation">;</span> //true             Console.WriteLine<span class="token punctuation">(</span>MyStaticClass.IsAbstract<span class="token punctuation">)</span><span class="token punctuation">;</span>            //接口、抽象类、静态类都不能被实例化，所以这里都认为是“抽象的”             <span class="token comment" spellcheck="true">#endregion</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归VS循环</title>
      <link href="/2019/01/15/di-gui-vs-xun-huan/"/>
      <url>/2019/01/15/di-gui-vs-xun-huan/</url>
      
        <content type="html"><![CDATA[<h2 id="递归VS循环"><a href="#递归VS循环" class="headerlink" title="递归VS循环"></a>递归VS循环</h2><p>求第三位数前2位之和 ，一列数的规则如下: 1、1、2、3</p><pre class=" language-bash"><code class="language-bash"> class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                int position <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                Console.Write<span class="token punctuation">(</span><span class="token string">"for循环："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console.WriteLine<span class="token punctuation">(</span>GetFooValueFor<span class="token punctuation">(</span>position<span class="token punctuation">))</span><span class="token punctuation">;</span>                Console.Write<span class="token punctuation">(</span><span class="token string">"递归算法:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console.WriteLine<span class="token punctuation">(</span>GetFooValueDiGui<span class="token punctuation">(</span>position<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        static long GetFooValueDiGui<span class="token punctuation">(</span>int position<span class="token punctuation">)</span>         <span class="token punctuation">{</span>              long reslut <span class="token operator">=</span> 1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> 3<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> reslut<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetFooValueDiGui<span class="token punctuation">(</span>position - 1<span class="token punctuation">)</span> + GetFooValueDiGui<span class="token punctuation">(</span>position - 2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        static long GetFooValueFor<span class="token punctuation">(</span>int position<span class="token punctuation">)</span>         <span class="token punctuation">{</span>          long reslut <span class="token operator">=</span> 1<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> 3<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              <span class="token keyword">return</span> reslut<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>              long first <span class="token operator">=</span> 1<span class="token punctuation">;</span>              long second <span class="token operator">=</span> 1<span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>int index <span class="token operator">=</span> 3<span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> position<span class="token punctuation">;</span> index++<span class="token punctuation">)</span>              <span class="token punctuation">{</span>                  reslut <span class="token operator">=</span> first + second<span class="token punctuation">;</span>                  first <span class="token operator">=</span> second<span class="token punctuation">;</span>                  second <span class="token operator">=</span> reslut<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> reslut<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2019/01/15/duo-xian-cheng/"/>
      <url>/2019/01/15/duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p> C#支持通过多线程并行地执行代码，一个线程有它独立的执行路径，能够与其它的线程同时地运行。一个C#程序开始于一个单线程，这个单线程是被CLR和操作系统（也称为“主线程”）自动创建的，并具有多线程创建额外的线程。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><pre class=" language-bash"><code class="language-bash">  Process press <span class="token operator">=</span> Process.Start<span class="token punctuation">(</span><span class="token string">"iexplore.exe"</span>, <span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //启动一个进程  var processes <span class="token operator">=</span> Process.GetProcesses<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //获得本地进程  foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> processes<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      Console.WriteLine<span class="token punctuation">(</span>item.ProcessName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   获取当前进程 睡100秒，在关掉  Process p <span class="token operator">=</span> Process.GetCurrentProcess<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Thread.Sleep<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>  p.Kill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="应用程序域"><a href="#应用程序域" class="headerlink" title="应用程序域"></a>应用程序域</h2><pre class=" language-bash"><code class="language-bash">  AppDomain.Unload<span class="token punctuation">(</span>AppDomain.CurrentDomain<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>AppDomain.CurrentDomain.IsDefaultAppDomain<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>        Console.WriteLine<span class="token punctuation">(</span><span class="token string">"主应用程序域"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //自己写个一个应用程序域//创建一个应用程序域    AppDomainSetup setup <span class="token operator">=</span> new AppDomainSetup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    setup.LoaderOptimization <span class="token operator">=</span> LoaderOptimization.SingleDomain<span class="token punctuation">;</span>    AppDomain appDomain <span class="token operator">=</span> AppDomain.CreateDomain<span class="token punctuation">(</span><span class="token string">"MultThread"</span>, null, setup<span class="token punctuation">)</span><span class="token punctuation">;</span>    appDomain.ExecuteAssembly<span class="token punctuation">(</span><span class="token string">"MultThread.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><pre class=" language-bash"><code class="language-bash">   Thread Mainthread <span class="token operator">=</span> Thread.CurrentThread<span class="token punctuation">;</span>    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"主线程id是：{0}"</span>, Mainthread.ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>    //创建一个线程    ThreadStart start <span class="token operator">=</span> DoWork<span class="token punctuation">;</span>    Thread thread <span class="token operator">=</span> new Thread<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>    thread.Name <span class="token operator">=</span> <span class="token string">"first"</span><span class="token punctuation">;</span>    //线程的级别:微软对windows 0-31级别,级别是动态的,操作系统只做参考    thread.Priority <span class="token operator">=</span> ThreadPriority.Normal<span class="token punctuation">;</span>    //设置后台线程:主线程关闭了，子线程也关闭    //前台线程:主线程关了， 子线程还在跑着    thread.IsBackground <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    //启动线程（不是真正启动,告诉CPU可以启动）    thread.Start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Console.WriteLine<span class="token punctuation">(</span><span class="token string">"主线程跑起:{0}"</span>, Thread.CurrentThread.ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread.Sleep<span class="token punctuation">(</span>1000<span class="token punctuation">)</span><span class="token punctuation">;</span>        //thread.Abort<span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>//终止线程    <span class="token punctuation">}</span></code></pre><h2 id="带参数的线程"><a href="#带参数的线程" class="headerlink" title="带参数的线程"></a>带参数的线程</h2><pre class=" language-bash"><code class="language-bash"> Thread thread <span class="token operator">=</span> new Thread<span class="token punctuation">((</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>Console.WriteLine<span class="token punctuation">(</span><span class="token string">"参数{0}，{1}"</span>, a, Thread.CurrentThread.ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Thread thread <span class="token operator">=</span> new Thread<span class="token variable"><span class="token punctuation">((</span>a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> DoWork<span class="token punctuation">(</span>a<span class="token punctuation">))</span></span><span class="token punctuation">;</span> thread.IsBackground <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> thread.Start<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Demo异步委托"><a href="#Demo异步委托" class="headerlink" title="Demo异步委托"></a>Demo异步委托</h2><pre class=" language-bash"><code class="language-bash"> class Program    <span class="token punctuation">{</span>        public delegate void AddDel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>   AddDel aa <span class="token operator">=</span> DoWork<span class="token punctuation">;</span>            AddDel addDemo <span class="token operator">=</span> new AddDel<span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">;</span>            addDemo.BeginInvoke<span class="token punctuation">(</span>null, null<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     static void DoWork<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>      <span class="token punctuation">{</span>          Console.WriteLine<span class="token punctuation">(</span><span class="token string">"子线程跑起:{0}"</span>,Thread.CurrentThread.ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>          Thread.Sleep<span class="token punctuation">(</span>1000<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      //Console.WriteLine<span class="token punctuation">(</span><span class="token string">"子线程跑起:{0}"</span>,Thread.CurrentThread.ManagedThreadId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="Demo摇号机"><a href="#Demo摇号机" class="headerlink" title="Demo摇号机"></a>Demo摇号机</h2><p><img src="/2019/01/15/duo-xian-cheng/1.jpg" alt="图1"></p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.Threading<span class="token punctuation">;</span>namespace 摇号机<span class="token punctuation">{</span>      public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Label<span class="token operator">></span> list <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Label<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        public bool IsCreate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Control.CheckForIllegalCrossThreadCalls <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void Form1_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            list.Add<span class="token punctuation">(</span>this.label1<span class="token punctuation">)</span><span class="token punctuation">;</span> list.Add<span class="token punctuation">(</span>this.label2<span class="token punctuation">)</span><span class="token punctuation">;</span> list.Add<span class="token punctuation">(</span>this.label3<span class="token punctuation">)</span><span class="token punctuation">;</span>            list.Add<span class="token punctuation">(</span>this.label4<span class="token punctuation">)</span><span class="token punctuation">;</span>list.Add<span class="token punctuation">(</span>this.label5<span class="token punctuation">)</span><span class="token punctuation">;</span>list.Add<span class="token punctuation">(</span>this.label6<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnStart_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IsCreate<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                IsCreate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                btnStart.Text <span class="token operator">=</span> <span class="token string">"开始"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                this.btnStart.Text <span class="token operator">=</span> <span class="token string">"结束"</span><span class="token punctuation">;</span>                IsCreate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                //启动一个线程 改变值                ThreadStart start <span class="token operator">=</span> workRandom<span class="token punctuation">;</span>                Thread thread <span class="token operator">=</span> new Thread<span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>                thread.IsBackground <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                thread.Start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public  void workRandom<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Random random <span class="token operator">=</span> new Random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>IsCreate<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 6<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.Text <span class="token operator">=</span> random.Next<span class="token punctuation">(</span>0, 10<span class="token punctuation">)</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Thread.Sleep<span class="token punctuation">(</span>100<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2019/01/15/dan-li-mo-shi/"/>
      <url>/2019/01/15/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="Singleton"><a href="#Singleton" class="headerlink" title="Singleton"></a>Singleton</h2><p>单例模式也就是保证一个类只有一个实例的一种实现方法，</p><h2 id="写法一："><a href="#写法一：" class="headerlink" title="写法一："></a>写法一：</h2><pre class=" language-bash"><code class="language-bash">   class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Earth person <span class="token operator">=</span> Earth.GetEarth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            person.Population<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    class Earth    <span class="token punctuation">{</span>       private static Earth person <span class="token operator">=</span> new Earth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       private Earth<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>       public static Earth GetEarth<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           <span class="token keyword">return</span> person<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       public string Population<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="写法二："><a href="#写法二：" class="headerlink" title="写法二："></a>写法二：</h2><pre class=" language-bash"><code class="language-bash">class Peson    <span class="token punctuation">{</span>        private Peson<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>         <span class="token punctuation">}</span>        private static Peson p <span class="token operator">=</span> new Peson<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        public static Peson Get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Peson p <span class="token operator">=</span> Peson.Get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LINQ</title>
      <link href="/2019/01/15/linq/"/>
      <url>/2019/01/15/linq/</url>
      
        <content type="html"><![CDATA[<h2 id="LINQ-基础"><a href="#LINQ-基础" class="headerlink" title="LINQ 基础"></a>LINQ 基础</h2><p>LINQ</p><p>LINQ关键字</p><p>from 指定数据源和范围变量</p><p>where 根据布尔表达式(由逻辑与 或 等组成)从数据源中筛选元素</p><p>select 指定查询结果中的元素所具有的类型或表现形式</p><p>group 对对查询结果按照键值进行分组</p><p>into 提供一个标示符，它可以充当对 join group 或 select 子句结果的引用</p><p>orderby 对查询出的元素进行排序</p><p>join 按照两个指定匹配条件来联接俩个数据源</p><p>let 产生一个用于查询表达式中子表达式查询结果的范围变量</p><h2 id="LINQ-基本写法"><a href="#LINQ-基本写法" class="headerlink" title="LINQ 基本写法"></a>LINQ 基本写法</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>namespace ConsoleApplication7LINQ<span class="token punctuation">{</span>    class Customer    <span class="token punctuation">{</span>        public string ID <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public string City <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public string Country <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public string Region <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public decimal Sales <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public override string ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>//重写ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>,默认的ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>仅输出类型名称        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ID:"</span> + ID + <span class="token string">"City:"</span> + City + <span class="token string">"Country:"</span> + Country + <span class="token string">"Region:"</span> + Region + <span class="token string">"Sales:"</span> + Sales<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    class Order    <span class="token punctuation">{</span>        public string ID <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public decimal Amount <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    class Program    <span class="token punctuation">{</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 生成随机数组        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"count"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        private static int<span class="token punctuation">[</span><span class="token punctuation">]</span> GenerateLotsofNumbers<span class="token punctuation">(</span>int count<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Random generator <span class="token operator">=</span> new Random<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span> //使用指定的种子值初始化 Random 类的新实例。            int<span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> new int<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> generator.Next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //1.用var关键字声明结果变量        //2.指定数据源：from 子句        //3.指定条件：where 子句        //4.指定元素：select子句        //5.完成：使用foreach循环        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>           // string<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"Alono"</span>, <span class="token string">"Zheng"</span>, <span class="token string">"Yuan"</span>, <span class="token string">"Song"</span>, <span class="token string">"Simle"</span>, <span class="token string">"Hsieh"</span>, <span class="token string">"Small"</span>, <span class="token string">"She"</span>, <span class="token string">"Sza"</span>, <span class="token string">"Sam"</span>, <span class="token string">"Fa"</span>, <span class="token string">"Iyl"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>           // //var queryResults <span class="token operator">=</span> from n <span class="token keyword">in</span> names           // //                   where n.StartsWith<span class="token punctuation">(</span><span class="token string">"S"</span><span class="token punctuation">)</span>           // //                   orderby n descending//按照最后一个字母排序 ordeby n.Substring<span class="token punctuation">(</span>n.Length - 1<span class="token punctuation">)</span>           // //                   <span class="token keyword">select</span> n<span class="token punctuation">;</span>//查询语法           // var queryResults <span class="token operator">=</span> names.OrderBy<span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n<span class="token punctuation">)</span>.Where<span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n.StartsWith<span class="token punctuation">(</span><span class="token string">"S"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//方法语法 Lambda 表达式           //// var queryResults <span class="token operator">=</span> names.OrderByDescending<span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n<span class="token punctuation">)</span>.Where<span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n.StartsWith<span class="token punctuation">(</span><span class="token string">"S"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>           // foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> queryResults<span class="token punctuation">)</span>           //     Console.WriteLine<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>           // Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           //--------------------------------------------------------------------------------------------------            //int<span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> GenerateLotsofNumbers<span class="token punctuation">(</span>12345678<span class="token punctuation">)</span><span class="token punctuation">;</span>            //var queryResults <span class="token operator">=</span> from n <span class="token keyword">in</span> numbers            //                   where n <span class="token operator">&lt;</span> 1000            //                   <span class="token keyword">select</span> n<span class="token punctuation">;</span>            //foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> queryResults<span class="token punctuation">)</span>            //<span class="token punctuation">{</span>            //    Console.WriteLine<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            //<span class="token punctuation">}</span>            //Console.WriteLine<span class="token punctuation">(</span><span class="token string">"聚合运算符......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //Console.WriteLine<span class="token punctuation">(</span>queryResults.Count<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //Console.WriteLine<span class="token punctuation">(</span>queryResults .Max <span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //Console.WriteLine<span class="token punctuation">(</span>queryResults.Average<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //Console.WriteLine<span class="token punctuation">(</span>queryResults.Sum<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //--------------------------------------------------------------------------------------------------            List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> customers <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> <span class="token punctuation">{</span>                new Customer <span class="token punctuation">{</span>ID <span class="token operator">=</span><span class="token string">"A"</span>,City <span class="token operator">=</span><span class="token string">"New York"</span>,Country <span class="token operator">=</span><span class="token string">"USA"</span>,Region <span class="token operator">=</span><span class="token string">"North America"</span>,Sales <span class="token operator">=</span>9999<span class="token punctuation">}</span>,                new Customer <span class="token punctuation">{</span>ID <span class="token operator">=</span><span class="token string">"B"</span>,City <span class="token operator">=</span><span class="token string">"New York"</span>,Country <span class="token operator">=</span><span class="token string">"USA"</span>,Region <span class="token operator">=</span><span class="token string">"North America"</span>,Sales <span class="token operator">=</span>9999<span class="token punctuation">}</span>,                 new Customer <span class="token punctuation">{</span>ID <span class="token operator">=</span><span class="token string">"C"</span>,City <span class="token operator">=</span><span class="token string">"XiAn"</span>,Country <span class="token operator">=</span><span class="token string">"China"</span>,Region <span class="token operator">=</span><span class="token string">"Asia"</span>,Sales <span class="token operator">=</span>7777<span class="token punctuation">}</span>,                  new Customer <span class="token punctuation">{</span>ID <span class="token operator">=</span><span class="token string">"D"</span>,City <span class="token operator">=</span><span class="token string">"New York"</span>,Country <span class="token operator">=</span><span class="token string">"USA"</span>,Region <span class="token operator">=</span><span class="token string">"North America"</span>,Sales <span class="token operator">=</span>9999<span class="token punctuation">}</span>,                   new Customer <span class="token punctuation">{</span>ID <span class="token operator">=</span><span class="token string">"E"</span>,City <span class="token operator">=</span><span class="token string">"BeiJing"</span>,Country <span class="token operator">=</span><span class="token string">"China"</span>,Region <span class="token operator">=</span><span class="token string">"Asia"</span>,Sales <span class="token operator">=</span>8888<span class="token punctuation">}</span>,                    new Customer <span class="token punctuation">{</span>ID <span class="token operator">=</span><span class="token string">"F"</span>,City <span class="token operator">=</span><span class="token string">"New York"</span>,Country <span class="token operator">=</span><span class="token string">"USA"</span>,Region <span class="token operator">=</span><span class="token string">"North America"</span>,Sales <span class="token operator">=</span>9999<span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            //var queryReaults <span class="token operator">=</span>            //    from n <span class="token keyword">in</span> customers            //    where n.Region <span class="token operator">==</span> <span class="token string">"Asia"</span>            //    <span class="token keyword">select</span> n<span class="token punctuation">;</span>            //foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> queryReaults <span class="token punctuation">)</span>            //    Console.WriteLine<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            //Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //--------------------------------------投影----------------------------------------------            //投影是在LINQ查询中从其他数据类型中创建新数据类型的术语。            //var queryResults <span class="token operator">=</span>            //    from c <span class="token keyword">in</span> customers            //    where c.Region <span class="token operator">==</span> <span class="token string">"Asia"</span>            //    <span class="token keyword">select</span> new <span class="token punctuation">{</span> c.City, c.Country, c.Sales <span class="token punctuation">}</span><span class="token punctuation">;</span>            //var queryResults <span class="token operator">=</span> customers.Where<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c.Region <span class="token operator">==</span> <span class="token string">"Asia"</span><span class="token punctuation">)</span>.Select<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> new <span class="token punctuation">{</span> c.City, c.Country, c.Sales <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //var queryResults <span class="token operator">=</span> customers.Select<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> new <span class="token punctuation">{</span> c.City, c.Country, c.Sales <span class="token punctuation">}</span><span class="token punctuation">)</span>.Where<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c.City <span class="token operator">==</span> <span class="token string">"XiAn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> queryResults<span class="token punctuation">)</span>            //    Console.WriteLine<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            //Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //--------------------单值选择查询------------------------            var queryResults1 <span class="token operator">=</span> customers.Select<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c.Region<span class="token punctuation">)</span>.Distinct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var queryResults2 <span class="token operator">=</span> <span class="token punctuation">(</span>from c <span class="token keyword">in</span> customers <span class="token keyword">select</span> c.Region<span class="token punctuation">)</span>.Distinct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //------------------------Any和All---------------------------------            bool anyUSA <span class="token operator">=</span> customers.Any<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c.Country <span class="token operator">==</span> <span class="token string">"USA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>anyUSA <span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"some customers are in USA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"WAWA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bool allAsia <span class="token operator">=</span> customers.All<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c.Region <span class="token operator">==</span> <span class="token string">"Asia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>allAsia <span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"WAWA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"All customers are in Asia"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           // Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //--------------------------------多级排序---------------------------------------            var queryReaults3 <span class="token operator">=</span>                from n <span class="token keyword">in</span> customers                where n.Region <span class="token operator">==</span> <span class="token string">"Asia"</span>                orderby n.Region ,n.Country descending ,n.City //查询语法 多级排序                <span class="token keyword">select</span> n<span class="token punctuation">;</span>            var queryResults4 <span class="token operator">=</span>                customers.OrderBy<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c.Region<span class="token punctuation">)</span>.ThenByDescending<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c.Country<span class="token punctuation">)</span>.ThenBy<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c.City<span class="token punctuation">)</span>.Select<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> new <span class="token punctuation">{</span> c.ID, c.Region, c.Country, c.City <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                //方法语法 多级排序            //------------------------------------组合查询（group query）-------------------------------------            //组合查询中的数据通过一个键（Key）字段来组合，每一个组中的所有成员都共享这个字段值，在这个例子中 键字段是Region             //要计算每个组的总和，应先生成一个新的结果集cg            var queryResults5 <span class="token operator">=</span> from c <span class="token keyword">in</span> customers                                group c by c.Region into cg                                <span class="token keyword">select</span> new <span class="token punctuation">{</span> TotalSales <span class="token operator">=</span> cg.Sum<span class="token punctuation">(</span>c <span class="token operator">=</span><span class="token operator">></span> c.Sales<span class="token punctuation">)</span>, Region <span class="token operator">=</span> cg.Key <span class="token punctuation">}</span><span class="token punctuation">;</span>            var orderedResults <span class="token operator">=</span> from cg <span class="token keyword">in</span> queryResults5                                 orderby cg.TotalSales descending                                 <span class="token keyword">select</span> cg<span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> orderedResults<span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span>item.TotalSales + <span class="token string">"\t:"</span> + item.Region<span class="token punctuation">)</span><span class="token punctuation">;</span>            //Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //------------------------Take 和 Skip----------------------------------            //Take<span class="token punctuation">(</span><span class="token punctuation">)</span> 从查询结果中提取前n个结果            //Skip<span class="token punctuation">(</span><span class="token punctuation">)</span> 从查询结果中跳过前n个结果 返回剩余的结果            foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> orderedResults .Take <span class="token punctuation">(</span>2<span class="token punctuation">))</span>                Console.WriteLine<span class="token punctuation">(</span>item.TotalSales + <span class="token string">"\t:"</span> + item.Region<span class="token punctuation">)</span><span class="token punctuation">;</span>            //---------------------------First 和 FirstOrDefault-------------------------------            //First<span class="token punctuation">(</span><span class="token punctuation">)</span> 返回结果集中第一个匹配给定条件的元素            //FirstOrDefault<span class="token punctuation">(</span><span class="token punctuation">)</span> 当查询条件不满足是，将为列表返回默认元素 而使用First<span class="token punctuation">(</span><span class="token punctuation">)</span>则返回null            Console.WriteLine<span class="token punctuation">(</span>queryReaults3.FirstOrDefault<span class="token punctuation">(</span>n <span class="token operator">=</span><span class="token operator">></span> n.Region <span class="token operator">==</span> <span class="token string">"Asia"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //--------------------------------集运算符-----------------------------            List<span class="token operator">&lt;</span>Order<span class="token operator">></span> orders <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Order<span class="token operator">></span><span class="token punctuation">{</span>            new Order <span class="token punctuation">{</span>ID<span class="token operator">=</span><span class="token string">"A"</span>,Amount<span class="token operator">=</span>100<span class="token punctuation">}</span>,            new Order <span class="token punctuation">{</span>ID <span class="token operator">=</span><span class="token string">"B"</span>,Amount <span class="token operator">=</span>200<span class="token punctuation">}</span>,            new Order <span class="token punctuation">{</span>ID <span class="token operator">=</span><span class="token string">"H"</span>,Amount <span class="token operator">=</span>300<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            var customersIDs <span class="token operator">=</span> from c <span class="token keyword">in</span> customers                               <span class="token keyword">select</span> c.ID<span class="token punctuation">;</span>            var ordersIDs <span class="token operator">=</span> from o <span class="token keyword">in</span> orders                            <span class="token keyword">select</span> o.ID<span class="token punctuation">;</span>            var customersWithOrders <span class="token operator">=</span> customersIDs.Intersect<span class="token punctuation">(</span>ordersIDs<span class="token punctuation">)</span><span class="token punctuation">;</span>//Intersect<span class="token punctuation">(</span><span class="token punctuation">)</span>            foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> customersWithOrders <span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span>item <span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var ordersNoCustomers <span class="token operator">=</span> ordersIDs.Except<span class="token punctuation">(</span>customersIDs<span class="token punctuation">)</span><span class="token punctuation">;</span>//Except<span class="token punctuation">(</span><span class="token punctuation">)</span>            foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> ordersNoCustomers <span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span>item <span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var allCustomersOrders <span class="token operator">=</span> ordersIDs.Union<span class="token punctuation">(</span>customersIDs<span class="token punctuation">)</span><span class="token punctuation">;</span>//Union<span class="token punctuation">(</span><span class="token punctuation">)</span>            foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> allCustomersOrders<span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>            //Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //---------------------------------Join----------------------------            //使用Join运算符在一个查询中查找多个集合中的相关数据，用键字段把结果连接起来            var queryResults9 <span class="token operator">=</span>                from c <span class="token keyword">in</span> customers                <span class="token function">join</span> o <span class="token keyword">in</span> orders on c.ID equals o.ID                <span class="token keyword">select</span> new <span class="token punctuation">{</span> c.ID, c.City, SalesBefore <span class="token operator">=</span> c.Sales, NewOrder <span class="token operator">=</span> o.Amount, SalesAfter <span class="token operator">=</span> c.Sales + o.Amount <span class="token punctuation">}</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> queryResults9 <span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span>item <span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="into子句"><a href="#into子句" class="headerlink" title="into子句"></a>into子句</h2><p>into子句作为一个临时标识符，用于group select join 子句中。它存储了into子句前面的查询内容，是后面的子句可以方便的使用，对其进行再次查询或排序 投影等操作。</p><pre class=" language-bash"><code class="language-bash">GuestInfo/// <span class="token operator">&lt;</span>summary<span class="token operator">></span>    /// 客户信息    /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>    public class GuestInfo    <span class="token punctuation">{</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 姓名        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public string Name <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 年龄        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public int Age <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 电话        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public string Tel <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 电话表        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public List<span class="token operator">&lt;</span>string<span class="token operator">></span> TelTable <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>DemoIntonamespace DemoInto<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //初始化集合            List<span class="token operator">&lt;</span>GuestInfo<span class="token operator">></span> gList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>GuestInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"萧玉霜"</span>,                     Age <span class="token operator">=</span> 17,                     Tel <span class="token operator">=</span> <span class="token string">"053*-985690**"</span> <span class="token punctuation">}</span>,                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"萧玉若"</span>,                     Age <span class="token operator">=</span> 21,                     Tel <span class="token operator">=</span> <span class="token string">"035*-120967**"</span>                 <span class="token punctuation">}</span>,                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"徐长今"</span>,                     Age <span class="token operator">=</span> 18,                     Tel <span class="token operator">=</span> <span class="token string">"039*-967512**"</span>                 <span class="token punctuation">}</span>,                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"徐芷晴"</span>,                     Age <span class="token operator">=</span> 24,                     Tel <span class="token operator">=</span> <span class="token string">"089*-569832**"</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            //按照名字的第一个字进行分组并用分组key进行排序            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"into用于group子句的分组时刻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            var query <span class="token operator">=</span> from guest <span class="token keyword">in</span> gList                        group guest by guest.Name.Substring<span class="token punctuation">(</span>0, 1<span class="token punctuation">)</span> into grguest                        orderby grguest.Key descending                        <span class="token keyword">select</span> grguest<span class="token punctuation">;</span>            //遍历分组数据            foreach <span class="token punctuation">(</span>var guestGroup <span class="token keyword">in</span> query<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                //输出当前分组的键值                Console.WriteLine<span class="token punctuation">(</span>string.Format<span class="token punctuation">(</span><span class="token string">"分组键：{0} \n"</span>, guestGroup.Key<span class="token punctuation">))</span><span class="token punctuation">;</span>                //遍历组内元素                foreach <span class="token punctuation">(</span>var g <span class="token keyword">in</span> guestGroup<span class="token punctuation">)</span>                    Console.WriteLine<span class="token punctuation">(</span>string.Format<span class="token punctuation">(</span><span class="token string">"{0}  电话:{1}"</span>, g.Name, g.Tel<span class="token punctuation">))</span><span class="token punctuation">;</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"\n**********************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"\ninto用于select子句的投影时刻"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //select 子句中 的 info 子句使用            var query2 <span class="token operator">=</span> from guest <span class="token keyword">in</span> gList                         <span class="token keyword">select</span> new<span class="token punctuation">{</span>NewName <span class="token operator">=</span> guest.Name, NewAge <span class="token operator">=</span> guest.Age<span class="token punctuation">}</span> into newguest                         orderby newguest.NewAge                         <span class="token keyword">select</span> newguest<span class="token punctuation">;</span>            //遍历分组数据            foreach <span class="token punctuation">(</span>var g <span class="token keyword">in</span> query2<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>string.Format<span class="token punctuation">(</span><span class="token string">"{0} 年龄：{1}"</span>, g.NewName,g.NewAge<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><h2 id="let子句"><a href="#let子句" class="headerlink" title="let子句"></a>let子句</h2><p>let语句在LINQ表达式中存储子表达式的计算结果。let子句创建一个范围变量来存储结果，变量被创建后，不能修改或把其他表达式的结果重新赋值给它。此范围变量可以在后续的LINQ语句中使用。</p><pre class=" language-bash"><code class="language-bash">namespace DemoLet<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //初始化集合            List<span class="token operator">&lt;</span>GuestInfo<span class="token operator">></span> gList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>GuestInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"林晚荣"</span>,                     Age <span class="token operator">=</span> 21,                     Tel <span class="token operator">=</span> <span class="token string">"026*-888888**"</span> <span class="token punctuation">}</span>,                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"肖青漩"</span>,                     Age <span class="token operator">=</span> 21,                     Tel <span class="token operator">=</span> <span class="token string">"017*-876543**"</span>                 <span class="token punctuation">}</span>,                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"董巧巧"</span>,                     Age <span class="token operator">=</span> 19,                     Tel <span class="token operator">=</span> <span class="token string">"029*-981256**"</span>                 <span class="token punctuation">}</span>,            <span class="token punctuation">}</span><span class="token punctuation">;</span>            ///姓<span class="token string">"肖"</span>或姓 <span class="token string">"董"</span>的客户            var query <span class="token operator">=</span> from guest <span class="token keyword">in</span> gList                        <span class="token keyword">let</span> g <span class="token operator">=</span> guest.Name.Substring<span class="token punctuation">(</span>0,1<span class="token punctuation">)</span>                        where g <span class="token operator">==</span> <span class="token string">"肖"</span> <span class="token operator">||</span> g <span class="token operator">==</span> <span class="token string">"董"</span>                        <span class="token keyword">select</span> guest<span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>var g <span class="token keyword">in</span> query<span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span>string.Format<span class="token punctuation">(</span><span class="token string">"{0} 年龄:{1} 电话:{2}"</span>, g.Name, g.Age, g.Tel<span class="token punctuation">))</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="join子句"><a href="#join子句" class="headerlink" title="join子句"></a>join子句</h2><p>如果一个数据源中元素的某一个属性可以跟另外一个数据源中元素的属性进行相等比较，那么着两个数据源可以用join子句进行关联<br><br>join子句使用equals关键字进行相等比较。</p><pre class=" language-bash"><code class="language-bash">    /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>    /// 客户职务    /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>    public class GuestTitle    <span class="token punctuation">{</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 姓名        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public string Name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 职务        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public string Tilte <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">Demojoin class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //初始化客户集合            List<span class="token operator">&lt;</span>GuestInfo<span class="token operator">></span> gList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>GuestInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"林晚荣"</span>,                     Age <span class="token operator">=</span> 21,                     Tel <span class="token operator">=</span> <span class="token string">"026*-888888**"</span> <span class="token punctuation">}</span>,                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"肖青漩"</span>,                     Age <span class="token operator">=</span> 21,                     Tel <span class="token operator">=</span> <span class="token string">"017*-876543**"</span>                 <span class="token punctuation">}</span>,                new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"董巧巧"</span>,                     Age <span class="token operator">=</span> 19,                     Tel <span class="token operator">=</span> <span class="token string">"029*-981256**"</span>                 <span class="token punctuation">}</span>,                 new GuestInfo                 <span class="token punctuation">{</span>                     Name <span class="token operator">=</span> <span class="token string">"徐芷晴"</span>,                     Age <span class="token operator">=</span> 24,                     Tel <span class="token operator">=</span> <span class="token string">"089*-569832**"</span>                 <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            ///初始化客户职务集合            List<span class="token operator">&lt;</span>GuestTitle<span class="token operator">></span> titleList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>GuestTitle<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                new GuestTitle<span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"林晚荣"</span>, Tilte <span class="token operator">=</span> <span class="token string">"金刀汉王"</span><span class="token punctuation">}</span>,                new GuestTitle<span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"林晚荣"</span>, Tilte <span class="token operator">=</span> <span class="token string">"天下第一丁"</span><span class="token punctuation">}</span>,                new GuestTitle<span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"肖青漩"</span>, Tilte <span class="token operator">=</span> <span class="token string">"出云公主"</span><span class="token punctuation">}</span>,                new GuestTitle<span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"董巧巧"</span>, Tilte <span class="token operator">=</span> <span class="token string">"酒店CEO"</span><span class="token punctuation">}</span>,                new GuestTitle<span class="token punctuation">{</span> Name <span class="token operator">=</span> <span class="token string">"董巧巧"</span>, Tilte <span class="token operator">=</span> <span class="token string">"乖巧人儿"</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"内部联接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //根据姓名进行内部联接            var query <span class="token operator">=</span> from guest <span class="token keyword">in</span> gList                        <span class="token function">join</span> title <span class="token keyword">in</span> titleList on guest.Name equals title.Name                        <span class="token keyword">select</span> new <span class="token punctuation">{</span> Name <span class="token operator">=</span> guest.Name, Title <span class="token operator">=</span> title.Tilte, Age <span class="token operator">=</span> guest.Age <span class="token punctuation">}</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>var g <span class="token keyword">in</span> query<span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span>string.Format<span class="token punctuation">(</span><span class="token string">"{0} {1} 年龄:{2}"</span>, g.Title, g.Name, g.Age<span class="token punctuation">))</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"\n根据姓名进行分组联接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //根据姓名进行分组联接            var query2 <span class="token operator">=</span> from guest <span class="token keyword">in</span> gList                         <span class="token function">join</span> title <span class="token keyword">in</span> titleList on guest.Name equals title.Name into tgroup                         <span class="token keyword">select</span> new <span class="token punctuation">{</span> Name <span class="token operator">=</span> guest.Name, Titles <span class="token operator">=</span> tgroup <span class="token punctuation">}</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>var g <span class="token keyword">in</span> query2<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>g.Name<span class="token punctuation">)</span><span class="token punctuation">;</span>                foreach <span class="token punctuation">(</span>var g2 <span class="token keyword">in</span> g.Titles<span class="token punctuation">)</span>                    Console.WriteLine<span class="token punctuation">(</span>string.Format<span class="token punctuation">(</span><span class="token string">"   {0}"</span>, g2.Tilte<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"\n左外部联接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //根据姓名进行左外部联接            var query3 <span class="token operator">=</span> from guest <span class="token keyword">in</span> gList                         <span class="token function">join</span> title <span class="token keyword">in</span> titleList on guest.Name equals title.Name into tgroup                         from subtitle <span class="token keyword">in</span> tgroup.DefaultIfEmpty<span class="token punctuation">(</span><span class="token punctuation">)</span>                         <span class="token keyword">select</span> new <span class="token punctuation">{</span> Name <span class="token operator">=</span> guest.Name, Title <span class="token operator">=</span> <span class="token punctuation">(</span>subtitle <span class="token operator">==</span> null ? <span class="token string">"空缺"</span> <span class="token keyword">:</span> subtitle.Tilte<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>var g <span class="token keyword">in</span> query3<span class="token punctuation">)</span>                Console.WriteLine<span class="token punctuation">(</span>string.Format<span class="token punctuation">(</span><span class="token string">"{0} {1}"</span>, g.Title, g.Name<span class="token punctuation">))</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOP入门Demo-猜拳游戏</title>
      <link href="/2019/01/15/oop-ru-men-demo-cai-quan-you-xi/"/>
      <url>/2019/01/15/oop-ru-men-demo-cai-quan-you-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="简单OOP-猜拳游戏"><a href="#简单OOP-猜拳游戏" class="headerlink" title="简单OOP-猜拳游戏"></a>简单OOP-猜拳游戏</h2><p><img src="/2019/01/15/oop-ru-men-demo-cai-quan-you-xi/2.jpg" alt="图2"></p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><pre class=" language-bash"><code class="language-bash">namespace 猜拳游戏<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      public  int ownScore <span class="token operator">=</span> 0<span class="token punctuation">;</span>//自己分数       public int ownComputerSocre <span class="token operator">=</span> 0<span class="token punctuation">;</span>//电脑分数        private void btnstone_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            math<span class="token punctuation">(</span>btnstone.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        private void btnjiandao_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            math<span class="token punctuation">(</span>btnjiandao.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        private void btncloth_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            math<span class="token punctuation">(</span>btncloth.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 开始比赛        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"first"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        public void math<span class="token punctuation">(</span>string first<span class="token punctuation">)</span> <span class="token punctuation">{</span>            own play <span class="token operator">=</span> new own<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int playresult <span class="token operator">=</span> play.punching<span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            lbown.Text <span class="token operator">=</span> play.first<span class="token punctuation">;</span>            computer computerplay <span class="token operator">=</span> new computer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int computerresut <span class="token operator">=</span> computerplay.punching<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lbcomputer.Text <span class="token operator">=</span> computerplay.first<span class="token punctuation">;</span>            caipan.woner woner <span class="token operator">=</span> caipan.match<span class="token punctuation">(</span>playresult, computerresut<span class="token punctuation">)</span><span class="token punctuation">;</span>//获得枚举            <span class="token keyword">if</span> <span class="token punctuation">(</span>woner <span class="token operator">==</span> caipan.woner.computerWin<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lbresult.Text <span class="token operator">=</span> <span class="token string">"电脑赢"</span><span class="token punctuation">;</span>                ownComputerSocre +<span class="token operator">=</span> 1<span class="token punctuation">;</span>                lbComputerScore.Text <span class="token operator">=</span> ownComputerSocre.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>woner <span class="token operator">==</span> caipan.woner.ownWin<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lbresult.Text <span class="token operator">=</span> <span class="token string">"我赢"</span><span class="token punctuation">;</span>                ownScore +<span class="token operator">=</span> 1<span class="token punctuation">;</span>                lbOwnScore.Text <span class="token operator">=</span> ownScore.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>woner <span class="token operator">==</span> caipan.woner.pinshou<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lbresult.Text <span class="token operator">=</span> <span class="token string">"平手"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="caipan-cs"><a href="#caipan-cs" class="headerlink" title="caipan.cs"></a>caipan.cs</h2><pre class=" language-bash"><code class="language-bash">class caipan    <span class="token punctuation">{</span>        public enum woner <span class="token punctuation">{</span>            ownWin,//我赢            computerWin,//电脑赢            pinshou//平手        <span class="token punctuation">}</span>        public static woner match<span class="token punctuation">(</span>int playfirst,int computerfirst<span class="token punctuation">)</span> <span class="token punctuation">{</span>           //石头是1，剪刀是2，布是3 1-2<span class="token operator">=</span>-1，,1-3<span class="token operator">=</span>2,2-3<span class="token operator">=</span>-1            <span class="token keyword">if</span> <span class="token punctuation">(</span>playfirst - computerfirst <span class="token operator">==</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> woner.pinshou<span class="token punctuation">;</span>//平手            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>playfirst - computerfirst <span class="token operator">==</span> -1 <span class="token operator">||</span> playfirst - computerfirst <span class="token operator">==</span> 2<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> woner.ownWin<span class="token punctuation">;</span>//我赢            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> woner.computerWin<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="computer-cs"><a href="#computer-cs" class="headerlink" title="computer.cs"></a>computer.cs</h2><pre class=" language-bash"><code class="language-bash">public class computer    <span class="token punctuation">{</span>        public string first<span class="token punctuation">;</span>       //随机出拳        public int punching<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Random ran <span class="token operator">=</span> new Random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          int reslut<span class="token operator">=</span>  ran.Next<span class="token punctuation">(</span>1, 4<span class="token punctuation">)</span><span class="token punctuation">;</span>            switch <span class="token punctuation">(</span>reslut<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> 1: first <span class="token operator">=</span> <span class="token string">"石头"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> 2: first <span class="token operator">=</span> <span class="token string">"剪刀"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> 3: first <span class="token operator">=</span> <span class="token string">"布"</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> reslut<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="own-cs"><a href="#own-cs" class="headerlink" title="own.cs"></a>own.cs</h2><pre class=" language-bash"><code class="language-bash">public class own    <span class="token punctuation">{</span>   //1是石头，2是剪刀，3是布        public string first<span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       //出拳方法        public int punching<span class="token punctuation">(</span>string fist<span class="token punctuation">)</span> <span class="token punctuation">{</span>            int result<span class="token operator">=</span>0<span class="token punctuation">;</span>            switch <span class="token punctuation">(</span>fist<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"石头"</span><span class="token keyword">:</span> result<span class="token operator">=</span> 1<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"剪刀"</span><span class="token keyword">:</span> result<span class="token operator">=</span>2<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"布"</span><span class="token keyword">:</span>  result<span class="token operator">=</span>3<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            this.first <span class="token operator">=</span> fist<span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOP入门Demo-小宠物</title>
      <link href="/2019/01/14/oop-ru-men-demo-xiao-chong-wu/"/>
      <url>/2019/01/14/oop-ru-men-demo-xiao-chong-wu/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/14/oop-ru-men-demo-xiao-chong-wu/1.jpg" alt="图1"></p><h2 id="OOP入门Demo-小宠物"><a href="#OOP入门Demo-小宠物" class="headerlink" title="OOP入门Demo-小宠物"></a>OOP入门Demo-小宠物</h2><pre class=" language-bash"><code class="language-bash">class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Pet pet <span class="token operator">=</span> new Pet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"您已经领取了一个宠物，小悦悦"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"您可以执行：1，聊天2，洗澡，3，玩球，4，喂饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                string key <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               if<span class="token punctuation">(</span>key<span class="token operator">==</span><span class="token string">"1"</span><span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}:您想聊点什么"</span>, pet.Name<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>                   <span class="token punctuation">{</span>                       string dialog <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       pet.Speak<span class="token punctuation">(</span>dialog<span class="token punctuation">)</span><span class="token punctuation">;</span>                       Console.WriteLine<span class="token punctuation">(</span>pet.Report<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">"2"</span><span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   pet.Wash<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">"3"</span><span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   pet.PlayBall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">"4"</span><span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   Console.WriteLine<span class="token punctuation">(</span><span class="token string">"请输入喂饭得数量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   int count <span class="token operator">=</span>int.Parse<span class="token punctuation">(</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                   pet.Feed<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token punctuation">{</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你输入错误了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>               Console.WriteLine<span class="token punctuation">(</span>pet.Report<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">class Pet    <span class="token punctuation">{</span>        private string name <span class="token operator">=</span> <span class="token string">"小悦悦"</span><span class="token punctuation">;</span>        public string Name        <span class="token punctuation">{</span>            get <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 健康值        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        private int health<span class="token operator">=</span>20<span class="token punctuation">;</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 饥饱程度        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        private int fullLevel <span class="token operator">=</span> 20<span class="token punctuation">;</span>        public void Speak<span class="token punctuation">(</span>string s<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>health <span class="token operator">&lt;=</span> 1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}不是很健康了哦"</span>,name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fullLevel <span class="token operator">&lt;=</span> 1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}我饿了呀，不说了"</span>,name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            health <span class="token operator">=</span> health - 1<span class="token punctuation">;</span>            fullLevel <span class="token operator">=</span> fullLevel - 2<span class="token punctuation">;</span>           if<span class="token punctuation">(</span>s.Contains<span class="token punctuation">(</span><span class="token string">"你妹"</span><span class="token punctuation">)</span><span class="token operator">||</span>s.Contains<span class="token punctuation">(</span><span class="token string">"坏人"</span><span class="token punctuation">))</span>           <span class="token punctuation">{</span>               Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}:情礼貌用语"</span>,name<span class="token punctuation">)</span><span class="token punctuation">;</span>               Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           if<span class="token punctuation">(</span>s.Contains<span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">))</span>           <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}:你好"</span>,name<span class="token punctuation">)</span><span class="token punctuation">;</span>                Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>s.Contains<span class="token punctuation">(</span><span class="token string">"你叫什么"</span><span class="token punctuation">)</span> <span class="token operator">||</span> s.Contains<span class="token punctuation">(</span><span class="token string">"你是？"</span><span class="token punctuation">))</span>           <span class="token punctuation">{</span>               Console.WriteLine<span class="token punctuation">(</span><span class="token string">"我叫{0}"</span>, name<span class="token punctuation">)</span><span class="token punctuation">;</span>               Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token keyword">else</span>            <span class="token punctuation">{</span>               Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}：我听不懂你说的"</span>,name<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public void Wash<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            health <span class="token operator">=</span> health + 5<span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}:洗洗更健康"</span>, name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public void PlayBall<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>health <span class="token operator">&lt;=</span> 1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}:不是很健康了哦"</span>, name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fullLevel <span class="token operator">&lt;=</span> 1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}:我饿了呀，不说了"</span>, name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            health <span class="token operator">=</span> health + 5<span class="token punctuation">;</span>            fullLevel <span class="token operator">=</span> fullLevel - 3<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        public void Feed<span class="token punctuation">(</span>int FoodCount<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            if<span class="token punctuation">(</span>FoodCount<span class="token operator">&lt;=</span>0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}:食物了，你欺骗了我的感情！"</span>, name<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>health <span class="token operator">>=</span> 50<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}:已经饱了，不用喂了"</span>, name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                fullLevel <span class="token operator">=</span> fullLevel + FoodCount<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public  string Report<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">return</span> string.Format<span class="token punctuation">(</span><span class="token string">"健康值{0}，饱程度{1}"</span>,health,fullLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#之ref</title>
      <link href="/2019/01/13/c-zhi-ref/"/>
      <url>/2019/01/13/c-zhi-ref/</url>
      
        <content type="html"><![CDATA[<h2 id="C-之ref"><a href="#C-之ref" class="headerlink" title="C#之ref"></a>C#之ref</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>namespace @ref<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int i <span class="token operator">=</span> 0<span class="token punctuation">;</span>            TestParm<span class="token punctuation">(</span>ref i<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            string p <span class="token operator">=</span> <span class="token string">"没电了"</span><span class="token punctuation">;</span>            Test<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private static void TestParm<span class="token punctuation">(</span>ref int a<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            a <span class="token operator">=</span> 9<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private static void Test<span class="token punctuation">(</span> string p<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             p <span class="token operator">=</span>p+ <span class="token string">"测试"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private static void Test2<span class="token punctuation">(</span>Person person<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            person.name <span class="token operator">=</span> person.name + <span class="token string">"测试"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    class Person     <span class="token punctuation">{</span>        public string name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array应用经典冒泡</title>
      <link href="/2019/01/13/array-he-lambda-ying-yong-jing-dian-mou-pao/"/>
      <url>/2019/01/13/array-he-lambda-ying-yong-jing-dian-mou-pao/</url>
      
        <content type="html"><![CDATA[<h2 id="Array定义"><a href="#Array定义" class="headerlink" title="Array定义"></a>Array定义</h2><pre class=" language-bash"><code class="language-bash">    int<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> new int<span class="token punctuation">[</span>5<span class="token punctuation">]</span> <span class="token punctuation">{</span> 0, 1, 2, 3, 4 <span class="token punctuation">}</span><span class="token punctuation">;</span>    int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> new int<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> 0, 1, 2, 3, 4 <span class="token punctuation">}</span><span class="token punctuation">;</span>    int<span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token punctuation">{</span> 0, 1, 2, 3, 4 <span class="token punctuation">}</span><span class="token punctuation">;</span>    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"数组长度为：{0}"</span>, array.Length<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"数组长度为{0}"</span>, arr1.Length<span class="token punctuation">)</span><span class="token punctuation">;</span>    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"数组长度为{0}"</span>, arr2.Length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Array应用经典冒泡"><a href="#Array应用经典冒泡" class="headerlink" title="Array应用经典冒泡"></a>Array应用经典冒泡</h2><pre class=" language-bash"><code class="language-bash">   class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int<span class="token punctuation">[</span><span class="token punctuation">]</span> bub <span class="token operator">=</span> new int<span class="token punctuation">[</span>5<span class="token punctuation">]</span> <span class="token punctuation">{</span>10,20,30,40,50<span class="token punctuation">}</span><span class="token punctuation">;</span>            int temp<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bub.Length - 1<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bub.Length - 1 - i<span class="token punctuation">;</span> j++<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bub<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> bub<span class="token punctuation">[</span>j + 1<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        temp <span class="token operator">=</span> bub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        bub<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> bub<span class="token punctuation">[</span>j + 1<span class="token punctuation">]</span><span class="token punctuation">;</span>                        bub<span class="token punctuation">[</span>j + 1<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bub.Length<span class="token punctuation">;</span>i++ <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>bub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="Array冒泡简单写法"><a href="#Array冒泡简单写法" class="headerlink" title="Array冒泡简单写法"></a>Array冒泡简单写法</h2><pre class=" language-bash"><code class="language-bash">        int<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span> 2, 9, 5, 6, 8 <span class="token punctuation">}</span><span class="token punctuation">;</span>            Array.Sort<span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>int i <span class="token keyword">in</span> array<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>i.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><h2 id="lambda应用经典冒泡"><a href="#lambda应用经典冒泡" class="headerlink" title="lambda应用经典冒泡"></a>lambda应用经典冒泡</h2><pre class=" language-bash"><code class="language-bash">static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>               int<span class="token punctuation">[</span><span class="token punctuation">]</span> valus <span class="token operator">=</span> <span class="token punctuation">{</span> 12, -1, 32, 3, 5 <span class="token punctuation">}</span><span class="token punctuation">;</span>            //实现冒泡排序            foreach <span class="token punctuation">(</span>int i <span class="token keyword">in</span> valus.OrderBy<span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> i<span class="token punctuation">))</span> <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>当然用Linq也可以写，方式很多，就不一一写出来了</code></pre><h2 id="Array-冒泡之字符串顺序"><a href="#Array-冒泡之字符串顺序" class="headerlink" title="Array 冒泡之字符串顺序"></a>Array 冒泡之字符串顺序</h2><pre class=" language-bash"><code class="language-bash">static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">{</span>       string<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> new string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"长"</span>,<span class="token string">"大"</span>,<span class="token string">"江"</span>,<span class="token string">"设"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>       string temp<span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names.Length/2<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           temp <span class="token operator">=</span> names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           names<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> names<span class="token punctuation">[</span>names.Length - 1-i<span class="token punctuation">]</span><span class="token punctuation">;</span>           names<span class="token punctuation">[</span>names.Length -1- i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names.Length<span class="token punctuation">;</span>i++ <span class="token punctuation">)</span>        <span class="token punctuation">{</span>           Console.WriteLine<span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       //int age <span class="token operator">=</span> ReadInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       maobao<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><h2 id="Array-得奇偶"><a href="#Array-得奇偶" class="headerlink" title="Array 得奇偶"></a>Array 得奇偶</h2><pre class=" language-bash"><code class="language-bash">   int<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span> 4, 6, 7, 8, 9, 12, 13, 15 <span class="token punctuation">}</span><span class="token punctuation">;</span>            int total <span class="token operator">=</span> 0<span class="token punctuation">;</span>            int total1 <span class="token operator">=</span> 0<span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"偶数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> % 2 <span class="token operator">==</span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    total++<span class="token punctuation">;</span>                    Console.Write<span class="token punctuation">(</span><span class="token string">"{0}，"</span>, array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"\n奇数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> % 2 <span class="token operator">!=</span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    total1++<span class="token punctuation">;</span>                    Console.Write<span class="token punctuation">(</span><span class="token string">"{0}，"</span>, array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"\n偶数总数为{0}"</span>, total<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"奇数总数为{0}"</span>, total1<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.net web自带安全机制</title>
      <link href="/2019/01/13/asp.net-web-zi-dai-an-quan-ji-zhi/"/>
      <url>/2019/01/13/asp.net-web-zi-dai-an-quan-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="ASP-net-web自带安全机制"><a href="#ASP-net-web自带安全机制" class="headerlink" title="ASP.net web自带安全机制"></a>ASP.net web自带安全机制</h2><h2 id="Web-config配置"><a href="#Web-config配置" class="headerlink" title="Web.config配置"></a>Web.config配置</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>configuration<span class="token operator">></span>  <span class="token operator">&lt;</span>location path<span class="token operator">=</span><span class="token string">"defalut.aspx"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>system.web<span class="token operator">></span>      <span class="token operator">&lt;</span>authorization<span class="token operator">></span>        <span class="token operator">&lt;</span>allow users<span class="token operator">=</span><span class="token string">"?"</span>/<span class="token operator">></span>      <span class="token operator">&lt;</span>/authorization<span class="token operator">></span>    <span class="token operator">&lt;</span>/system.web<span class="token operator">></span>  <span class="token operator">&lt;</span>/location<span class="token operator">></span>  <span class="token operator">&lt;</span>location path<span class="token operator">=</span><span class="token string">"Cinema3D"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>system.web<span class="token operator">></span>      <span class="token operator">&lt;</span>authorization<span class="token operator">></span>        <span class="token operator">&lt;</span>deny users<span class="token operator">=</span><span class="token string">"2D"</span>/<span class="token operator">></span>      <span class="token operator">&lt;</span>/authorization<span class="token operator">></span>    <span class="token operator">&lt;</span>/system.web<span class="token operator">></span>  <span class="token operator">&lt;</span>/location<span class="token operator">></span>  <span class="token operator">&lt;</span>location path<span class="token operator">=</span><span class="token string">"student"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>system.web<span class="token operator">></span>      <span class="token operator">&lt;</span>authorization<span class="token operator">></span>        <span class="token operator">&lt;</span>allow  users<span class="token operator">=</span><span class="token string">"?"</span> /<span class="token operator">></span>      <span class="token operator">&lt;</span>/authorization<span class="token operator">></span>    <span class="token operator">&lt;</span>/system.web<span class="token operator">></span>  <span class="token operator">&lt;</span>/location<span class="token operator">></span>    <span class="token operator">&lt;</span>system.web<span class="token operator">></span>      <span class="token operator">&lt;</span>authentication mode<span class="token operator">=</span><span class="token string">"Forms"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>forms name<span class="token operator">=</span><span class="token string">"test"</span> loginUrl<span class="token operator">=</span><span class="token string">"index.aspx"</span> defaultUrl<span class="token operator">=</span><span class="token string">"defalut.aspx"</span> cookieless<span class="token operator">=</span><span class="token string">"AutoDetect"</span><span class="token operator">></span><span class="token operator">&lt;</span>/forms<span class="token operator">></span>      <span class="token operator">&lt;</span>/authentication<span class="token operator">></span>      <span class="token operator">&lt;</span>authorization<span class="token operator">></span>        <span class="token operator">&lt;</span>deny users<span class="token operator">=</span><span class="token string">"?"</span>/<span class="token operator">></span>      <span class="token operator">&lt;</span>/authorization<span class="token operator">></span>        <span class="token operator">&lt;</span>compilation debug<span class="token operator">=</span><span class="token string">"true"</span> targetFramework<span class="token operator">=</span><span class="token string">"4.0"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/system.web<span class="token operator">></span><span class="token operator">&lt;</span>/configuration<span class="token operator">></span></code></pre><h2 id="index"><a href="#index" class="headerlink" title="index"></a>index</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>html xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xhtml"</span><span class="token operator">></span><span class="token operator">&lt;</span>head runat<span class="token operator">=</span><span class="token string">"server"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span><span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>form id<span class="token operator">=</span><span class="token string">"form1"</span> runat<span class="token operator">=</span><span class="token string">"server"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>asp:DropDownList ID<span class="token operator">=</span><span class="token string">"DDLticket"</span> runat<span class="token operator">=</span><span class="token string">"server"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>asp:ListItem<span class="token operator">></span>3D<span class="token operator">&lt;</span>/asp:ListItem<span class="token operator">></span>            <span class="token operator">&lt;</span>asp:ListItem<span class="token operator">></span>2D<span class="token operator">&lt;</span>/asp:ListItem<span class="token operator">></span>            <span class="token operator">&lt;</span>asp:ListItem<span class="token operator">></span>学生区<span class="token operator">&lt;</span>/asp:ListItem<span class="token operator">></span>        <span class="token operator">&lt;</span>/asp:DropDownList<span class="token operator">></span>        <span class="token operator">&lt;</span>asp:TextBox ID<span class="token operator">=</span><span class="token string">"tbMoney"</span> runat<span class="token operator">=</span><span class="token string">"server"</span><span class="token operator">></span><span class="token operator">&lt;</span>/asp:TextBox<span class="token operator">></span>        <span class="token operator">&lt;</span>asp:Button ID<span class="token operator">=</span><span class="token string">"btnGo"</span> runat<span class="token operator">=</span><span class="token string">"server"</span> Text<span class="token operator">=</span><span class="token string">"Button"</span> onclick<span class="token operator">=</span><span class="token string">"btnGo_Click"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/form<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span>//cs类    protected void btnGo_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>this.DDLticket.Text <span class="token operator">==</span> <span class="token string">"2D"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>int.Parse<span class="token punctuation">(</span>this.tbMoney.Text<span class="token punctuation">)</span> <span class="token operator">>=</span> 30 <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    FormsAuthentication.RedirectFromLoginPage<span class="token punctuation">(</span><span class="token string">"2D"</span>, false<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>this.DDLticket.Text <span class="token operator">==</span> <span class="token string">"3D"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>int.Parse<span class="token punctuation">(</span>this.tbMoney.Text<span class="token punctuation">)</span> <span class="token operator">>=</span> 70<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    FormsAuthentication.RedirectFromLoginPage<span class="token punctuation">(</span><span class="token string">"3D"</span>, false<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>this.DDLticket.Text <span class="token operator">==</span> <span class="token string">"学生区"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单OOP-消费单计算</title>
      <link href="/2019/01/13/jian-dan-oop-xiao-fei-dan-ji-suan/"/>
      <url>/2019/01/13/jian-dan-oop-xiao-fei-dan-ji-suan/</url>
      
        <content type="html"><![CDATA[<h2 id="简单OOP-消费单计算"><a href="#简单OOP-消费单计算" class="headerlink" title="简单OOP-消费单计算"></a>简单OOP-消费单计算</h2><p><img src="/2019/01/13/jian-dan-oop-xiao-fei-dan-ji-suan/2.jpg" alt="图2"></p><pre class=" language-bash"><code class="language-bash">  class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">#region MyRegion</span>            //int days <span class="token operator">=</span> 46, zhoushu <span class="token operator">=</span> days / 7, leaveDays <span class="token operator">=</span> days % 7<span class="token punctuation">;</span>            //Console.WriteLine<span class="token punctuation">(</span><span class="token string">"46天计算的周数"</span>+zhoushu+<span class="token string">"周"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //Console.WriteLine<span class="token punctuation">(</span><span class="token string">"剩余天数"</span> + leaveDays+<span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //double radius <span class="token operator">=</span> 1.5<span class="token punctuation">;</span>            //Console.WriteLine<span class="token punctuation">(</span><span class="token string">"面积"</span> + radius * radius*3.1415926<span class="token punctuation">)</span><span class="token punctuation">;</span>            //int Apple <span class="token operator">=</span> 20<span class="token punctuation">;</span>            //double AppleL <span class="token operator">=</span> 9.8<span class="token punctuation">;</span>            //double now<span class="token operator">=</span>Apple+AppleL<span class="token punctuation">;</span>            //Console.WriteLine<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">#endregion</span>            int rate <span class="token operator">=</span> 8<span class="token punctuation">;</span> //打折后            Pay pNew <span class="token operator">=</span> new Pay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//申明变量            pNew.Name <span class="token operator">=</span> <span class="token string">"T恤"</span><span class="token punctuation">;</span>            pNew.Number <span class="token operator">=</span> 2<span class="token punctuation">;</span>            pNew.price <span class="token operator">=</span> 245<span class="token punctuation">;</span>           double SumMoney<span class="token operator">=</span> pNew.GetMpney<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Pay pNew2 <span class="token operator">=</span> new Pay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//申明变量           pNew2.Name <span class="token operator">=</span> <span class="token string">"网球鞋"</span><span class="token punctuation">;</span>           pNew2.Number <span class="token operator">=</span> 1<span class="token punctuation">;</span>           pNew2.price <span class="token operator">=</span> 570<span class="token punctuation">;</span>           SumMoney <span class="token operator">=</span>SumMoney+ pNew.GetMpney<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Pay pNew3 <span class="token operator">=</span> new Pay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//申明变量           pNew3.Name <span class="token operator">=</span> <span class="token string">"网球拍"</span><span class="token punctuation">;</span>           pNew3.Number <span class="token operator">=</span> 1<span class="token punctuation">;</span>           pNew3.price <span class="token operator">=</span> 320<span class="token punctuation">;</span>           SumMoney <span class="token operator">=</span>SumMoney+ pNew.GetMpney<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           double discount <span class="token operator">=</span> SumMoney * <span class="token punctuation">(</span>double<span class="token punctuation">)</span>rate / 10<span class="token punctuation">;</span>           Console.WriteLine<span class="token punctuation">(</span><span class="token string">"******消费单*******"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Console.WriteLine<span class="token punctuation">(</span><span class="token string">"购买商品\t单价\t购买数量\t金额"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           Console.WriteLine<span class="token punctuation">(</span>pNew.Name + <span class="token string">"\t\t"</span> + pNew.price + <span class="token string">"\t"</span> + pNew.Number + <span class="token string">"\t\t"</span> + pNew.GetMpney<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>           Console.WriteLine<span class="token punctuation">(</span>pNew2.Name + <span class="token string">"\t\t"</span> + pNew2.price + <span class="token string">"\t"</span> + pNew2.Number + <span class="token string">"\t\t"</span> + pNew2.GetMpney<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>           Console.WriteLine<span class="token punctuation">(</span>pNew3.Name + <span class="token string">"\t\t"</span> + pNew3.price + <span class="token string">"\t"</span> + pNew3.Number + <span class="token string">"\t\t"</span> + pNew3.GetMpney<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>           Console.WriteLine<span class="token punctuation">(</span><span class="token string">"打折后的金额："</span> + discount<span class="token punctuation">)</span><span class="token punctuation">;</span>           Console.WriteLine<span class="token punctuation">(</span><span class="token string">"消费总金额："</span> + SumMoney<span class="token punctuation">)</span><span class="token punctuation">;</span>          double Cmoney<span class="token punctuation">;</span>         Console.WriteLine<span class="token punctuation">(</span><span class="token string">"请输入客户实收金额："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         Cmoney <span class="token operator">=</span> Convert.ToDouble<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         Console.WriteLine<span class="token punctuation">(</span><span class="token string">"实收：\t"</span> + Cmoney <span class="token punctuation">)</span><span class="token punctuation">;</span>         Console.WriteLine<span class="token punctuation">(</span><span class="token string">"找零：\t"</span> + <span class="token variable"><span class="token punctuation">((</span>Cmoney <span class="token operator">-</span> discount<span class="token punctuation">)</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>          int score <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span>SumMoney/ 100 * 3<span class="token punctuation">;</span>          Console.WriteLine<span class="token punctuation">(</span><span class="token string">"积分："</span> + score<span class="token punctuation">)</span><span class="token punctuation">;</span>          Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"> class Pay     <span class="token punctuation">{</span> /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>      ///  参数，属性,获取购买的商品名称      /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>      public String Name<span class="token punctuation">;</span>       public int Number<span class="token punctuation">;</span>//个数      public double price<span class="token punctuation">;</span>//费用      public double GetMpney<span class="token punctuation">(</span><span class="token punctuation">)</span>  //定义方法，返回double        <span class="token punctuation">{</span>            double totalMoney <span class="token operator">=</span> <span class="token punctuation">(</span>double<span class="token punctuation">)</span>Number * price<span class="token punctuation">;</span>            <span class="token keyword">return</span> totalMoney<span class="token punctuation">;</span> //返回        <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#之重写</title>
      <link href="/2019/01/13/c-zhi-chong-xie/"/>
      <url>/2019/01/13/c-zhi-chong-xie/</url>
      
        <content type="html"><![CDATA[<h2 id="C-之重写"><a href="#C-之重写" class="headerlink" title="C#之重写"></a>C#之重写</h2><pre class=" language-bash"><code class="language-bash"> class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            person re <span class="token operator">=</span> new Human<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//声明父类实例化子类            Human hu <span class="token operator">=</span> new Human<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            re.SayHello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            hu.SayHello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">class person    <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">#region 姓名</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 姓名        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        private string name<span class="token punctuation">;</span>        public string Name        <span class="token punctuation">{</span>            get <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> name <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>        <span class="token comment" spellcheck="true">#region 年纪</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 年纪        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        private int age<span class="token punctuation">;</span>        public int Age        <span class="token punctuation">{</span>            get <span class="token punctuation">{</span> <span class="token keyword">return</span> age<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> age <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        <span class="token comment" spellcheck="true">#region 性别</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        ///性别        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        private bool sex<span class="token punctuation">;</span>        public bool Sex        <span class="token punctuation">{</span>            get <span class="token punctuation">{</span> <span class="token keyword">return</span> sex<span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">set</span> <span class="token punctuation">{</span> sex <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>        public virtual void SayHello<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        public person<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"> class Human <span class="token keyword">:</span> person    <span class="token punctuation">{</span>        public override void SayHello<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"nii"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         public Human<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>飞行棋</title>
      <link href="/2019/01/13/kong-zhi-ban-fei-xing-qi/"/>
      <url>/2019/01/13/kong-zhi-ban-fei-xing-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="控制板飞行棋"><a href="#控制板飞行棋" class="headerlink" title="控制板飞行棋"></a>控制板飞行棋</h2><p>博主闲的时候，写的一个小demo，控制板上玩飞行机，蛮简单，不复杂，分享给大家看，算是一个判断语句+循环语句的一个小应用<br></p><p><img src="/2019/01/13/kong-zhi-ban-fei-xing-qi/1.jpg" alt="图1"></p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>namespace 骑士飞行棋<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>   //在下面的数组储存我们游戏地图的各各关卡        //数组的下标为0的元素对应地图上的第1格，下标为1的元素对应第2格<span class="token punctuation">..</span>下标为n的元素对应n+1格        //在数组中用1：表示幸运轮盘○2：地雷☆3：暂停▲4：时空隧道卍 0：表示普通        static int<span class="token punctuation">[</span><span class="token punctuation">]</span> Map <span class="token operator">=</span> new int<span class="token punctuation">[</span>100<span class="token punctuation">]</span><span class="token punctuation">;</span>        static int<span class="token punctuation">[</span><span class="token punctuation">]</span> playerPos <span class="token operator">=</span> <span class="token punctuation">{</span> 0, 0 <span class="token punctuation">}</span><span class="token punctuation">;</span>//playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span>存玩家A的坐标，playerPos<span class="token punctuation">[</span>1<span class="token punctuation">]</span>存玩家B的坐标        static int step<span class="token punctuation">;</span>//储存骰子数        static string<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> new string<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">;</span>//names<span class="token punctuation">[</span>0<span class="token punctuation">]</span>为A，names<span class="token punctuation">[</span>1<span class="token punctuation">]</span>为B        static string msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>//记录信息,用户踩到某关卡输出的话        static  bool<span class="token punctuation">[</span><span class="token punctuation">]</span> Istop <span class="token operator">=</span> <span class="token punctuation">{</span> false, <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>//Istop<span class="token punctuation">[</span>0<span class="token punctuation">]</span>为A，Istop<span class="token punctuation">[</span>1<span class="token punctuation">]</span>为B        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ShowUI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"请输入玩家A的姓名？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>names<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"玩家A的姓名不能为空，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                names<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"请输入玩家B的姓名？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            names<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>names<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span> <span class="token operator">||</span> names<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">==</span> names<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"玩家B的姓名不能为空，请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">==</span> names<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"姓名以被玩家Ａ占用，重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                names<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ShowUI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"对战开始....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}用A来表示"</span>, names<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}用B来表示"</span>, names<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"当AB在同一位置时，用&lt;>来表示"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InitialMap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DrawMap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ResetColor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//重置颜色默认；            Console.WriteLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"游戏开始......"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">while</span> <span class="token punctuation">(</span>playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">&lt;</span> 99 <span class="token operator">&amp;&amp;</span> playerPos<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> 99<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"******************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}的位置为{1}"</span>, names<span class="token punctuation">[</span>0<span class="token punctuation">]</span>, playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + 1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}的位置为{1}"</span>, names<span class="token punctuation">[</span>1<span class="token punctuation">]</span>, playerPos<span class="token punctuation">[</span>1<span class="token punctuation">]</span> + 1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    if<span class="token punctuation">(</span>Istop<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">==</span>false<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                    action<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>//玩家A                    <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> Istop<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">>=</span>99<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console.ResetColor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//默认颜色                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"**************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}赢了"</span>,names<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Istop<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">==</span> false<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    action<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>//玩家B                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> Istop<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>playerPos<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">>=</span> 99<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console.ResetColor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//默认颜色                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"**************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{1}赢了"</span>, names<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                    Console.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    DrawMap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        Console.WriteLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Console.WriteLine<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// A,B摇骰子        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"playerNumber"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>         static void action<span class="token punctuation">(</span>int playerNumber<span class="token punctuation">)</span>         <span class="token punctuation">{</span>//1-playerNumber对方玩家,playerNumer当前            Random r <span class="token operator">=</span> new Random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//随机数            Console.WriteLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}按任意键开始掷骰子"</span>, names<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConsoleKeyInfo rec <span class="token operator">=</span> Console.ReadKey<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rec.Key <span class="token operator">==</span> ConsoleKey.Tab <span class="token operator">&amp;&amp;</span> rec.Modifiers <span class="token operator">==</span> ConsoleModifiers.Alt<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                step <span class="token operator">=</span> 99<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                step <span class="token operator">=</span> r.Next<span class="token punctuation">(</span>1, 7<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}掷出了：{1}"</span>, names<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span>, step<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>            playerPos<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span> <span class="token operator">=</span> playerPos<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span> + step<span class="token punctuation">;</span>//一旦发生改变就要判断坐标是否大于99            checkPos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">==</span> playerPos<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span>//玩家A踩到玩家B            <span class="token punctuation">{</span>                playerPos<span class="token punctuation">[</span>1-playerNumber<span class="token punctuation">]</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>                msg <span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"{0}踩到了{1},{1}退回原点"</span>, names<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span>, names<span class="token punctuation">[</span>1-playerNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                switch <span class="token punctuation">(</span>Map<span class="token punctuation">[</span>playerPos<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> 0: <span class="token keyword">break</span><span class="token punctuation">;</span>//普通，没效果                    <span class="token keyword">case</span> 1: Console.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        DrawMap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Console.WriteLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0}走到了幸运轮盘，请选择运气？"</span>, names<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        Console.WriteLine<span class="token punctuation">(</span><span class="token string">"1--交换位置，2--轰炸对方"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        int userSelect <span class="token operator">=</span> ReadInt<span class="token punctuation">(</span>1, 2<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>userSelect <span class="token operator">==</span> 1<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            int temp <span class="token operator">=</span> playerPos<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span><span class="token punctuation">;</span>                            playerPos<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span> <span class="token operator">=</span> playerPos<span class="token punctuation">[</span>1-playerNumber<span class="token punctuation">]</span><span class="token punctuation">;</span>                            playerPos<span class="token punctuation">[</span>1-playerNumber<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                            msg <span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"{0}选择了与对方交换位置"</span>, names<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>//交换位置                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>userSelect <span class="token operator">==</span> 2<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            playerPos<span class="token punctuation">[</span>1-playerNumber<span class="token punctuation">]</span> <span class="token operator">=</span> playerPos<span class="token punctuation">[</span>1-playerNumber<span class="token punctuation">]</span> - 6<span class="token punctuation">;</span>                            checkPos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            msg <span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"{0}轰炸了{1}，{1}退回6格"</span>, names<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span>, names<span class="token punctuation">[</span>1-playerNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//轰炸对方                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> 2:                        playerPos<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span> <span class="token operator">=</span> playerPos<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span> - 6<span class="token punctuation">;</span>                        checkPos<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        msg <span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"{0}踩到了地雷，退6格"</span>, names<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>//踩到地雷                    <span class="token keyword">case</span> 3:                        Istop<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>//暂停一次                        msg <span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"{0}暂停一次"</span>, names<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>//暂停一次                    <span class="token keyword">case</span> 4: playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + 10<span class="token punctuation">;</span>                        msg <span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"{0}进入时空隧道，进10步"</span>, names<span class="token punctuation">[</span>playerNumber<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>//时空隧道                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DrawMap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Console.WriteLine<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 用来绘制飞行棋的名称        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        private static void ShowUI<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"*                                              *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"*          骑  士  飞  行  棋                  *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"*                                              *"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"************************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 初始化        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        static void InitialMap<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int<span class="token punctuation">[</span><span class="token punctuation">]</span> luckyTrun <span class="token operator">=</span> <span class="token punctuation">{</span> 6, 23, 40, 55, 69, 83, 98 <span class="token punctuation">}</span><span class="token punctuation">;</span>//幸运轮盘1            int<span class="token punctuation">[</span><span class="token punctuation">]</span> landNine <span class="token operator">=</span> <span class="token punctuation">{</span> 5, 13, 17, 33, 38, 50, 64, 80, 94 <span class="token punctuation">}</span><span class="token punctuation">;</span>//地雷2            int<span class="token punctuation">[</span><span class="token punctuation">]</span> pause <span class="token operator">=</span> <span class="token punctuation">{</span> 9, 27, 60, 93 <span class="token punctuation">}</span><span class="token punctuation">;</span>//暂停坐标3            int<span class="token punctuation">[</span><span class="token punctuation">]</span> timeTunnel <span class="token operator">=</span> <span class="token punctuation">{</span> 20, 25, 45, 63, 72, 88, 90 <span class="token punctuation">}</span><span class="token punctuation">;</span>//时空隧道4            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> luckyTrun.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Map<span class="token punctuation">[</span>luckyTrun<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> 1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> landNine.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Map<span class="token punctuation">[</span>landNine<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> 2<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pause.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Map<span class="token punctuation">[</span>pause<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> 3<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> timeTunnel.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Map<span class="token punctuation">[</span>timeTunnel<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> 4<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 绘        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pos"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        static string GetMapString<span class="token punctuation">(</span>int pos<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">==</span> pos <span class="token operator">&amp;&amp;</span> playerPos<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">==</span> pos<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token string">"&lt;>"</span><span class="token punctuation">;</span>                Console.ForegroundColor <span class="token operator">=</span> ConsoleColor.Yellow<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">==</span> pos<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token string">"Ａ"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>playerPos<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">==</span> pos<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token string">"Ｂ"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                switch <span class="token punctuation">(</span>Map<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span> //1：表示幸运轮盘○2：地雷☆3：暂停▲4：时空隧道卍 0：表示普通                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> 0: result <span class="token operator">=</span> <span class="token string">"□"</span><span class="token punctuation">;</span>                        Console.ForegroundColor <span class="token operator">=</span> ConsoleColor.White<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> 1: result <span class="token operator">=</span> <span class="token string">"○"</span><span class="token punctuation">;</span>                        Console.ForegroundColor <span class="token operator">=</span> ConsoleColor.DarkCyan<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> 2: result <span class="token operator">=</span> <span class="token string">"☆"</span><span class="token punctuation">;</span>                        Console.ForegroundColor <span class="token operator">=</span> ConsoleColor.DarkMagenta<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> 3: result <span class="token operator">=</span> <span class="token string">"▲"</span><span class="token punctuation">;</span>                        Console.ForegroundColor <span class="token operator">=</span> ConsoleColor.Cyan<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> 4: result <span class="token operator">=</span> <span class="token string">"卍"</span><span class="token punctuation">;</span>                        Console.ForegroundColor <span class="token operator">=</span> ConsoleColor.DarkCyan<span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 绘制地图        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        static void DrawMap<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>//画第一行，绘制0-29地图            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"○：表示幸运轮盘  ☆：地雷  ▲：暂停  卍：时空隧道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> 29<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.Write<span class="token punctuation">(</span>GetMapString<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //画第一列，绘制30-34地图            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 30<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> 34<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> 29<span class="token punctuation">;</span> j++<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.Write<span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>                Console.WriteLine<span class="token punctuation">(</span>GetMapString<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            //画35-64地图            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 64<span class="token punctuation">;</span> i <span class="token operator">>=</span> 35<span class="token punctuation">;</span> i--<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.Write<span class="token punctuation">(</span>GetMapString<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //画65-69地图            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 65<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> 69<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>GetMapString<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            //画70-99地图            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 70<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> 99<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.Write<span class="token punctuation">(</span>GetMapString<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        //static int ReadInt<span class="token punctuation">(</span><span class="token punctuation">)</span>        //<span class="token punctuation">{</span>        //    int i <span class="token operator">=</span> ReadInt<span class="token punctuation">(</span>int.MinValue, int.MaxValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        //    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        //<span class="token punctuation">}</span>        static int ReadInt<span class="token punctuation">(</span>int min, int max<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int number <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 100<span class="token punctuation">;</span> j <span class="token operator">></span> 0<span class="token punctuation">;</span> j--<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                try                <span class="token punctuation">{</span>                    number <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                catch <span class="token punctuation">(</span>Exception<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"只能输入数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> min <span class="token operator">||</span> number <span class="token operator">></span> max<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"只能输入{0}-{1}之间的数字"</span>, min, max<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> number<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 检查        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        private static void checkPos<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">></span> 99 <span class="token operator">||</span> playerPos<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">></span> 99<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> 99<span class="token punctuation">;</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你赢了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">&lt;</span> 0 <span class="token operator">||</span> playerPos<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                playerPos<span class="token punctuation">[</span>0<span class="token punctuation">]</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        //private static string<span class="token punctuation">[</span><span class="token punctuation">]</span> tong<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> a,string<span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">)</span>        //<span class="token punctuation">{</span>        //<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>while/for/if 应用</title>
      <link href="/2019/01/12/while-for-if-ying-yong/"/>
      <url>/2019/01/12/while-for-if-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h2 id="1-100while求和"><a href="#1-100while求和" class="headerlink" title="1-100while求和"></a>1-100while求和</h2><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Sum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void Sum<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int i <span class="token operator">=</span> 2<span class="token punctuation">;</span>            int <span class="token function">sum</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token keyword">do</span>            <span class="token punctuation">{</span>                <span class="token function">sum</span> <span class="token operator">=</span> <span class="token function">sum</span> + i<span class="token punctuation">;</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"i等于"</span> + i + <span class="token string">"时sum为"</span> + <span class="token function">sum</span> + <span class="token string">"。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> i + 2<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> 100<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"1-10的偶数之和为"</span> + sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="for-得奇偶数"><a href="#for-得奇偶数" class="headerlink" title="for 得奇偶数"></a>for 得奇偶数</h2><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span> 4, 6, 7, 8, 9, 12, 13, 15 <span class="token punctuation">}</span><span class="token punctuation">;</span>            int total <span class="token operator">=</span> 0<span class="token punctuation">;</span>            int total1 <span class="token operator">=</span> 0<span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"偶数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> % 2 <span class="token operator">==</span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    total++<span class="token punctuation">;</span>                    Console.Write<span class="token punctuation">(</span><span class="token string">"{0}，"</span>, array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>                      Console.WriteLine<span class="token punctuation">(</span><span class="token string">"\n奇数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> % 2 <span class="token operator">!=</span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    total1++<span class="token punctuation">;</span>                    Console.Write<span class="token punctuation">(</span><span class="token string">"{0}，"</span>, array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"\n偶数总数为{0}"</span>, total<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"奇数总数为{0}"</span>, total1<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="for-打印菱形"><a href="#for-打印菱形" class="headerlink" title="for 打印菱形"></a>for 打印菱形</h2><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //int blank<span class="token punctuation">;</span> //空格            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"输入菱形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            int total<span class="token operator">=</span>int.Parse<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 1<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> total<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>             <span class="token punctuation">{</span>    //空格                <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> total - i<span class="token punctuation">;</span> j <span class="token operator">>=</span> 1<span class="token punctuation">;</span> j--<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    Console.Write<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                //数字                <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> 2 * i - 1<span class="token punctuation">;</span> j++<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    Console.Write<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> total-1<span class="token punctuation">;</span> i <span class="token operator">>=</span> 1<span class="token punctuation">;</span> i--<span class="token punctuation">)</span>            <span class="token punctuation">{</span>    //空格                <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> total - i<span class="token punctuation">;</span> j <span class="token operator">>=</span> 1<span class="token punctuation">;</span> j--<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.Write<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                //数字                <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> 2 * i - 1<span class="token punctuation">;</span> j++<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    Console.Write<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="if-判断大小写字母"><a href="#if-判断大小写字母" class="headerlink" title="if 判断大小写字母"></a>if 判断大小写字母</h2><pre class=" language-bash"><code class="language-bash">class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"请输入一个字母"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            char ch <span class="token operator">=</span> <span class="token punctuation">(</span>char<span class="token punctuation">)</span>Console.Read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>ch <span class="token operator">>=</span><span class="token string">'A'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你输入的为大写字母"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">>=</span><span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你输入的为小写字母"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                 Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你输入的不是字母"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="if-只能输1-2"><a href="#if-只能输1-2" class="headerlink" title="if 只能输1-2"></a>if 只能输1-2</h2><pre class=" language-bash"><code class="language-bash"> class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int i <span class="token operator">=</span> ReadInt<span class="token punctuation">(</span>1, 2<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> 1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"1dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> 2<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"2dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static int ReadInt<span class="token punctuation">(</span>int min, int max<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                    int number <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span>min <span class="token operator">||</span> number <span class="token operator">></span> max<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        Console.WriteLine<span class="token punctuation">(</span><span class="token string">"只能输入{0}-{1}之间的数字"</span>, min, max<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span> number<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><pre class=" language-bash"><code class="language-bash"> class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //username<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private static void message<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"Myshopping管理系统>客户信息管理>添加客户信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"情输入会员号（只能是4位）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            double member <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 7<span class="token punctuation">;</span> i <span class="token operator">></span> 0<span class="token punctuation">;</span> i--<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>member <span class="token operator">></span> 999 <span class="token operator">&amp;&amp;</span> member <span class="token operator">&lt;</span> 9999<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"情输入会员生日（月/日《用两位整数表示》）："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    string  birthday <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"情输入会员积分："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    double integral <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"您输入的会员信息{0}，{1}，{2}"</span>, member, birthday, integral<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"输入错误，情重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你还有的次数"</span>+i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    member <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>             public static void username<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string username <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">;</span>            string <span class="token function">pwd</span> <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>            string user<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 2<span class="token punctuation">;</span> i <span class="token operator">>=</span> 0<span class="token punctuation">;</span> i--<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"请输入账户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                user <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                string pw<span class="token punctuation">;</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"请输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pw <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username.Equals<span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">||</span> pwd.Equals<span class="token punctuation">(</span>pw<span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"欢迎登入shopping系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                 <span class="token punctuation">{</span>                    Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你还有"</span>+i+<span class="token string">"机会"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"对不起你3次都输入错误了，30分钟后在登入吧！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汽车租赁管理系统</title>
      <link href="/2019/01/11/qi-che-zu-ren-guan-li-xi-tong/"/>
      <url>/2019/01/11/qi-che-zu-ren-guan-li-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="汽车租赁管理系统"><a href="#汽车租赁管理系统" class="headerlink" title="汽车租赁管理系统"></a>汽车租赁管理系统</h2><p>一个小demo写的蛮简单，主要练习用，写了2个版本，一个是把数据存到数据库的版本，一个把数据存到本地文件的版本<br><img src="/2019/01/11/qi-che-zu-ren-guan-li-xi-tong/1.jpg" alt="图1"><br><img src="/2019/01/11/qi-che-zu-ren-guan-li-xi-tong/2.jpg" alt="图2"><br><img src="/2019/01/11/qi-che-zu-ren-guan-li-xi-tong/3.jpg" alt="图3"><br><img src="/2019/01/11/qi-che-zu-ren-guan-li-xi-tong/4.jpg" alt="图4"></p><h2 id="数据存到本地文件的版本核心代码"><a href="#数据存到本地文件的版本核心代码" class="headerlink" title="数据存到本地文件的版本核心代码"></a>数据存到本地文件的版本核心代码</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.Collections<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>using System.Runtime.Serialization.Formatters.Binary<span class="token punctuation">;</span>namespace Car<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        TrafficInfo tNew<span class="token punctuation">;</span>//父类        XRentManager m_RM <span class="token operator">=</span> new XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//实例化一个管理类对象        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnAdd_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            TraMessage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//入库信息        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 入库信息        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public void TraMessage<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">#region 为空判断</span>            Dictionary<span class="token operator">&lt;</span>string, string<span class="token operator">></span> dicTracffic <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"车牌号"</span>, txtNumber.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"车名"</span>, txtName.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"车颜色"</span>, cbColor.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"使用时间"</span>, txtTime.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"租金"</span>, txtMoney.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"载重量"</span>, txtLoad.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>string str <span class="token keyword">in</span> dicTracffic.Keys<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dicTracffic<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> //str就是K,dicTracffic<span class="token punctuation">[</span>str<span class="token punctuation">]</span>就是值                <span class="token punctuation">{</span>                    MessageBox.Show<span class="token punctuation">(</span>string.Format<span class="token punctuation">(</span><span class="token string">"请输入{0}"</span>, str<span class="token punctuation">))</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#endregion</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rdoCar.Checked <span class="token operator">==</span> true<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tNew <span class="token operator">=</span> new Xcar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创立对象            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rdoTruck.Checked <span class="token operator">==</span> true<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tNew <span class="token operator">=</span> new XTruck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tNew.Number <span class="token operator">=</span> txtNumber.Text<span class="token punctuation">;</span>//车牌号码            tNew.Name <span class="token operator">=</span> txtName.Text<span class="token punctuation">;</span>//车名            tNew.Color <span class="token operator">=</span> cbColor.Text<span class="token punctuation">;</span>//车颜色            tNew.Time <span class="token operator">=</span> txtTime.Text<span class="token punctuation">;</span>//使用时间            tNew.Money <span class="token operator">=</span> int.Parse<span class="token punctuation">(</span>txtMoney.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>//租金            tNew.Load <span class="token operator">=</span> txtLoad.Text<span class="token punctuation">;</span>//载重            try            <span class="token punctuation">{</span>                m_RM.InputLibry<span class="token punctuation">(</span>tNew<span class="token punctuation">)</span><span class="token punctuation">;</span>//可以出租的车集合            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox.Show<span class="token punctuation">(</span>ex.Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                txtNumber.Text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                txtNumber.Focus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            addTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            this.tabControl1.SelectedTab <span class="token operator">=</span> tpRent<span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 刷新租车集合        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public void addTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listHire.Items.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>TrafficInfo t <span class="token keyword">in</span> m_RM.DicMyTraffics.Values<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ListViewItem lv <span class="token operator">=</span> new ListViewItem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//显示项                lv.Text <span class="token operator">=</span> t.Number<span class="token punctuation">;</span>                ListViewItem.ListViewSubItem<span class="token punctuation">[</span><span class="token punctuation">]</span> lvs<span class="token punctuation">;</span>                lvs <span class="token operator">=</span> new ListViewItem.ListViewSubItem<span class="token punctuation">[</span>5<span class="token punctuation">]</span>//显示子项                     <span class="token punctuation">{</span>                       new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token punctuation">}</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Name<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Color<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Time.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Money.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Load<span class="token punctuation">;</span>                listHire.Items.Add<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.SubItems.AddRange<span class="token punctuation">(</span>lvs<span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.Tag <span class="token operator">=</span> t<span class="token punctuation">;</span>                lv.ImageKey <span class="token operator">=</span> <span class="token string">"1.png"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 刷新还车集合        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public void backTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listback.Items.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>TrafficInfo t <span class="token keyword">in</span> m_RM.DicRenteds.Values<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ListViewItem lv <span class="token operator">=</span> new ListViewItem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//显示项                lv.Text <span class="token operator">=</span> t.Number<span class="token punctuation">;</span>                ListViewItem.ListViewSubItem<span class="token punctuation">[</span><span class="token punctuation">]</span> lvs<span class="token punctuation">;</span>                lvs <span class="token operator">=</span> new ListViewItem.ListViewSubItem<span class="token punctuation">[</span>7<span class="token punctuation">]</span>//显示子项                     <span class="token punctuation">{</span>                       new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token punctuation">}</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Name<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Color<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Time.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Money.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Load<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>5<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.tenement<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>6<span class="token punctuation">]</span>.Text <span class="token operator">=</span> dateTime.Text<span class="token punctuation">;</span>                lv.SubItems.AddRange<span class="token punctuation">(</span>lvs<span class="token punctuation">)</span><span class="token punctuation">;</span>                listback.Items.Add<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.Tag <span class="token operator">=</span> t<span class="token punctuation">;</span>                lv.ImageKey <span class="token operator">=</span> <span class="token string">"1.png"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region 选择车的Load判断</span>        private void rdoCar_CheckedChanged<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rdoCar.Checked <span class="token operator">==</span> true<span class="token punctuation">)</span>//选上            <span class="token punctuation">{</span>                this.txtLoad.Text <span class="token operator">=</span> <span class="token string">"--无--"</span><span class="token punctuation">;</span>                this.txtLoad.ReadOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                this.txtLoad.Cursor <span class="token operator">=</span> Cursors.No<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rdoTruck.Checked <span class="token operator">==</span> true<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                this.txtLoad.Text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                this.txtLoad.ReadOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                this.txtLoad.Cursor <span class="token operator">=</span> Cursors.IBeam<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 标题        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void Form1_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dateTime.Text <span class="token operator">=</span> DateTime.Now.ToString<span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">#region 租车头部显示  </span>            ColumnHeader colNumeber, colName, colColor, colTime, colMoney, colLoad<span class="token punctuation">;</span>            ColumnHeader<span class="token punctuation">[</span><span class="token punctuation">]</span> chArr <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">[</span>6<span class="token punctuation">]</span>            <span class="token punctuation">{</span>                 colNumeber <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colName <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colColor <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colTime <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colMoney <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colLoad <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            colTime.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> colLoad.Width <span class="token operator">=</span> 60<span class="token punctuation">;</span> colNumeber.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> colName.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车牌号"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车名"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车颜色"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"使用时间"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"租金"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>5<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"载重量"</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>ColumnHeader ch <span class="token keyword">in</span> chArr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ch.TextAlign <span class="token operator">=</span> HorizontalAlignment.Center<span class="token punctuation">;</span>//居中            <span class="token punctuation">}</span>            listHire.Columns.AddRange<span class="token punctuation">(</span>chArr<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">#endregion</span>            <span class="token comment" spellcheck="true">#region 还车头部显示</span>            ColumnHeader colBNumeber, colBName, colBColor, colBTime, colBMoney, colBLoad, colBtenant, coldateTime<span class="token punctuation">;</span>            ColumnHeader<span class="token punctuation">[</span><span class="token punctuation">]</span> chBack <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">[</span>8<span class="token punctuation">]</span>            <span class="token punctuation">{</span>                 colBNumeber <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBName <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBColor <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBTime <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBMoney <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBLoad <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBtenant <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 coldateTime <span class="token operator">=</span>new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            colBTime.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> colBLoad.Width <span class="token operator">=</span> 60<span class="token punctuation">;</span> colBNumeber.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> colBName.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> coldateTime.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车牌号"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车名"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车颜色"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"使用时间"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"租金"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>5<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"载重量"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>6<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"租户"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>7<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"出租时间"</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>ColumnHeader ch <span class="token keyword">in</span> chBack<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ch.TextAlign <span class="token operator">=</span> HorizontalAlignment.Center<span class="token punctuation">;</span>//居中            <span class="token punctuation">}</span>            listback.Columns.AddRange<span class="token punctuation">(</span>chBack<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">#endregion</span>            <span class="token comment" spellcheck="true">#region 反序列化</span>            FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"Students.bin"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>            BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fs.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                m_RM <span class="token operator">=</span> bf.Deserialize<span class="token punctuation">(</span>fs<span class="token punctuation">)</span> as XRentManager<span class="token punctuation">;</span>//反序列化            <span class="token punctuation">}</span>            bf <span class="token operator">=</span> null<span class="token punctuation">;</span>            fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">#endregion</span>            backTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//还车            addTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//租车        <span class="token punctuation">}</span>        //出租        private void btnHire_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>listHire.SelectedItems.Count <span class="token operator">==</span> 0<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>//判断下            TrafficInfo listback <span class="token operator">=</span> listHire.SelectedItems<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Tag as TrafficInfo<span class="token punctuation">;</span>            listback.tenement <span class="token operator">=</span> txtUser.Text<span class="token punctuation">;</span>            listback.datatime <span class="token operator">=</span> dateTime.Text<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txtUser.Text <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span> MessageBox.Show<span class="token punctuation">(</span><span class="token string">"情输入租户姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> txtUser.Focus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            m_RM.Rent<span class="token punctuation">(</span>listback<span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"出租成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            this.tabControl1.SelectedTab <span class="token operator">=</span> tpReturn<span class="token punctuation">;</span>            backTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//还车            addTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//租车        <span class="token punctuation">}</span>        //金额简单结算        private void btnBalance_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txtDays.Text <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span> MessageBox.Show<span class="token punctuation">(</span><span class="token string">"情输入租用时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> txtDays.Focus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            TrafficInfo list <span class="token operator">=</span> listback.SelectedItems<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Tag as TrafficInfo<span class="token punctuation">;</span>            int days <span class="token operator">=</span> int.Parse<span class="token punctuation">(</span>txtDays.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            double prise <span class="token operator">=</span> list.Money<span class="token punctuation">;</span>            double total <span class="token operator">=</span> days * prise<span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"总计费用"</span>+total<span class="token punctuation">)</span><span class="token punctuation">;</span>            TrafficInfo listHire <span class="token operator">=</span> listback.SelectedItems<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Tag as TrafficInfo<span class="token punctuation">;</span>            m_RM.InputLibry<span class="token punctuation">(</span>listHire<span class="token punctuation">)</span><span class="token punctuation">;</span>//            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"已还车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            this.tabControl1.SelectedTab <span class="token operator">=</span> tpRent<span class="token punctuation">;</span>//转向            backTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//还车            addTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//租车        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 序列化存进2进制流        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"fileName"</span><span class="token operator">></span>路径<span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void LoadDate<span class="token punctuation">(</span>string fileName<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">#region 序列化</span>            FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span>fileName, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>            BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创建序列化            bf.Serialize<span class="token punctuation">(</span>fs, m_RM<span class="token punctuation">)</span><span class="token punctuation">;</span>//保存            bf <span class="token operator">=</span> null<span class="token punctuation">;</span>            fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">#endregion</span>        <span class="token punctuation">}</span>        private void Form1_FormClosed<span class="token punctuation">(</span>object sender, FormClosedEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            this.LoadDate<span class="token punctuation">(</span><span class="token string">"Students.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region 视图</span>        private void MenuLarge_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listHire.View <span class="token operator">=</span> View.LargeIcon<span class="token punctuation">;</span>            listHire.View <span class="token operator">=</span> View.LargeIcon<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void MenuSmall_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listHire.View <span class="token operator">=</span> View.SmallIcon<span class="token punctuation">;</span>            listHire.View <span class="token operator">=</span> View.SmallIcon<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void MenuPart_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listHire.View <span class="token operator">=</span> View.Details<span class="token punctuation">;</span>            listHire.View <span class="token operator">=</span> View.Details<span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">#endregion</span>        private void btnExit_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            this.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 删        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btnDelete_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //TrafficInfo delect <span class="token operator">=</span> listHire.SelectedItems<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Tag as TrafficInfo<span class="token punctuation">;</span>            //m_RM.DicMyTraffics.Remove<span class="token punctuation">(</span>delect.Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            int count <span class="token operator">=</span> listHire.SelectedItems.Count<span class="token punctuation">;</span>            string key <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                key <span class="token operator">=</span> listHire.SelectedItems<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.Text<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>m_RM.DicMyTraffics.ContainsKey<span class="token punctuation">(</span>key<span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    m_RM.DicMyTraffics.Remove<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            addTraffic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//租车        <span class="token punctuation">}</span>        private void dateTime_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="数据存到sqlserver的版本核心代码"><a href="#数据存到sqlserver的版本核心代码" class="headerlink" title="数据存到sqlserver的版本核心代码"></a>数据存到sqlserver的版本核心代码</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.Collections<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>using System.Runtime.Serialization.Formatters.Binary<span class="token punctuation">;</span>using Car.DAL<span class="token punctuation">;</span>using Car.BLL<span class="token punctuation">;</span>using Car.Model<span class="token punctuation">;</span>namespace Car<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        TrafficInfo tNew<span class="token punctuation">;</span>//父类        XRentManager m_RM<span class="token punctuation">;</span>//管理类        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnAdd_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            TraMessage<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//入库信息        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 入库信息        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public void TraMessage<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string <span class="token function">type</span> <span class="token operator">=</span> rdoTruck.Checked <span class="token operator">==</span> <span class="token boolean">true</span> ? <span class="token string">"Truck"</span> <span class="token keyword">:</span> <span class="token string">"Car"</span><span class="token punctuation">;</span>            tNew <span class="token operator">=</span> TrafficFactoruy.CreatNewTraffic<span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span> //工厂模式            <span class="token comment" spellcheck="true">#region 为空判断</span>            Dictionary<span class="token operator">&lt;</span>string, string<span class="token operator">></span> dicTracffic <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"车牌号"</span>, txtNumber.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"车名"</span>, txtName.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"车颜色"</span>, cbColor.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"使用时间"</span>, txtTime.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"租金"</span>, txtMoney.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            dicTracffic.Add<span class="token punctuation">(</span><span class="token string">"载重量"</span>, txtLoad.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>string str <span class="token keyword">in</span> dicTracffic.Keys<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dicTracffic<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> //str就是K,dicTracffic<span class="token punctuation">[</span>str<span class="token punctuation">]</span>就是值                <span class="token punctuation">{</span>                    MessageBox.Show<span class="token punctuation">(</span>string.Format<span class="token punctuation">(</span><span class="token string">"请输入{0}"</span>, str<span class="token punctuation">))</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">#endregion</span>            <span class="token comment" spellcheck="true">#region 非工厂模式创立对象</span>            //if <span class="token punctuation">(</span>rdoCar.Checked <span class="token operator">==</span> true<span class="token punctuation">)</span>            //<span class="token punctuation">{</span>            //    tNew <span class="token operator">=</span> new Xcar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创立对象            //<span class="token punctuation">}</span>            //if <span class="token punctuation">(</span>rdoTruck.Checked <span class="token operator">==</span> true<span class="token punctuation">)</span>            //<span class="token punctuation">{</span>            //    tNew <span class="token operator">=</span> new XTruck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //<span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">#endregion</span>            tNew.Number <span class="token operator">=</span> txtNumber.Text<span class="token punctuation">;</span>//车牌号码            tNew.Name <span class="token operator">=</span> txtName.Text<span class="token punctuation">;</span>//车名            tNew.Color <span class="token operator">=</span> cbColor.Text<span class="token punctuation">;</span>//车颜色            tNew.Time <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>txtTime.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>//使用时间            tNew.Money <span class="token operator">=</span> int.Parse<span class="token punctuation">(</span>txtMoney.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>//租金            tNew.Load <span class="token operator">=</span> txtLoad.Text<span class="token punctuation">;</span>//载重            <span class="token comment" spellcheck="true">#region 新增数据</span>            TrafficBLL insertBLL <span class="token operator">=</span> new TrafficBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tNew is Xcar<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                insertBLL.AddNewTrafficToDbase<span class="token punctuation">(</span>tNew, 1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                insertBLL.AddNewTrafficToDbase<span class="token punctuation">(</span>tNew, 2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"增加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">#endregion</span>            addMyTrafficShow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查到数据然后刷新            this.tabControl1.SelectedTab <span class="token operator">=</span> tpRent<span class="token punctuation">;</span>//跳过去        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region 选择车的Load判断</span>        private void rdoCar_CheckedChanged<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rdoCar.Checked <span class="token operator">==</span> true<span class="token punctuation">)</span>//选上            <span class="token punctuation">{</span>                this.txtLoad.Text <span class="token operator">=</span> <span class="token string">"--无--"</span><span class="token punctuation">;</span>                this.txtLoad.ReadOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                this.txtLoad.Cursor <span class="token operator">=</span> Cursors.No<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rdoTruck.Checked <span class="token operator">==</span> true<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                this.txtLoad.Text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                this.txtLoad.ReadOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                this.txtLoad.Cursor <span class="token operator">=</span> Cursors.IBeam<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 标题        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void Form1_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //dateTime.Text <span class="token operator">=</span> DateTime.Now.ToString<span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dateTime.Text <span class="token operator">=</span> DateTime.Now.ToString<span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//拿到时间所有            <span class="token comment" spellcheck="true">#region 租车头部显示  </span>            ColumnHeader colNumeber, colName, colColor, colTime, colMoney, colLoad<span class="token punctuation">;</span>            ColumnHeader<span class="token punctuation">[</span><span class="token punctuation">]</span> chArr <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">[</span>6<span class="token punctuation">]</span>            <span class="token punctuation">{</span>                 colNumeber <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colName <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colColor <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colTime <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colMoney <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colLoad <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            colTime.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> colLoad.Width <span class="token operator">=</span> 60<span class="token punctuation">;</span> colNumeber.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> colName.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车牌号"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车名"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车颜色"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"使用时间"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"租金"</span><span class="token punctuation">;</span>            chArr<span class="token punctuation">[</span>5<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"载重量"</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>ColumnHeader ch <span class="token keyword">in</span> chArr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ch.TextAlign <span class="token operator">=</span> HorizontalAlignment.Center<span class="token punctuation">;</span>//居中            <span class="token punctuation">}</span>            listHire.Columns.AddRange<span class="token punctuation">(</span>chArr<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">#endregion</span>            <span class="token comment" spellcheck="true">#region 还车头部显示</span>            ColumnHeader colBNumeber, colBName, colBColor, colBTime, colBMoney, colBLoad, colBtenant, coldateTime<span class="token punctuation">;</span>            ColumnHeader<span class="token punctuation">[</span><span class="token punctuation">]</span> chBack <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">[</span>8<span class="token punctuation">]</span>            <span class="token punctuation">{</span>                 colBNumeber <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBName <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBColor <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBTime <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBMoney <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBLoad <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 colBtenant <span class="token operator">=</span> new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>,                 coldateTime <span class="token operator">=</span>new ColumnHeader<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            colBTime.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> colBLoad.Width <span class="token operator">=</span> 60<span class="token punctuation">;</span> colBNumeber.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> colBName.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span> coldateTime.Width <span class="token operator">=</span> 100<span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车牌号"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车名"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"车颜色"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"使用时间"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"租金"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>5<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"载重量"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>6<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"租户"</span><span class="token punctuation">;</span>            chBack<span class="token punctuation">[</span>7<span class="token punctuation">]</span>.Text <span class="token operator">=</span> <span class="token string">"出租时间"</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>ColumnHeader ch <span class="token keyword">in</span> chBack<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ch.TextAlign <span class="token operator">=</span> HorizontalAlignment.Center<span class="token punctuation">;</span>//居中            <span class="token punctuation">}</span>            listback.Columns.AddRange<span class="token punctuation">(</span>chBack<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">#endregion</span>            addMyTrafficShow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             addMyRentShow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 加到租车listHire集合然后显示出来/刷新租车表        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public void addMyTrafficShow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listHire.Items.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             m_RM <span class="token operator">=</span> new XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//实例化一个管理类对象             TrafficBLL showBLL <span class="token operator">=</span> new TrafficBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             showBLL.showTraffic<span class="token punctuation">(</span>tNew, m_RM<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>TrafficInfo t <span class="token keyword">in</span> m_RM.DicMyTraffics.Values<span class="token punctuation">)</span>//显示子项            <span class="token punctuation">{</span>                ListViewItem lv <span class="token operator">=</span> new ListViewItem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.Text <span class="token operator">=</span> t.Number<span class="token punctuation">;</span>                ListViewItem.ListViewSubItem<span class="token punctuation">[</span><span class="token punctuation">]</span> lvs<span class="token punctuation">;</span>                lvs <span class="token operator">=</span> new ListViewItem.ListViewSubItem<span class="token punctuation">[</span>5<span class="token punctuation">]</span>                     <span class="token punctuation">{</span>                       new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token punctuation">}</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Name<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Color<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Time.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Money.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Load<span class="token punctuation">;</span>                lv.Tag <span class="token operator">=</span> t<span class="token punctuation">;</span>                listHire.Items.Add<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.SubItems.AddRange<span class="token punctuation">(</span>lvs<span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.ImageKey <span class="token operator">=</span> <span class="token string">"1.png"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 加到还车车<span class="token punctuation">(</span>listback<span class="token punctuation">)</span>集合然后显示出来        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public void addMyRentShow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listback.Items.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m_RM <span class="token operator">=</span> new XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//实例化一个管理类对象            TrafficBLL showBLL <span class="token operator">=</span> new TrafficBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            showBLL.showRent<span class="token punctuation">(</span>tNew, m_RM<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>TrafficInfo t <span class="token keyword">in</span> m_RM.DicRenteds.Values<span class="token punctuation">)</span>//显示子项            <span class="token punctuation">{</span>                ListViewItem lv <span class="token operator">=</span> new ListViewItem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.Text <span class="token operator">=</span> t.Number<span class="token punctuation">;</span>                ListViewItem.ListViewSubItem<span class="token punctuation">[</span><span class="token punctuation">]</span> lvs<span class="token punctuation">;</span>                lvs <span class="token operator">=</span> new ListViewItem.ListViewSubItem<span class="token punctuation">[</span>7<span class="token punctuation">]</span>                     <span class="token punctuation">{</span>                       new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>,                      new ListViewItem.ListViewSubItem<span class="token punctuation">(</span><span class="token punctuation">)</span>                     <span class="token punctuation">}</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Name<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Color<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Time.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Money.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.Load<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>5<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.RentName<span class="token punctuation">;</span>                lvs<span class="token punctuation">[</span>6<span class="token punctuation">]</span>.Text <span class="token operator">=</span> t.RentDate.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.Tag <span class="token operator">=</span> t<span class="token punctuation">;</span>                listback.Items.Add<span class="token punctuation">(</span>lv<span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.SubItems.AddRange<span class="token punctuation">(</span>lvs<span class="token punctuation">)</span><span class="token punctuation">;</span>                lv.ImageKey <span class="token operator">=</span> <span class="token string">"1.png"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        //出租        private void btnHire_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>listHire.SelectedItems.Count <span class="token operator">==</span> 0<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>//判断下            TrafficInfo RentTraffic <span class="token operator">=</span> listHire.SelectedItems<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Tag as TrafficInfo<span class="token punctuation">;</span>            RentTraffic.RentName <span class="token operator">=</span> txtUser.Text<span class="token punctuation">;</span>            RentTraffic.RentDate <span class="token operator">=</span>Convert.ToDateTime<span class="token punctuation">(</span>dateTime.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            RentTraffic.RentNumber <span class="token operator">=</span> RentTraffic.Number<span class="token punctuation">;</span>            RentTraffic.RentManID <span class="token operator">=</span> txtRentManID.Text<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txtUser.Text <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span> MessageBox.Show<span class="token punctuation">(</span><span class="token string">"情输入租户姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> txtUser.Focus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txtRentManID.Text <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span> MessageBox.Show<span class="token punctuation">(</span><span class="token string">"情输入租户证件号码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> txtUser.Focus<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            TrafficBLL BLL <span class="token operator">=</span> new TrafficBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BLL.addRent<span class="token punctuation">(</span>RentTraffic<span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"出租成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            this.tabControl1.SelectedTab <span class="token operator">=</span> tpReturn<span class="token punctuation">;</span>            addMyRentShow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            addMyTrafficShow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //结算,还车        private void btnBalance_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            TrafficInfo listHire <span class="token operator">=</span> listback.SelectedItems<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Tag as TrafficInfo<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>listHire <span class="token operator">!=</span>null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                listHire.ReturnDate <span class="token operator">=</span> Convert.ToDateTime<span class="token punctuation">(</span>dateTime.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>                listHire.RentNumber <span class="token operator">=</span> listHire.Number<span class="token punctuation">;</span>                TrafficBLL balance <span class="token operator">=</span> new TrafficBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                balance.addlistHire<span class="token punctuation">(</span>listHire<span class="token punctuation">)</span><span class="token punctuation">;</span>                MessageBox.Show<span class="token punctuation">(</span><span class="token string">"已还车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                this.tabControl1.SelectedTab <span class="token operator">=</span> tpRent<span class="token punctuation">;</span>//转向                addMyRentShow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                addMyTrafficShow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>           <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region 视图</span>        private void MenuLarge_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listHire.View <span class="token operator">=</span> View.LargeIcon<span class="token punctuation">;</span>            listHire.View <span class="token operator">=</span> View.LargeIcon<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void MenuSmall_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listHire.View <span class="token operator">=</span> View.SmallIcon<span class="token punctuation">;</span>            listHire.View <span class="token operator">=</span> View.SmallIcon<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void MenuPart_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listHire.View <span class="token operator">=</span> View.Details<span class="token punctuation">;</span>            listHire.View <span class="token operator">=</span> View.Details<span class="token punctuation">;</span>        <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">#endregion</span>        private void btnExit_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            this.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 删        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btnDelete_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          TrafficInfo delete<span class="token operator">=</span>listHire.SelectedItems<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Tag as TrafficInfo<span class="token punctuation">;</span>          TrafficBLL dBLL <span class="token operator">=</span> new TrafficBLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          bool res<span class="token operator">=</span>  dBLL.deleteTraffic<span class="token punctuation">(</span>delete<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span>          <span class="token punctuation">{</span>              MessageBox.Show<span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              addMyTrafficShow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>           <span class="token punctuation">{</span>              MessageBox.Show<span class="token punctuation">(</span><span class="token string">"请选中一项"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>               <span class="token punctuation">}</span>        private void btnAccount_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            FormAccount Account <span class="token operator">=</span> new FormAccount<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Account.ShowDialog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery之jqgrid分页技巧</title>
      <link href="/2019/01/11/jquery-zhi-jqgrid-fen-ye-ji-qiao/"/>
      <url>/2019/01/11/jquery-zhi-jqgrid-fen-ye-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/11/jquery-zhi-jqgrid-fen-ye-ji-qiao/1.jpg" alt="图1"></p><h2 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h2><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"cn"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>head<span class="token operator">></span>        <span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- jqGrid组件基础样式包-必要 --<span class="token operator">></span>        <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"jqgrid/css/ui.jqgrid.css"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- jqGrid主题包-非必要 --<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>-- 在jqgrid/css/css这个目录下还有其他的主题包，可以尝试更换看效果 --<span class="token operator">></span>        <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"jqgrid/css/css/flick/jquery-ui-1.8.16.custom.css"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- jquery插件包-必要 --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 这个是所有jquery插件的基础，首先第一个引入 --<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/jquery-1.7.1.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- jqGrid插件包-必要 --<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jqgrid/js/jquery.jqGrid.src.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- jqGrid插件的多语言包-非必要 --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 在jqgrid/js/i18n下还有其他的多语言包，可以尝试更换看效果 --<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"jqgrid/js/i18n/grid.locale-cn.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>        <span class="token operator">&lt;</span>title<span class="token operator">></span>测试<span class="token operator">&lt;</span>/title<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 本页面初始化用到的js包，创建jqGrid的代码就在里面 --<span class="token operator">></span>        <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">".\js\index.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span>    <span class="token operator">&lt;</span>/head<span class="token operator">></span>    <span class="token operator">&lt;</span>body<span class="token operator">></span>        <span class="token operator">&lt;</span>table id<span class="token operator">=</span><span class="token string">"list2"</span><span class="token operator">></span><span class="token operator">&lt;</span>/table<span class="token operator">></span>         <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"pager2"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span>        <span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><pre class=" language-bash"><code class="language-bash"><span class="token variable"><span class="token variable">$(</span>function<span class="token punctuation">(</span><span class="token variable">)</span></span><span class="token punctuation">{</span>    //页面加载完成之后执行    pageInit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> pageInit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //创建jqGrid组件    jQuery<span class="token punctuation">(</span><span class="token string">"#list2"</span><span class="token punctuation">)</span>.jqGrid<span class="token punctuation">(</span>            <span class="token punctuation">{</span>                    datatype: <span class="token string">'local'</span>,                       colModel:<span class="token punctuation">[</span>                        <span class="token punctuation">{</span>name:<span class="token string">"age"</span>,index:<span class="token string">"age"</span>,label:<span class="token string">'年龄'</span>,align:<span class="token string">'center'</span>, width: <span class="token string">'25%'</span>, sortable:false<span class="token punctuation">}</span>,                        <span class="token punctuation">{</span>name:<span class="token string">"id"</span>,index:<span class="token string">"id"</span>,label:<span class="token string">'学号'</span>,align:<span class="token string">'center'</span>, width: <span class="token string">'25%'</span>, sortable:false<span class="token punctuation">}</span>,                        <span class="token punctuation">{</span>name:<span class="token string">"name"</span>,index:<span class="token string">"name"</span>,label:<span class="token string">'姓名'</span>,align:<span class="token string">'center'</span>, width: <span class="token string">'50%'</span>, hidden:false<span class="token punctuation">}</span>                    <span class="token punctuation">]</span>,                    shrinkToFit <span class="token keyword">:</span> true,                    rownumbers: true,                    width <span class="token keyword">:</span><span class="token string">'600'</span>,                    height: <span class="token string">'100'</span>,                    pager: <span class="token string">'pager2'</span>,                    rowNum: 2            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var rows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'age'</span><span class="token keyword">:</span><span class="token string">'12'</span>,<span class="token string">'id'</span><span class="token keyword">:</span><span class="token string">'1'</span>,<span class="token string">'name'</span><span class="token keyword">:</span><span class="token string">'张三'</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">'age'</span><span class="token keyword">:</span><span class="token string">'22'</span>,<span class="token string">'id'</span><span class="token keyword">:</span><span class="token string">'2'</span>,<span class="token string">'name'</span><span class="token keyword">:</span><span class="token string">'李四'</span><span class="token punctuation">}</span>,                <span class="token punctuation">{</span><span class="token string">'age'</span><span class="token keyword">:</span><span class="token string">'12'</span>,<span class="token string">'id'</span><span class="token keyword">:</span><span class="token string">'3'</span>,<span class="token string">'name'</span><span class="token keyword">:</span><span class="token string">'王五'</span><span class="token punctuation">}</span>,<span class="token punctuation">{</span><span class="token string">'age'</span><span class="token keyword">:</span><span class="token string">'22'</span>,<span class="token string">'id'</span><span class="token keyword">:</span><span class="token string">'5'</span>,<span class="token string">'name'</span><span class="token keyword">:</span><span class="token string">'马六'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            var localData <span class="token operator">=</span> <span class="token punctuation">{</span>page: 1, total: 2, records: <span class="token string">"2"</span>, rows: rows<span class="token punctuation">}</span><span class="token punctuation">;</span>    localData.rows <span class="token operator">=</span> rows<span class="token punctuation">;</span>    localData.records <span class="token operator">=</span> rows.length<span class="token punctuation">;</span>    localData.total <span class="token operator">=</span> <span class="token punctuation">(</span>rows.length % 2 <span class="token operator">==</span> 0<span class="token punctuation">)</span> ? <span class="token punctuation">(</span>rows.length / 2<span class="token punctuation">)</span> <span class="token keyword">:</span> <span class="token punctuation">(</span>Math.floor<span class="token punctuation">(</span>rows.length / 2<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span><span class="token punctuation">;</span>     var reader <span class="token operator">=</span> <span class="token punctuation">{</span>                    root: function<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> localData.rows<span class="token punctuation">;</span> <span class="token punctuation">}</span>,                    page: function<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> localData.page<span class="token punctuation">;</span> <span class="token punctuation">}</span>,                     total: function<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> localData.total<span class="token punctuation">;</span> <span class="token punctuation">}</span>,                    records: function<span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> localData.records<span class="token punctuation">;</span> <span class="token punctuation">}</span>,  repeatitems <span class="token keyword">:</span> false<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">$(</span><span class="token string">"#list2"</span><span class="token punctuation">)</span>.setGridParam<span class="token punctuation">(</span><span class="token punctuation">{</span>data: localData.rows, reader: reader<span class="token punctuation">}</span><span class="token punctuation">)</span>.trigger<span class="token punctuation">(</span><span class="token string">'reloadGrid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         //调整高度     jQuery<span class="token punctuation">(</span><span class="token string">"#list2"</span><span class="token punctuation">)</span>.setGridHeight<span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span>window<span class="token variable">)</span></span>.height<span class="token punctuation">(</span><span class="token punctuation">)</span> - 240<span class="token punctuation">)</span><span class="token punctuation">;</span>     //加入toolbar    <span class="token punctuation">$(</span><span class="token string">"#t_fa-dialog-gridTable"</span><span class="token punctuation">)</span>.css<span class="token punctuation">(</span><span class="token string">"height"</span>, <span class="token string">"38px"</span><span class="token punctuation">)</span>.css<span class="token punctuation">(</span><span class="token string">"padding"</span>, <span class="token string">"5px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var div <span class="token operator">=</span> <span class="token punctuation">$(</span><span class="token string">'&lt;div style="float:right;margin-right:20px;">&lt;/div>'</span><span class="token punctuation">)</span>.appendTo<span class="token punctuation">(</span><span class="token string">"#t_fa-dialog-gridTable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var btn1 <span class="token operator">=</span> <span class="token punctuation">$(</span><span class="token string">'&lt;button type="button" title="导出报表" class="btn btn-default btn-xs" style="font-size:14px;">&lt;i class="fa fa-download" aria-hidden="true">&lt;/i>&lt;/button>'</span><span class="token punctuation">)</span>.appendTo<span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>    btn1.on<span class="token punctuation">(</span><span class="token string">"click"</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        alert<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><pre class=" language-bash"><code class="language-bash">    shrinkToFit:false,    autoScroll: false, //启动横向滚动条     sortname: <span class="token string">'SNGCMC'</span>,    sortorder: <span class="token string">'desc'</span>,    pager: <span class="token string">'pager2'</span>,  //分页    rowNum: 27,     frozen: true,     //固定头部    rownumbers: true, //启动行码   toolbar: <span class="token punctuation">[</span>true, <span class="token string">"top"</span><span class="token punctuation">]</span> //启动toolbar</code></pre><p>中文API：<a href="http://blog.mn886.net/jqGrid/" target="_blank" rel="noopener">http://blog.mn886.net/jqGrid/</a><br>github代码下载：<a href="https://github.com/zy20081/web.git" target="_blank" rel="noopener">https://github.com/zy20081/web.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相册</title>
      <link href="/2019/01/11/xiang-ce/"/>
      <url>/2019/01/11/xiang-ce/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/11/xiang-ce/2.jpg" alt="图2"></p><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><p>学C#的时候，第一个作业练习demo</p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>namespace picphoto<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private int photoNo <span class="token operator">=</span> 1<span class="token punctuation">;</span>//定义一个变量        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 首页        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btnfirst_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> 1<span class="token punctuation">;</span>            picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 上一张        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btngo_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> photoNo - 1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>photoNo <span class="token operator">&lt;</span> 1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                photoNo <span class="token operator">=</span> 1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 下一张        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btndown_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> photoNo +1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> photoNo<span class="token operator">></span> 8<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                photoNo <span class="token operator">=</span> 8<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 最后一张        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btnlast_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> 8<span class="token punctuation">;</span>            picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 放大        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void pictureBox1_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation<span class="token operator">=</span>@<span class="token string">"..\..\images\2.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox2_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\3.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox3_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\4.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox4_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\5.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox5_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\6.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox6_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\7.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox7_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\8.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void picphoto_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> photoNo+1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>photoNo<span class="token operator">></span>8<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                photoNo <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void timer1_Tick<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> photoNo + 1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>photoNo <span class="token operator">></span> 8<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                photoNo <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void ToolSOpen_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            timer1.Enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void 停止自动换片ToolStripMenuItem_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            timer1.Enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐播放器</title>
      <link href="/2019/01/10/yin-le-bo-fang-qi/"/>
      <url>/2019/01/10/yin-le-bo-fang-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/10/yin-le-bo-fang-qi/2.jpg" alt="图2"><br><img src="/2019/01/10/yin-le-bo-fang-qi/3.jpg" alt="图3"></p><h2 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h2><p>大学时期，蛮流行写音乐播放器，也写了个，蛮有意思的，这种就属于代码简单，但是有个成果，这都好多年了，把代码发大家看看</p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>using System.Runtime.Serialization.Formatters.Binary<span class="token punctuation">;</span>namespace MusicTV<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        PlayManager m_MP <span class="token operator">=</span> new PlayManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        SongInfo Songs<span class="token punctuation">;</span>        private void toolStripMenuItem1_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Songs <span class="token operator">=</span> new SongInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            openFile.FileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            openFile.ShowDialog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Songs.FilePath <span class="token operator">=</span> openFile.FileName<span class="token punctuation">;</span>            Songs.name <span class="token operator">=</span> Path.GetFileName<span class="token punctuation">(</span>Songs.FilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>//Path方法，，存入名字            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_MP.PlaySong.ContainsKey<span class="token punctuation">(</span>Songs.FilePath<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                MessageBox.Show<span class="token punctuation">(</span><span class="token string">"已经添加了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            m_MP.PlaySong.Add<span class="token punctuation">(</span>Songs.FilePath, Songs<span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode n <span class="token operator">=</span> null<span class="token punctuation">;</span>            rootNode.Nodes.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>SongInfo s <span class="token keyword">in</span> m_MP.PlaySong.Values<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                  n <span class="token operator">=</span> new TreeNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n.Text <span class="token operator">=</span> s.name<span class="token punctuation">;</span>                n.Tag <span class="token operator">=</span> s<span class="token punctuation">;</span>                rootNode.Nodes.Add<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rootNode.Expand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TreeNode rootNode <span class="token operator">=</span> null<span class="token punctuation">;</span>//树的根点        private void Form1_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rootNode <span class="token operator">=</span> new TreeNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rootNode.Text <span class="token operator">=</span> <span class="token string">"默认列表"</span><span class="token punctuation">;</span>            tvMenu.Nodes.Add<span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            //FileStream <span class="token function">file</span> <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"12.dat"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileStream <span class="token function">file</span> <span class="token operator">=</span> File.OpenRead<span class="token punctuation">(</span><span class="token string">"12.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>///反序列化            <span class="token keyword">if</span> <span class="token punctuation">(</span>file.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                BinaryFormatter fs <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                m_MP <span class="token operator">=</span> fs.Deserialize<span class="token punctuation">(</span>file<span class="token punctuation">)</span> as PlayManager<span class="token punctuation">;</span>             <span class="token punctuation">}</span>            file.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> file.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode n <span class="token operator">=</span> null<span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>SongInfo s <span class="token keyword">in</span> m_MP.PlaySong.Values<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                n <span class="token operator">=</span> new TreeNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n.Text <span class="token operator">=</span> s.name<span class="token punctuation">;</span>                n.Tag <span class="token operator">=</span> s<span class="token punctuation">;</span>                rootNode.Nodes.Add<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rootNode.Expand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 改变宽度        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void Form1_SizeChanged<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            this.media.Width <span class="token operator">=</span> groupBox1.Width-10<span class="token punctuation">;</span>            this.media.Height <span class="token operator">=</span> groupBox1.Height-30<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //双击时播放歌曲        private void tvMenu_NodeMouseDoubleClick<span class="token punctuation">(</span>object sender, TreeNodeMouseClickEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tvMenu.SelectedNode.Tag <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                SongInfo sSel <span class="token operator">=</span> tvMenu.SelectedNode.Tag as SongInfo<span class="token punctuation">;</span>                media.URL <span class="token operator">=</span> sSel.FilePath<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            try            <span class="token punctuation">{</span>                Songs <span class="token operator">=</span> tvMenu.SelectedNode.Tag as SongInfo<span class="token punctuation">;</span>                string lyricpath <span class="token operator">=</span> @<span class="token string">"lyric\" + Songs.name + "</span>.txt<span class="token string">";                Songs.lyrics = File.ReadAllText(lyricpath, Encoding.Default);//选择时显示歌词            }            catch{}            if (e.Node.Tag == null)            {                return;            }            tblyric.Text = ((e.Node.Tag) as SongInfo).lyrics;        }        private void Form1_FormClosing(object sender, FormClosingEventArgs e)        {///序列化            //FileStream file = new FileStream("</span>12.dat<span class="token string">", FileMode.Create);            //BinaryFormatter fs = new BinaryFormatter();            //fs.Serialize(file, m_MP);            //file.Close(); file.Dispose();            using(Stream filestream=File.OpenWrite("</span>12.dat"<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bf.Serialize<span class="token punctuation">(</span>filestream, m_MP<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="lyric-cs"><a href="#lyric-cs" class="headerlink" title="lyric.cs"></a>lyric.cs</h2><pre class=" language-bash"><code class="language-bash">   <span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>  public  class lyric    <span class="token punctuation">{</span>        public string lyricPath <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//歌词的路径    <span class="token punctuation">}</span></code></pre><h2 id="PlayManager-cs"><a href="#PlayManager-cs" class="headerlink" title="PlayManager.cs"></a>PlayManager.cs</h2><pre class=" language-bash"><code class="language-bash">  using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Xml<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>namespace MusicTV<span class="token punctuation">{</span>    <span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>   public class PlayManager    <span class="token punctuation">{</span>       public PlayManager<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           m_PlaySong <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, SongInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           m_lyric <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, lyric<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       private Dictionary<span class="token operator">&lt;</span>string, SongInfo<span class="token operator">></span> m_PlaySong<span class="token punctuation">;</span>       /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>       /// 歌曲信息       /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>       public Dictionary<span class="token operator">&lt;</span>string, SongInfo<span class="token operator">></span> PlaySong       <span class="token punctuation">{</span>           get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_PlaySong<span class="token punctuation">;</span> <span class="token punctuation">}</span>           <span class="token keyword">set</span> <span class="token punctuation">{</span> m_PlaySong <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>       /// 存入歌词       /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>       private Dictionary<span class="token operator">&lt;</span>string, lyric<span class="token operator">></span> m_lyric<span class="token punctuation">;</span>       public Dictionary<span class="token operator">&lt;</span>string, lyric<span class="token operator">></span> Lyric       <span class="token punctuation">{</span>           get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_lyric<span class="token punctuation">;</span> <span class="token punctuation">}</span>           <span class="token keyword">set</span> <span class="token punctuation">{</span> m_lyric <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="SongInfo-cs"><a href="#SongInfo-cs" class="headerlink" title="SongInfo.cs"></a>SongInfo.cs</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>   public class SongInfo    <span class="token punctuation">{</span>       public string name <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>  //歌名       public string FilePath <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span> //歌曲地址       public string Singer <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>//歌手名       public lyric SongWord <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>//歌词       public string lyrics <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算器小demo</title>
      <link href="/2019/01/10/ji-suan-qi-xiao-demo/"/>
      <url>/2019/01/10/ji-suan-qi-xiao-demo/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/10/ji-suan-qi-xiao-demo/1.jpg" alt="图1"></p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>这是我读书时期，刚学C#，入门写的第一个demo，感觉非常经典，分享给大家看看</p><pre class=" language-bash"><code class="language-bash">namespace 计算器<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private bool ClearDisplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>//清空第一次        private string Operand<span class="token punctuation">;</span>//记录加.减，乘。除        private double Operand1<span class="token punctuation">;</span>//第一个数字        private double Operand2<span class="token punctuation">;</span>//第二个数字        private double reslult<span class="token punctuation">;</span>        private void btn1_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lblwindows.Text <span class="token operator">==</span> <span class="token string">"0"</span><span class="token operator">||</span>ClearDisplay<span class="token operator">==</span>true<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> <span class="token punctuation">((</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">)</span>.Text<span class="token punctuation">;</span>                ClearDisplay <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> lblwindows.Text + <span class="token punctuation">((</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">)</span>.Text<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void btnfu_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ClearDisplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            double i <span class="token operator">=</span> Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>//取负号            lblwindows.Text <span class="token operator">=</span> <span class="token punctuation">(</span>0 - i<span class="token punctuation">)</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        private void btnBack_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lblwindows.Text.Length <span class="token operator">></span> 13<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lblwindows.Text<span class="token operator">=</span>lblwindows.Text.Substring<span class="token punctuation">(</span>0, 14<span class="token punctuation">)</span><span class="token punctuation">;</span>//Backspace键设置                lblwindows.Text <span class="token operator">=</span> lblwindows.Text.Substring<span class="token punctuation">(</span>0, lblwindows.Text.Length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            if<span class="token punctuation">(</span>lblwindows.Text.Length<span class="token operator">></span>1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> lblwindows.Text.Substring<span class="token punctuation">(</span>0, lblwindows.Text.Length-1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lblwindows.Text.Length<span class="token operator">==</span>1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void btnPlus_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Operand <span class="token operator">=</span> <span class="token punctuation">((</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">)</span>.Text<span class="token punctuation">;</span>            ClearDisplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            Operand1 <span class="token operator">=</span> Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnclear_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnEXE_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                reslult <span class="token operator">=</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>                Operand2 <span class="token operator">=</span> Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>                switch <span class="token punctuation">(</span>Operand<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token keyword">:</span> reslult <span class="token operator">=</span> Operand1 + Operand2<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token keyword">:</span> reslult <span class="token operator">=</span> Operand1 - Operand2<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token keyword">:</span> reslult <span class="token operator">=</span> Operand1 * Operand2<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token keyword">:</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Operand2 <span class="token operator">==</span> 0<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            reslult <span class="token operator">=</span> Operand1 / Operand2<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"%"</span><span class="token keyword">:</span> reslult <span class="token operator">=</span> Operand1 % Operand2<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                lblwindows.Text <span class="token operator">=</span> reslult.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ClearDisplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnDot_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lblwindows.Text.Contains<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> lblwindows.Text + <span class="token string">"."</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> lblwindows.Text <span class="token operator">=</span> lblwindows.Text<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void btnSqrt_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.Sqrt<span class="token punctuation">(</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnSin_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.Sin<span class="token punctuation">(</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnTan_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.Tan<span class="token punctuation">(</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnCos_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.Cos<span class="token punctuation">(</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnCountdown_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> <span class="token punctuation">(</span>1 / Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnAdd_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.PI.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void MenuOpen_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">(</span>new Form1<span class="token punctuation">(</span><span class="token punctuation">))</span>.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void MenuClose_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Application.Exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码生成器</title>
      <link href="/2019/01/10/dai-ma-sheng-cheng-qi/"/>
      <url>/2019/01/10/dai-ma-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/10/dai-ma-sheng-cheng-qi/1.jpg" alt="图1"></p><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>这是我读书时期，学C#，每次写上机练习，都要写3层架构，练增删改查，那个时候还不流行动软生成器和CodeSmith,所以就根据自己的写代码方式，写了个自己常用的代码生成器生成3层架构，这个要配合我写的SqlHelper一起使用</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Data.SqlClient<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>namespace code<span class="token punctuation">{</span>    class CreateDaL    <span class="token punctuation">{</span> ///增加         private  SqlConnection conn<span class="token punctuation">;</span> //连接        public  SqlConnection Conn        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> null <span class="token operator">||</span> conn.State <span class="token operator">==</span> ConnectionState.Broken<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>model.constr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> conn<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>       public  DataTable ExecuteDataTable<span class="token punctuation">(</span>string sql, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span> //查询结果集比较少的sql        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sql, Conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            SqlDataAdapter adapter <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                adapter.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            catch             <span class="token punctuation">{</span> <span class="token punctuation">}</span>            <span class="token keyword">return</span> dt<span class="token punctuation">;</span>          <span class="token punctuation">}</span>       public static string toNetType<span class="token punctuation">(</span>string dataType<span class="token punctuation">)</span> //数据库类型和C<span class="token comment" spellcheck="true">#类型换下</span>       <span class="token punctuation">{</span>           switch <span class="token punctuation">(</span>dataType<span class="token punctuation">)</span>           <span class="token punctuation">{</span>               <span class="token keyword">case</span> <span class="token string">"int"</span><span class="token keyword">:</span> <span class="token keyword">return</span> <span class="token string">"int"</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token string">"nvarchar"</span><span class="token keyword">:</span>               <span class="token keyword">case</span> <span class="token string">"varchar"</span><span class="token keyword">:</span>               <span class="token keyword">case</span> <span class="token string">"nchar"</span><span class="token keyword">:</span>                   <span class="token keyword">return</span> <span class="token string">"string"</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token string">"bit"</span><span class="token keyword">:</span> <span class="token keyword">return</span> <span class="token string">"bool"</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token string">"datetime"</span><span class="token keyword">:</span> <span class="token keyword">return</span> <span class="token string">"DateTime"</span><span class="token punctuation">;</span>               default: <span class="token keyword">return</span> <span class="token string">"object"</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>       /// 创建model        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"tablename"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>       public StringBuilder createModel<span class="token punctuation">(</span>string tablename<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           DataTable dtCols <span class="token operator">=</span> ExecuteDataTable<span class="token punctuation">(</span><span class="token string">"SELECT * FROM  INFORMATION_SCHEMA.COlUMNS where Table_name=@table"</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@table"</span>, tablename<span class="token punctuation">))</span><span class="token punctuation">;</span>           StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Text;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data.SqlClient;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Collections.Generic;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"namespace "</span> + model.RootNamespace + <span class="token string">".Model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"partial class"</span> + <span class="token string">"  "</span> + tablename + <span class="token string">"Model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dtCols.Rows<span class="token punctuation">)</span>           <span class="token punctuation">{</span>               string colname <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"COLUMN_NAME"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               string dateType <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"DATA_TYPE"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               string netType <span class="token operator">=</span> toNetType<span class="token punctuation">(</span>dateType<span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public"</span> + <span class="token string">"  "</span> + netType + <span class="token string">"  "</span> + colname + <span class="token string">"  "</span> + <span class="token string">"{get;set;}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> sb<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>       /// 创建model       /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>       /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"tablename"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>       /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>       public StringBuilder creatDAL<span class="token punctuation">(</span>string tablename <span class="token punctuation">)</span>//创建DAL       <span class="token punctuation">{</span>           <span class="token punctuation">{</span>               DataTable dtCols <span class="token operator">=</span> ExecuteDataTable<span class="token punctuation">(</span><span class="token string">"SELECT * FROM  INFORMATION_SCHEMA.COlUMNS where Table_name=@table and  COLUMN_NAME&lt;>'ID' "</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@table"</span>, tablename<span class="token punctuation">))</span><span class="token punctuation">;</span>               string<span class="token punctuation">[</span><span class="token punctuation">]</span> colnames <span class="token operator">=</span> new string<span class="token punctuation">[</span>dtCols.Rows.Count<span class="token punctuation">]</span><span class="token punctuation">;</span>//定义列为数组下面好用jion逗号分开               <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dtCols.Rows.Count<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   DataRow row <span class="token operator">=</span> dtCols.Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                   string colname <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span>row<span class="token punctuation">[</span><span class="token string">"Column_Name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   colnames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> colname<span class="token punctuation">;</span>               <span class="token punctuation">}</span>               string<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> new string<span class="token punctuation">[</span>dtCols.Rows.Count<span class="token punctuation">]</span><span class="token punctuation">;</span>//values后面的参数               <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameters.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"@"</span> + colnames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Text;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data.SqlClient;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Collections.Generic;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using "</span> + model.RootNamespace + <span class="token string">".Model;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"namespace "</span> + model.RootNamespace + <span class="token string">".DAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"partial class"</span> + <span class="token string">"  "</span> + tablename + <span class="token string">"DAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">#region 字符串并接（增加） </span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int insert("</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  "</span> +<span class="token string">"model){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"object obj=sqlHelper.ExecuteNonQuery("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"\"insert into  "</span> + tablename + <span class="token string">"("</span> + string.Join<span class="token punctuation">(</span><span class="token string">","</span>, colnames<span class="token punctuation">)</span> + <span class="token string">")values("</span> + string.Join<span class="token punctuation">(</span><span class="token string">","</span>, parameters<span class="token punctuation">)</span> + <span class="token string">");select identity\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               foreach <span class="token punctuation">(</span>string colname <span class="token keyword">in</span> colnames<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   sb.AppendLine<span class="token punctuation">(</span><span class="token string">",new SqlParameter(\""</span> + colname + <span class="token string">"\",model."</span> + colname + <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return Convert.ToInt32(obj);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">#endregion</span>               <span class="token comment" spellcheck="true">#region 字符串并接（删）</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int Delete(int id){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"object obj=sqlHelper.ExecuteNonQuery("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"\"delete from  "</span> + tablename + <span class="token string">" where id=@id\","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"new SqlParameter(\"id\",id));"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return Convert.ToInt32(obj);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">#endregion</span>               <span class="token comment" spellcheck="true">#region 字符串并接（更新）</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int Update("</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  "</span> + <span class="token string">"model){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"object obj=sqlHelper.ExecuteNonQuery("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"\"update  "</span> + tablename + <span class="token string">" set "</span> + <span class="token string">"("</span> + string.Join<span class="token punctuation">(</span><span class="token string">","</span>, colnames<span class="token punctuation">)</span> + <span class="token string">")where id=@id\","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"new SqlParameter(\"id\",model."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span>colnames<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"));"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return Convert.ToInt32(obj);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">#endregion</span>               <span class="token comment" spellcheck="true">#region 字符串并接（查询多行数据）</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public "</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  selectMoreRows(int id){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"DataTable dt = sqlHelper.ExecuteDataTable(\"select * from "</span>                   + tablename + <span class="token string">"  where id=@id\","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"new SqlParameter(\"id\",id));"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"if (dt.Rows.Count &lt;= 0){return null;}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">" else if (dt.Rows.Count == 1){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span>tablename + <span class="token string">"Model"</span> + <span class="token string">"  model= new  "</span> + tablename + <span class="token string">"Model();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"DataRow row = dt.Rows[0];"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dtCols.Rows<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   string colname <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"COLUMN_NAME"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   string dateType <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"DATA_TYPE"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   string netType <span class="token operator">=</span> toNetType<span class="token punctuation">(</span>dateType<span class="token punctuation">)</span><span class="token punctuation">;</span>                   sb.AppendLine<span class="token punctuation">(</span><span class="token string">"model."</span> + colname + <span class="token string">"="</span> + <span class="token string">"("</span> + netType + <span class="token string">")"</span> + <span class="token string">"row[\""</span> + colname + <span class="token string">"\"];"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return  model;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"else{throw new Exception(\"出现多条数据\");}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">#endregion</span>               <span class="token comment" spellcheck="true">#region 查询所有值用到了IEumerable接口</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public IEnumerable&lt;"</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"> ListAll(){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"List&lt;"</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"> list = new List&lt;"</span> +                 tablename + <span class="token string">"Model"</span> + <span class="token string">">();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"DataTable dt = sqlHelper.ExecuteDataTable(\"select * from "</span> +               tablename + <span class="token string">"\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"foreach (DataRow row in dt.Rows){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span>tablename + <span class="token string">"Model"</span> + <span class="token string">"  model= new  "</span> + tablename + <span class="token string">"Model();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dtCols.Rows<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   string colname <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"COLUMN_NAME"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   string dateType <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"DATA_TYPE"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   string netType <span class="token operator">=</span> toNetType<span class="token punctuation">(</span>dateType<span class="token punctuation">)</span><span class="token punctuation">;</span>                   sb.AppendLine<span class="token punctuation">(</span><span class="token string">"model."</span> + colname + <span class="token string">"="</span> + <span class="token string">"("</span> + netType + <span class="token string">")"</span> + <span class="token string">"row[\""</span> + colname + <span class="token string">"\"];"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"list.Add(model);}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return list;}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">#endregion</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> sb<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       public StringBuilder creatBLL<span class="token punctuation">(</span>string tablename<span class="token punctuation">)</span> //创建BLL       <span class="token punctuation">{</span>           DataTable dtCols <span class="token operator">=</span> ExecuteDataTable<span class="token punctuation">(</span><span class="token string">"SELECT * FROM  INFORMATION_SCHEMA.COlUMNS where Table_name=@table and  COLUMN_NAME&lt;>'ID' "</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@table"</span>, tablename<span class="token punctuation">))</span><span class="token punctuation">;</span>           StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Text;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data.SqlClient;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Collections.Generic;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using "</span> + model.RootNamespace + <span class="token string">".DAL;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using "</span> + model.RootNamespace + <span class="token string">".Model;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"namespace "</span> + model.RootNamespace + <span class="token string">".BLL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"partial class"</span> + <span class="token string">"  "</span> + tablename + <span class="token string">"BLL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#region 字符串并接（增加）</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int insert("</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  "</span> + <span class="token string">"model){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span>+tablename+<span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"insert(model);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           <span class="token comment" spellcheck="true">#region 字符串并接（删）</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int Delete(int id){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span> + tablename + <span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"Delete(id);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           <span class="token comment" spellcheck="true">#region 字符串并接（更新）</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int Update("</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  "</span> + <span class="token string">"model){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span> + tablename + <span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"Update(model);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           <span class="token comment" spellcheck="true">#region 字符串并接（查询多行数据）</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public "</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  selectMoreRows(int id){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span> + tablename + <span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"selectMoreRows(id);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           <span class="token comment" spellcheck="true">#region 查询所有值用到了IEumerable接口</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public IEnumerable&lt;"</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">">  ListAll(){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span> + tablename + <span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"ListAll();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> sb<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//model文件namespace code<span class="token punctuation">{</span>    class model    <span class="token punctuation">{</span>       static public string FilePath <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> //路径       static public string constr <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//连接字符串       static public string BuilderDAL <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//DAL拼接数据       static public string BuilderModel <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//Model拼接数据       static public string BuilderBLL <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//BLL拼接数据       static public string RootNamespace <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//命名空间    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>截图工具</title>
      <link href="/2019/01/10/jie-tu-gong-ju/"/>
      <url>/2019/01/10/jie-tu-gong-ju/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/10/jie-tu-gong-ju/2.jpg" alt="图2"></p><h2 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h2><p>有段时间公司没网了，写文档要用截图，无法使用心爱的QQ截图了，就自己写了个截图工具，bug有点，没有修复，能用，类似QQ截图，差不多，还蛮好用的，有网以后，就没怎么用了，把代码共享出来</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Drawing.Drawing2D<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>using System.Drawing.Imaging<span class="token punctuation">;</span>namespace ScreenCapture<span class="token punctuation">{</span>    public partial class frmScreen <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public frmScreen<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private Point startPoint <span class="token operator">=</span> Point.Empty<span class="token punctuation">;</span>        private Point endPoint <span class="token operator">=</span> Point.Empty<span class="token punctuation">;</span>        public Rectangle rect <span class="token operator">=</span> Rectangle.Empty<span class="token punctuation">;</span>        private void frmScreen_MouseDown<span class="token punctuation">(</span>object sender, MouseEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e.Button <span class="token operator">==</span> MouseButtons.Left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                this.startPoint <span class="token operator">=</span> e.Location<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void frmScreen_MouseMove<span class="token punctuation">(</span>object sender, MouseEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e.Button <span class="token operator">==</span> MouseButtons.Left<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                this.endPoint <span class="token operator">=</span> e.Location<span class="token punctuation">;</span>                Graphics grp <span class="token operator">=</span> this.CreateGraphics<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rect <span class="token operator">=</span> new Rectangle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rect.X <span class="token operator">=</span> <span class="token punctuation">(</span>this.startPoint.X <span class="token operator">&lt;=</span> this.endPoint.X<span class="token punctuation">)</span> ? this.startPoint.X <span class="token keyword">:</span> this.endPoint.X<span class="token punctuation">;</span>                rect.Y <span class="token operator">=</span> <span class="token punctuation">(</span>this.startPoint.Y <span class="token operator">&lt;=</span> this.endPoint.Y<span class="token punctuation">)</span> ? this.startPoint.Y <span class="token keyword">:</span> this.endPoint.Y<span class="token punctuation">;</span>                rect.Width <span class="token operator">=</span> Math.Abs<span class="token punctuation">(</span>this.endPoint.X-this.startPoint.X<span class="token punctuation">)</span><span class="token punctuation">;</span>                rect.Height <span class="token operator">=</span> Math.Abs<span class="token punctuation">(</span>this.endPoint.Y - this.startPoint.Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                grp.Clear<span class="token punctuation">(</span>this.BackColor<span class="token punctuation">)</span><span class="token punctuation">;</span>                Rectangle border <span class="token operator">=</span> new Rectangle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //这个是边框矩形                border.X <span class="token operator">=</span> rect.X - 1<span class="token punctuation">;</span>                border.Y <span class="token operator">=</span> rect.Y - 1<span class="token punctuation">;</span>                border.Width <span class="token operator">=</span> rect.Width<span class="token punctuation">;</span>                border.Height <span class="token operator">=</span> rect.Height<span class="token punctuation">;</span>                grp.DrawRectangle<span class="token punctuation">(</span>Pens.Blue, border<span class="token punctuation">)</span><span class="token punctuation">;</span>                grp.FillRectangle<span class="token punctuation">(</span>Brushes.Red, rect<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void frmScreen_MouseUp<span class="token punctuation">(</span>object sender, MouseEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Bitmap bitmap <span class="token operator">=</span> new Bitmap<span class="token punctuation">(</span>this.rect.Width,this.rect.Height<span class="token punctuation">)</span><span class="token punctuation">;</span>            Graphics grp <span class="token operator">=</span> Graphics.FromImage<span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>            grp.SmoothingMode <span class="token operator">=</span> SmoothingMode.HighQuality<span class="token punctuation">;</span>            //从指定的区域中复制图形            grp.CopyFromScreen<span class="token punctuation">(</span>this.rect.X, this.rect.Y, 0, 0, this.rect.Size<span class="token punctuation">)</span><span class="token punctuation">;</span>           ImageFormat format<span class="token operator">=</span>ImageFormat.Jpeg<span class="token punctuation">;</span>           saveFile.Filter <span class="token operator">=</span> <span class="token string">"图片|*.jpg"</span><span class="token punctuation">;</span>           saveFile.ShowDialog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           string strfile <span class="token operator">=</span> saveFile.FileName<span class="token punctuation">;</span>           bitmap.Save<span class="token punctuation">(</span>strfile<span class="token punctuation">)</span><span class="token punctuation">;</span>            this.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"截图成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#之Socket</title>
      <link href="/2019/01/09/c-zhi-socket/"/>
      <url>/2019/01/09/c-zhi-socket/</url>
      
        <content type="html"><![CDATA[<h2 id="C-中Socket的简单使用"><a href="#C-中Socket的简单使用" class="headerlink" title="C#中Socket的简单使用"></a>C#中Socket的简单使用</h2><ol><li>服务端监听某个端口</li><li>客户端向服务端地址和端口发起Socket连接请求</li><li>服务端收到连接请求后创建Socket连接，并维护这个连接队列。</li><li>客户端和服务端已经建立双工通信（即双向通信），客户端和服务端可以轻松方便的给彼此发送信息<br><img src="/2019/01/09/c-zhi-socket/1.jpg" alt="图1"><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2></li><li>动态端口 从49152-65535</li><li>机器通常从1024起分配动态端口</li><li>公认端口：0-1023，注册端口： 1024-49151<br>，SUN的RPC端口从 32768开始</li><li>查看端口方式： netstat -a -n<h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><img src="/2019/01/09/c-zhi-socket/2.jpg" alt="图2"><br><img src="/2019/01/09/c-zhi-socket/3.jpg" alt="图3"><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><img src="/2019/01/09/c-zhi-socket/4.jpg" alt="图4"><br><img src="/2019/01/09/c-zhi-socket/5.jpg" alt="图5"><br><img src="/2019/01/09/c-zhi-socket/6.jpg" alt="图6"></li></ol><p>服务端代码：</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Net.Sockets<span class="token punctuation">;</span>using System.Threading<span class="token punctuation">;</span>namespace ChatMain<span class="token punctuation">{</span>    public partial class ChatMain <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public ChatMain<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Control.CheckForIllegalCrossThreadCalls <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Socket<span class="token operator">></span> clientSocketList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Socket<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        private void btnStart_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string ip <span class="token operator">=</span> this.txtIP.Text<span class="token punctuation">;</span>            //创建IP            IPAddress ipAddress <span class="token operator">=</span> IPAddress.Parse<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建代表本机的节点对象：包含IP和端口            IPEndPoint endPoint<span class="token operator">=</span>new IPEndPoint<span class="token punctuation">(</span>ipAddress,int.Parse<span class="token punctuation">(</span>this.txtPort.Text<span class="token punctuation">))</span><span class="token punctuation">;</span>             //创建Socket：第一参数：寻址方式，第二个参数： socket传输方式Stream Tcp方式  Dgram:UDP  第三个参数：协议            Socket socket <span class="token operator">=</span> new Socket<span class="token punctuation">(</span>AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>            //绑定端口和IP            socket.Bind<span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>            //开启监听，请求连接的队列的长度            socket.Listen<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token punctuation">;</span>            //线程池开启 监听客户端连接            ThreadPool.QueueUserWorkItem<span class="token punctuation">(</span>new WaitCallback<span class="token punctuation">(</span>this.statAccept<span class="token punctuation">)</span>, socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            this.txtLog.Text +<span class="token operator">=</span> <span class="token string">"服务端开启监听客户端连接了..\r\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public void statAccept<span class="token punctuation">(</span>object obj<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    //接受客户端的一个连接                    Socket proxSocket <span class="token operator">=</span> socket.Accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    //客户端代理socket对象的队列里面去                    clientSocketList.Add<span class="token punctuation">(</span>proxSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    //拿到客户端的端口和ip                    this.txtLog.Text +<span class="token operator">=</span> proxSocket.RemoteEndPoint.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"\r\n"</span><span class="token punctuation">;</span>                    //跟客户端进行通信 通过：proxSocket                    //proxSocket.Send<span class="token punctuation">(</span><span class="token punctuation">)</span>                    //proxSocket.Receive<span class="token punctuation">(</span><span class="token punctuation">)</span>                    ThreadPool.QueueUserWorkItem<span class="token punctuation">(</span>new WaitCallback<span class="token punctuation">(</span>this.StartReciveClientData<span class="token punctuation">)</span>, proxSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception  ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                socket.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 接受连接过来的IP的数据        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public void StartReciveClientData<span class="token punctuation">(</span>object obj<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Socket sokcet <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> new byte<span class="token punctuation">[</span>1024 * 1024 * 1<span class="token punctuation">]</span><span class="token punctuation">;</span>                int  realLenth<span class="token operator">=</span> sokcet.Receive<span class="token punctuation">(</span>buffer,0,buffer.Length,SocketFlags.None<span class="token punctuation">)</span><span class="token punctuation">;</span>                string strResult <span class="token operator">=</span> Encoding.Default.GetString<span class="token punctuation">(</span>buffer, 0, realLenth<span class="token punctuation">)</span><span class="token punctuation">;</span>                this.txtLog.Text +<span class="token operator">=</span> sokcet.RemoteEndPoint.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">":"</span> + strResult + <span class="token string">"\r\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void btnStarClient_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ChatClient client <span class="token operator">=</span> new ChatClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnSend_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            foreach <span class="token punctuation">(</span>var socket <span class="token keyword">in</span> clientSocketList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                string strText <span class="token operator">=</span> this.txtMsg.Text<span class="token punctuation">;</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> Encoding.Default.GetBytes<span class="token punctuation">(</span>strText<span class="token punctuation">)</span><span class="token punctuation">;</span>                socket.Send<span class="token punctuation">(</span>data, 0, data.Length, SocketFlags.None<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端代码：</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.Net.Sockets<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Threading<span class="token punctuation">;</span>namespace ChatMain<span class="token punctuation">{</span>    public partial class ChatClient <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public Socket CurrentSocket <span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public ChatClient<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnConnect_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>            IPAddress ipAddress <span class="token operator">=</span> IPAddress.Parse<span class="token punctuation">(</span>this.txtIP.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            IPEndPoint endPoint<span class="token operator">=</span>new IPEndPoint<span class="token punctuation">(</span>ipAddress,int.Parse<span class="token punctuation">(</span>this.txtPort.Text<span class="token punctuation">))</span><span class="token punctuation">;</span>            //创建个Socket            socket <span class="token operator">=</span> new Socket<span class="token punctuation">(</span>AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket.Connect<span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>            ThreadPool.QueueUserWorkItem<span class="token punctuation">(</span>new WaitCallback<span class="token punctuation">(</span>Recive<span class="token punctuation">)</span>, socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            this.lbStatus.Text <span class="token operator">=</span> <span class="token string">"已连接"</span><span class="token punctuation">;</span>            CurrentSocket <span class="token operator">=</span> socket<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //接受        public void Recive<span class="token punctuation">(</span>object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> socket.Connected<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> new byte<span class="token punctuation">[</span>1024 * 1024<span class="token punctuation">]</span><span class="token punctuation">;</span>                int realLength <span class="token operator">=</span> socket.Receive<span class="token punctuation">(</span>buffer, 0, buffer.Length,SocketFlags.None<span class="token punctuation">)</span><span class="token punctuation">;</span>               //接受字符串                string txt <span class="token operator">=</span> Encoding.Default.GetString<span class="token punctuation">(</span>buffer, 0, realLength<span class="token punctuation">)</span><span class="token punctuation">;</span>                this.txtLog.Text +<span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"接受消息：{0}"</span>, txt<span class="token punctuation">)</span><span class="token punctuation">;</span>                this.txtLog.Text +<span class="token operator">=</span> <span class="token string">"\r\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        //发送        private void btnSend_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string strText <span class="token operator">=</span> this.txtMsg.Text<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>string.IsNullOrEmpty<span class="token punctuation">(</span>strText<span class="token punctuation">))</span> <span class="token punctuation">{</span>                this.txtLog.Text <span class="token operator">=</span> <span class="token string">"发送的消息不能为空"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>CurrentSocket <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox.Show<span class="token punctuation">(</span><span class="token string">"请先连接服务端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            byte<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> Encoding.Default.GetBytes<span class="token punctuation">(</span>strText<span class="token punctuation">)</span><span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                CurrentSocket.Send<span class="token punctuation">(</span>data, 0, data.Length, 0<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SqlServer总结</title>
      <link href="/2019/01/09/sqlserver-zong-jie/"/>
      <url>/2019/01/09/sqlserver-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>一下都是自己写的，总结的，不是照搬网上的，只是分享，其中也有些小案例分享</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre class=" language-bash"><code class="language-bash">create database schoolAon primary<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'MyschoolA'</span>, filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA.mdf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>500mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>,<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'MyschoolA_2'</span>,  filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA_2.ndf'</span>,  size<span class="token operator">=</span>3mb,  maxsize<span class="token operator">=</span>500mb,  filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span>   name <span class="token operator">=</span><span class="token string">'MyschoolA_log'</span>,   filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA_log.ldf'</span>,   size<span class="token operator">=</span>3mb,   maxsize<span class="token operator">=</span>500mb,   filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>约束： alter table Users add constraint uk_LoginID unique<span class="token punctuation">(</span>loginID<span class="token punctuation">)</span>唯一约束</code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><pre class=" language-bash"><code class="language-bash">--pageSize:一页有多少条--pageIndex:第几页--totalCount:总共有多少条CREATE PROC GetPageData    @pageSize int,    @pageIndex int,    @totalCount int outputas<span class="token keyword">select</span> * into <span class="token comment" spellcheck="true">#temp from </span><span class="token punctuation">(</span>    <span class="token keyword">select</span> * from T_Customer<span class="token punctuation">)</span> as T<span class="token keyword">declare</span> @str nvarchar<span class="token punctuation">(</span>500<span class="token punctuation">)</span><span class="token keyword">set</span> @str<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'select top('</span>+cast<span class="token punctuation">(</span>@pageSize as nvarchar<span class="token punctuation">(</span>32<span class="token punctuation">))</span>+<span class="token string">') * from #Temp where Id not in (select top('</span>+cast<span class="token variable"><span class="token punctuation">((</span>@pageIndex<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>@pageSize as nvarchar<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">))</span></span>+<span class="token string">') Id FROM #Temp order by Id)order by Id'</span><span class="token punctuation">)</span><span class="token function">exec</span> <span class="token punctuation">(</span>@str<span class="token punctuation">)</span><span class="token keyword">select</span> @totalCount<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>1<span class="token punctuation">)</span> from <span class="token comment" spellcheck="true">#Temp;</span>drop table <span class="token comment" spellcheck="true">#Temp</span><span class="token keyword">declare</span> @count int<span class="token function">exec</span> GetPageData 4,2,@count////////////////////////////////////ALTER proc <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span>.<span class="token punctuation">[</span>usp_UserInfo_LoadPageData<span class="token punctuation">]</span>@pageSize int,@pageIndex int,@totalCount int outputas--select * from <span class="token punctuation">(</span>--    <span class="token keyword">select</span> ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> over<span class="token punctuation">(</span>order by userinfoid<span class="token punctuation">)</span> num,* from UserInfo--<span class="token punctuation">)</span>as temp where temp.num<span class="token operator">></span><span class="token punctuation">(</span>@pageIndex-1<span class="token punctuation">)</span>*@pageSize and temp.num<span class="token operator">&lt;=</span>@pageIndex*@pageSize<span class="token keyword">select</span> top<span class="token punctuation">(</span>@pageSize<span class="token punctuation">)</span> * from UserInfo where UserInfoID not <span class="token keyword">in</span><span class="token punctuation">(</span>select top<span class="token punctuation">(</span>@pageSize*<span class="token punctuation">(</span>@pageIndex-1<span class="token punctuation">))</span>UserInfoID from UserInfo<span class="token punctuation">)</span><span class="token keyword">select</span> @totalCount<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>1<span class="token punctuation">)</span> from UserInfo------------------正序和到序SELECT * FROM <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">top</span> 10 * from ztrqzc where  num<span class="token operator">></span>all<span class="token punctuation">(</span>select <span class="token function">top</span> 20 num from ztrqzc  order by num <span class="token punctuation">)</span>   order by num  <span class="token punctuation">)</span> temp ORDER BY temp.createdate desc</code></pre><h2 id="事务扩展"><a href="#事务扩展" class="headerlink" title="事务扩展"></a>事务扩展</h2><pre class=" language-bash"><code class="language-bash"> begin transaction<span class="token keyword">declare</span> @errorSum int <span class="token keyword">set</span> @errorSum<span class="token operator">=</span>0--查询tbResults表中所有Y2学生的考试成绩，保存到新表HistoreResult中<span class="token keyword">select</span> tbResults.* into HistoreResult from tbResults <span class="token function">join</span> dbo.students on tbResults.stuID<span class="token operator">=</span>students.stuIDinner <span class="token function">join</span> dbo.GradeInfo on dbo.GradeInfo.gID<span class="token operator">=</span>students.stuGIDwhere GradeInfo.gName<span class="token operator">=</span><span class="token string">'Y2'</span><span class="token keyword">set</span> @errorSum<span class="token operator">=</span>@errorSum+@@ERROR--删除tbResults表所有Y2学生的考试成绩delete dbo.tbResults from  dbo.tbResults inner <span class="token function">join</span> students on  dbo.tbResults.stuID<span class="token operator">=</span>students.stuIDinner <span class="token function">join</span> dbo.GradeInfo on  dbo.GradeInfo.gID<span class="token operator">=</span>students.stuGIDwhere gName<span class="token operator">=</span><span class="token string">'Y2'</span><span class="token keyword">set</span> @errorSum<span class="token operator">=</span>@errorSum+@@ERROR--删除dbo.students表所有Y2学生的记录，保存到新表HistoreResult中--删除dbo.students表所有Y2学生的记录--根据是否有错误，确认事务是提交还是撤销</code></pre><h2 id="bank案例-触发器事务等"><a href="#bank案例-触发器事务等" class="headerlink" title="bank案例 触发器事务等"></a>bank案例 触发器事务等</h2><pre class=" language-bash"><code class="language-bash">Create Database Bankon primary<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'bank'</span>,filename<span class="token operator">=</span><span class="token string">'D:\database\bank.mdf'</span>,size<span class="token operator">=</span>3mb,maxsize<span class="token operator">=</span>500mb,filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'bank_log'</span>, filename<span class="token operator">=</span><span class="token string">'D:\database\bank_log.ldf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>500mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>use Bankgocreate table bank<span class="token punctuation">(</span>bankID  int identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span> not null,  customerName char<span class="token punctuation">(</span>10<span class="token punctuation">)</span> not null,--顾客姓名 currentMoney money not null --当前<span class="token punctuation">)</span>alter table bank drop column  currentMoeny --删字段alter table bank add currentMoney money not null--加字段alter table bank add constraint CK_currentMoney check<span class="token punctuation">(</span>currentMoney<span class="token operator">>=</span>1<span class="token punctuation">)</span> --检查约束<span class="token keyword">select</span> * from bankinsert into bank<span class="token punctuation">(</span>customerName,currentMoney<span class="token punctuation">)</span>values<span class="token punctuation">(</span><span class="token string">'小小'</span>,1000<span class="token punctuation">)</span>insert into bank<span class="token punctuation">(</span>customerName,currentMoney<span class="token punctuation">)</span>values<span class="token punctuation">(</span><span class="token string">'dada'</span>,1<span class="token punctuation">)</span>---事务begin transaction<span class="token keyword">declare</span> @errorNum int<span class="token keyword">set</span> @errorNum<span class="token operator">=</span>0update bank <span class="token keyword">set</span> currentMoney<span class="token operator">=</span>currentMoney-200 where customerName<span class="token operator">=</span><span class="token string">'小小'</span><span class="token keyword">set</span> @errorNum <span class="token operator">=</span>@errorNum+@@ERRORupdate bank <span class="token keyword">set</span> currentMoney<span class="token operator">=</span>currentMoney+800 where customerName<span class="token operator">=</span><span class="token string">'dada'</span><span class="token keyword">set</span> @errorNum <span class="token operator">=</span>@errorNum+@@ERROR<span class="token keyword">if</span> @errorNum<span class="token operator">&lt;</span><span class="token operator">></span>0beginprint <span class="token string">'转账失败'</span>rollback --回滚end<span class="token keyword">else</span>beginprint <span class="token string">'转账成功'</span>commit --提交print<span class="token string">'转账之后的信息'</span><span class="token keyword">select</span> * from bankenduse master<span class="token keyword">select</span> * from sysdatabases<span class="token function">exec</span> sp_databases--存储过程use Bankgocreate proc getBank@cateId int as begin<span class="token keyword">select</span> * from bank where bankID<span class="token operator">=</span>@cateIdendgoalter proc getBank--修改as begin<span class="token keyword">select</span> * from dbo.bankend<span class="token function">exec</span> getBank use Bank--存储过程分页goalter proc getBank@pageSize int <span class="token operator">=</span>1,@pageindex int <span class="token operator">=</span>5,@rowCount int  output ,@pageCount int outputas begin<span class="token keyword">select</span> * from<span class="token punctuation">(</span>select ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span>over<span class="token punctuation">(</span>order by bankID<span class="token punctuation">)</span> as R, * from bank<span class="token punctuation">)</span> as b where b.R<span class="token operator">></span><span class="token punctuation">(</span>@pageSize-1<span class="token punctuation">)</span>*@pageindex and b.R <span class="token operator">&lt;=</span>@pageSize*@pageindex<span class="token keyword">select</span> @rowCount<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from bank<span class="token keyword">set</span> @pageCount<span class="token operator">=</span>ceiling<span class="token punctuation">(</span>convert<span class="token punctuation">(</span>float,<span class="token punctuation">(</span>@rowCount/@pageindex<span class="token punctuation">))</span><span class="token punctuation">)</span>end<span class="token keyword">declare</span> @pi int, @ps int, @rc int, @pc int<span class="token keyword">set</span> @pi<span class="token operator">=</span>2  --保存页码<span class="token keyword">set</span> @ps<span class="token operator">=</span>5  -- 保存页容量<span class="token punctuation">(</span>每页显示多少行<span class="token punctuation">)</span><span class="token keyword">set</span> @rc<span class="token operator">=</span>0  --总行数 <span class="token keyword">set</span> @pc<span class="token operator">=</span>0  --总页数<span class="token function">exec</span> getBank @pi,@ps,@rc output,@pc output<span class="token keyword">select</span> @pi 页码,@ps 页容量, @rc 总共行数,@pc 总页数--触发器insert into bank<span class="token punctuation">(</span>customerName,currentMoney<span class="token punctuation">)</span>values<span class="token punctuation">(</span><span class="token string">'小周'</span>,2600<span class="token punctuation">)</span>gocreate Trigger chubank on bank<span class="token keyword">for</span> insertas begin<span class="token keyword">select</span> * from bankenddrop Trigger chubank  --alter--视图 不同权限的人看到的不同的视图不一样，其实都是一个表中,当成虚拟表，就是查询语句use Bankgoalter  view vw_customer_currentMoneyas <span class="token keyword">select</span> 姓名<span class="token operator">=</span>customerName,余额<span class="token operator">=</span>currentMoney from bank where bankID<span class="token operator">=</span>1go--查询视图<span class="token keyword">select</span> * from vw_customer_currentMoney---索引 index create <span class="token punctuation">[</span>unique<span class="token punctuation">]</span>唯一， 主键 ，<span class="token punctuation">[</span>clustered<span class="token punctuation">]</span>聚集 <span class="token punctuation">[</span>nonclustered<span class="token punctuation">]</span>非聚集--drop index 表名.索引名 放在sysindexes,索引是建在没个表中的create index index_bank on bank<span class="token punctuation">(</span>bankID<span class="token punctuation">)</span>with fillfactor<span class="token operator">=</span>30<span class="token keyword">select</span> name from sysindexes where name <span class="token operator">=</span><span class="token string">'index_bank'</span><span class="token function">exec</span> sp_helpindex bank--存储过程中的一个系统存储过程go <span class="token function">exec</span> sp_columns bank<span class="token function">exec</span> sp_help bank<span class="token function">exec</span> sp_helpconstraint bank</code></pre><h2 id="汽车案例创建信息表"><a href="#汽车案例创建信息表" class="headerlink" title="汽车案例创建信息表"></a>汽车案例创建信息表</h2><pre class=" language-bash"><code class="language-bash"> --汽车租赁系统create database dbTrafficson<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'dbTraffics'</span>, filename<span class="token operator">=</span><span class="token string">'E:\sql\dbTraffics.mdf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>1024mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>,<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'dbTraffics_ndf'</span>, filename<span class="token operator">=</span><span class="token string">'E:\sql\dbTraffics_ndf.ndf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>1024mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'dbTraffics_log'</span>, filename<span class="token operator">=</span><span class="token string">'E:\sql\dbTraffics.ldf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>1024mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>gouse dbTrafficsgo--类型create table tbType<span class="token punctuation">(</span>  tID int primary key not null,  tName nvarchar<span class="token punctuation">(</span>50<span class="token punctuation">)</span>,  Remarks nvarchar<span class="token punctuation">(</span>200<span class="token punctuation">)</span> null<span class="token punctuation">)</span>--创建tbTraffics表保存汽车信息：create table tbTraffics<span class="token punctuation">(</span> RID bigint, Number  nvarchar<span class="token punctuation">(</span>50<span class="token punctuation">)</span> not null primary key, Type int foreign key references tbType<span class="token punctuation">(</span>tID<span class="token punctuation">)</span>, Name   nvarchar<span class="token punctuation">(</span>20<span class="token punctuation">)</span> not null, color nvarchar<span class="token punctuation">(</span>20<span class="token punctuation">)</span> not null, DailyRent float default<span class="token punctuation">(</span>0.0<span class="token punctuation">)</span>,--日租金 YearsOfservice int default<span class="token punctuation">(</span>12<span class="token punctuation">)</span>,--使用年限 Load nvarchar<span class="token punctuation">(</span>20<span class="token punctuation">)</span><span class="token punctuation">)</span>go</code></pre><h2 id="项目里存储过程分享"><a href="#项目里存储过程分享" class="headerlink" title="项目里存储过程分享"></a>项目里存储过程分享</h2><pre class=" language-bash"><code class="language-bash"> USE <span class="token punctuation">[</span>GSSMS<span class="token punctuation">]</span>GO/****** Object:  StoredProcedure <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span>.<span class="token punctuation">[</span>getprdouceStudents<span class="token punctuation">]</span>    Script Date: 03/17/2013 16:48:05 ******/SET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGOALTER proc <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span>.<span class="token punctuation">[</span>getprdouceStudents<span class="token punctuation">]</span>@pageSize int <span class="token operator">=</span>5,--每页行数,页的容量@pageindex int <span class="token operator">=</span>1, --页的索引@rowCount int output, --总行数（传出参数）@pageCount int output --总页数（传出参数）asbegin<span class="token keyword">select</span> * from<span class="token punctuation">(</span>select ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span>over<span class="token punctuation">(</span>order by SID<span class="token punctuation">)</span> as 序号,* from dbo.Students<span class="token punctuation">)</span>as b whereb.序号<span class="token operator">></span><span class="token punctuation">(</span>@pageindex-1<span class="token punctuation">)</span>*@pageSize and b.序号<span class="token operator">&lt;=</span>@pageindex*@pageSize<span class="token keyword">select</span> @rowCount<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from dbo.Students<span class="token keyword">set</span> @pageCount<span class="token operator">=</span>CEILING<span class="token punctuation">(</span>Convert<span class="token punctuation">(</span>float,@rowCount<span class="token punctuation">)</span>/Convert<span class="token punctuation">(</span>float,@pageSize<span class="token punctuation">))</span>end<span class="token keyword">declare</span> @ps int,@pi int,@rc int,@pc int<span class="token keyword">set</span> @ps<span class="token operator">=</span>5 --保存页面行数<span class="token keyword">set</span> @pi<span class="token operator">=</span>1 --保存页面索引<span class="token keyword">set</span> @rc<span class="token operator">=</span>0 --总行数<span class="token keyword">set</span> @pc<span class="token operator">=</span>0 --总页面<span class="token function">exec</span> getprdouceStudents @ps,@pi,@rc output,@pc output<span class="token keyword">select</span> @ps 页面数,@pi 页面行数,@rc 总共行数,@pc 总页面</code></pre><h2 id="金额自增"><a href="#金额自增" class="headerlink" title="金额自增"></a>金额自增</h2><pre class=" language-bash"><code class="language-bash"> <span class="token keyword">select</span> * from Books update Books <span class="token keyword">set</span> UnitPrice<span class="token operator">=</span>88go<span class="token keyword">declare</span> @position int,@price int<span class="token punctuation">;</span>    <span class="token keyword">set</span> @position<span class="token operator">=</span>17    <span class="token keyword">set</span> @price<span class="token operator">=</span>90while<span class="token punctuation">(</span>1<span class="token operator">=</span>1<span class="token punctuation">)</span>begin    update Books <span class="token keyword">set</span> UnitPrice<span class="token operator">=</span>@price where Id<span class="token operator">=</span>@position    <span class="token keyword">select</span> @position<span class="token operator">=</span>@position+1    <span class="token keyword">select</span> @price<span class="token operator">=</span>@price+2    if<span class="token punctuation">(</span>@position<span class="token operator">></span>35<span class="token punctuation">)</span>    begin    <span class="token keyword">break</span><span class="token punctuation">;</span>     endend</code></pre><h2 id="代码分享myTestBase"><a href="#代码分享myTestBase" class="headerlink" title="代码分享myTestBase"></a>代码分享myTestBase</h2><pre class=" language-bash"><code class="language-bash"> use myTestBasego<span class="token keyword">select</span> * from dbo.GradeInfo<span class="token keyword">select</span> * from dbo.students<span class="token keyword">select</span> * from dbo.tbCourses<span class="token keyword">select</span> * from dbo.tbResults----case .when<span class="token keyword">select</span> tbResults.stuID, students.stuName, tRscore 分数,成绩<span class="token operator">=</span>case                  when tRscore between 90 and 100 <span class="token keyword">then</span> <span class="token string">'A'</span>                 when  tRscore between 80 and 90 <span class="token keyword">then</span> <span class="token string">'B'</span>                 when  tRscore between 70 and 80 <span class="token keyword">then</span> <span class="token string">'C'</span>                 when  tRscore between 60 and 70 <span class="token keyword">then</span> <span class="token string">'D'</span>                 <span class="token keyword">else</span> <span class="token string">'E'</span>                 end from tbResults,students where tbResults.stuID<span class="token operator">=</span>students.stuID go ---if -else print--select *  from tbResults <span class="token keyword">declare</span> @score int  <span class="token keyword">select</span> @score<span class="token operator">=</span>avg<span class="token punctuation">(</span>tRscore<span class="token punctuation">)</span> from tbResults if<span class="token punctuation">(</span>@score<span class="token operator">></span>70<span class="token punctuation">)</span> begin print  <span class="token string">'优秀'</span> +convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>max<span class="token punctuation">)</span>,@score<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token function">top</span> 3 * from tbResults order by tRscore asc end <span class="token keyword">else</span> begin print<span class="token string">'一般'</span> <span class="token keyword">select</span> <span class="token function">top</span> 3 * from tbResults order by tRscore desc end go---while <span class="token keyword">break</span>  方法一Declare @n int while<span class="token punctuation">(</span>1<span class="token operator">=</span>1<span class="token punctuation">)</span>begin<span class="token keyword">select</span> @n<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from tbResults r where r.tRscore <span class="token operator">&lt;</span>81<span class="token keyword">if</span> <span class="token punctuation">(</span>@n<span class="token operator">></span>0<span class="token punctuation">)</span>update tbResults <span class="token keyword">set</span> tRscore<span class="token operator">=</span>tRscore+2 where tRscore<span class="token operator">&lt;</span>98<span class="token keyword">else</span> <span class="token keyword">break</span>endprint <span class="token string">'加分后成绩如下'</span><span class="token keyword">select</span> * from tbResults--- 方法二while<span class="token punctuation">(</span>exists<span class="token punctuation">(</span>select * from tbResults r where r.tRscore <span class="token operator">&lt;</span>83<span class="token punctuation">))</span>beginupdate tbResults <span class="token keyword">set</span> tRscore<span class="token operator">=</span>tRscore+2 where tRscore<span class="token operator">&lt;</span>98end<span class="token keyword">select</span> * from tbResults---内查询 <span class="token function">join</span><span class="token keyword">select</span> s.stuName 姓名,TR.tRscore 成绩,TC.tCName from students as s <span class="token function">join</span> tbResults as TR on <span class="token punctuation">(</span>s.stuID<span class="token operator">=</span>TR.stuID<span class="token punctuation">)</span> <span class="token function">join</span> dbo.tbCourses as TC on<span class="token punctuation">(</span>TR.tCID<span class="token operator">=</span>TC.tCID<span class="token punctuation">)</span>--where综合查询<span class="token keyword">select</span> s.stuName 姓名,TR.tRscore 成绩,TC.tCName from students as s,tbResults as TR,tbCourses as TC where s.stuID<span class="token operator">=</span>TR.stuID and TR.tCID<span class="token operator">=</span>TC.tCID--左连接,左边全部要显示,右边没有的为null<span class="token keyword">select</span> * from tbCourses as c left <span class="token function">join</span> tbResults as r on c.tCID<span class="token operator">=</span>r.tCID --右连接,右边全部要显示<span class="token keyword">select</span> * from tbCourses as c right <span class="token function">join</span> tbResults as r on c.tCID<span class="token operator">=</span>r.tCID --in，not <span class="token keyword">in</span><span class="token keyword">select</span> * from tbCourses where tCName in<span class="token punctuation">(</span><span class="token string">'程序逻辑'</span>,<span class="token string">'C#基础'</span><span class="token punctuation">)</span>--link<span class="token keyword">select</span> * from tbCourses where tCName like <span class="token string">'[^C#]%'</span>--不包含<span class="token keyword">select</span> * from tbCourses where tCName like <span class="token string">'C#%'</span>--包含print <span class="token string">'服务器'</span>+@@SERVERNAMEprint <span class="token string">'SQL的版本:'</span>+ @@VERSION<span class="token keyword">select</span> s.stuName,c.tCID,r.tRtime,r.tRscore,c.tCName from students as s,tbCourses as c,tbResults as r where s.stuID<span class="token operator">=</span>r.stuID and c.tCID<span class="token operator">=</span>r.tCID and r.tRtime<span class="token operator">=</span><span class="token string">'2012-12-24'</span>--子查询<span class="token keyword">select</span> * from students<span class="token keyword">select</span> * from tbCourses<span class="token keyword">select</span> * from tbResultsgoinsert into students<span class="token punctuation">(</span>stuName,stuSex,stuCardID,stuGID,BornDate<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'小肖'</span>,<span class="token string">'女'</span>,<span class="token string">'420108989099999999'</span>,1,1992-06-09<span class="token punctuation">)</span><span class="token keyword">declare</span> @birthday datetime<span class="token keyword">select</span> @birthday<span class="token operator">=</span>BornDate from students  where stuName<span class="token operator">=</span><span class="token string">'张三'</span><span class="token keyword">select</span> * from students where BornDate<span class="token operator">></span>@birthday<span class="token keyword">select</span> * from students where BornDate<span class="token operator">></span><span class="token punctuation">(</span>select BornDate from students  where stuName<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">)</span>--索引create index index_students on students<span class="token punctuation">(</span>stuID<span class="token punctuation">)</span>with fillfactor<span class="token operator">=</span>30<span class="token keyword">select</span> name from sysindexes where name<span class="token operator">=</span><span class="token string">'index_students_students_stuID'</span>drop index students.index_studentscreate unique index index_students_students_stuID on students<span class="token punctuation">(</span>stuID<span class="token punctuation">)</span>with fillfactor<span class="token operator">=</span>30<span class="token keyword">select</span> * from  students with <span class="token punctuation">(</span>index<span class="token operator">=</span>index_students_students_stuID<span class="token punctuation">)</span>where stuID<span class="token operator">=</span>3<span class="token function">exec</span> sp_helpindex students --存储过程中的一个系统存储过程--存储过程 编程基础没有达到90分名单goalter proc my_getResult@ucnt int outputas begin<span class="token keyword">select</span> R.tRscore,R.tCID,R.stuID,s.stuName,c.tCName from dbo.tbResults as R,dbo.students as s,tbCourses as c where R.stuID<span class="token operator">=</span>s.stuID  and R.tRscore<span class="token operator">&lt;</span>90 and c.tCID<span class="token operator">=</span>R.tCID<span class="token keyword">select</span> @ucnt<span class="token operator">=</span>count<span class="token punctuation">(</span>R.tRscore<span class="token punctuation">)</span> from dbo.tbResults as R,dbo.students as s,tbCourses as c where R.stuID<span class="token operator">=</span>s.stuID  and R.tRscore<span class="token operator">&lt;</span>90 and c.tCID<span class="token operator">=</span>R.tCIDend<span class="token keyword">declare</span> @ucn int<span class="token keyword">set</span>  @ucn<span class="token operator">=</span>0<span class="token function">exec</span> my_getResult @ucn output<span class="token keyword">select</span> @ucn 没到90分人数/////////////use mastergo--创建数据库<span class="token keyword">if</span> exists<span class="token punctuation">(</span>select * from sysdatabases where name<span class="token operator">=</span><span class="token string">'myTestBase'</span><span class="token punctuation">)</span>--所有数据库begindrop database myTestBaseendcreate database myTestBaseon<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'myTestBase'</span>,  filename<span class="token operator">=</span><span class="token string">'C:\Program Files\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\myTestBase.mdf'</span>,  size<span class="token operator">=</span>5mb,  maxsize<span class="token operator">=</span>100mb,  filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'myTestBase_log'</span>,  filename<span class="token operator">=</span><span class="token string">'C:\Program Files\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\myTestBase_log.ldf'</span>,  size<span class="token operator">=</span>5mb,  maxsize<span class="token operator">=</span>100mb,  filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>use myTestBase<span class="token keyword">if</span> exists<span class="token punctuation">(</span>select * from sysobjects where name<span class="token operator">=</span><span class="token string">'students'</span> <span class="token punctuation">)</span>begindrop table students --删除end go--创建表create table students <span class="token punctuation">(</span>  stuID int identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span> not null primary key, --标识列，设置主键  stuName nvarchar<span class="token punctuation">(</span>50<span class="token punctuation">)</span> not null,  stuSex char<span class="token punctuation">(</span>2<span class="token punctuation">)</span> default<span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">)</span>,  stuCardID char<span class="token punctuation">(</span>18<span class="token punctuation">)</span> null check<span class="token punctuation">(</span>len<span class="token punctuation">(</span>stuCardID<span class="token punctuation">)</span><span class="token operator">=</span>18<span class="token punctuation">)</span>,--约束  stuGID int null<span class="token punctuation">)</span>go create table GradeInfo <span class="token punctuation">(</span>   gID int  identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span> not null primary key, --标识列，设置主键   gName nvarchar<span class="token punctuation">(</span>50<span class="token punctuation">)</span> not null <span class="token punctuation">)</span> go --加外键约束 alter table students  add constraint FK_students_stuGID_GradeInfo foreign key<span class="token punctuation">(</span>stuID<span class="token punctuation">)</span> references GradeInfo<span class="token punctuation">(</span>gID<span class="token punctuation">)</span> go  --删约束 alter table 表名 drop constraint 约束名                            <span class="token keyword">select</span> * from students,GradeInfo---插入数据insert into GradeInfo<span class="token punctuation">(</span>gName<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'一年级'</span><span class="token punctuation">)</span>insert into GradeInfo<span class="token punctuation">(</span>gName<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'二年级'</span><span class="token punctuation">)</span>insert into GradeInfo<span class="token punctuation">(</span>gName<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'三年级'</span><span class="token punctuation">)</span>insert into students<span class="token punctuation">(</span>stuName,stuCardID,stuGID<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'张三'</span>,<span class="token string">'430111199909092075'</span>,1<span class="token punctuation">)</span>create table tbCourses --课程信息表<span class="token punctuation">(</span>  tCID int identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span>, tCName nvarchar<span class="token punctuation">(</span>30<span class="token punctuation">)</span>, tCClass int, gID int, tCRmark nvarchar<span class="token punctuation">(</span>max<span class="token punctuation">)</span>  <span class="token punctuation">)</span>create table tbResults --考试成绩表<span class="token punctuation">(</span>  tRID int ,tCID int, stuID int ,tRtime date, tRscore int ,tRRmark nvarchar<span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">select</span> * from students --学生表<span class="token keyword">select</span> * from GradeInfo --年纪表<span class="token keyword">select</span> * from tbCourses<span class="token keyword">select</span> * from tbResultstruncate table tbCourses --清除数据、还原标识列insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'程序逻辑'</span>,30,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'编程基础'</span>,30,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'面向对象设计'</span>,30,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'C#基础'</span>,123,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'C#基础'</span>,235,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbResults<span class="token punctuation">(</span>tCID,stuID,tRtime,tRscore,tRRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span>1,1,<span class="token string">'2012-12-24'</span>,88,<span class="token string">'语文'</span><span class="token punctuation">)</span>insert into students<span class="token punctuation">(</span>stuName,stuSex,stuCardID,stuGID<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'小小'</span>,<span class="token string">'女'</span>,<span class="token string">'4201023001230120'</span>,2<span class="token punctuation">)</span><span class="token keyword">select</span> * from tbCourses where tCClass Like<span class="token string">'3%'</span><span class="token keyword">select</span> * from tbCourses where tCClass Like<span class="token string">'_3%'</span> delete  from tbCourses where tCID<span class="token operator">=</span>7--删 <span class="token keyword">select</span> * from tbCourses order by tCID ASCuse mastergo <span class="token keyword">select</span> * from sysdatabases  --查询所有数据库use myTestBasego<span class="token keyword">select</span> * from sys.objects where name<span class="token operator">=</span><span class="token string">'students'</span>create database schoolA --创建数据库on primary<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'MyschoolA'</span>, filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA.mdf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>500mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>,<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'MyschoolA_2'</span>,  filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA_2.ndf'</span>,  size<span class="token operator">=</span>3mb,  maxsize<span class="token operator">=</span>500mb,  filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span>   name <span class="token operator">=</span><span class="token string">'MyschoolA_log'</span>,   filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA_log.ldf'</span>,   size<span class="token operator">=</span>3mb,   maxsize<span class="token operator">=</span>500mb,   filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>--alter table tastduents 删除表示列--drop colum ssid--go---在加进去-- alter table tastduents -- ADD ssid int identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span> not null  primary key-- go---内连接---- <span class="token keyword">select</span> Book.* from Book inner jion Catefory on Book.id<span class="token operator">=</span> Catefory.id---联合查询---select Book.* from Book,Catrfory where Book.id<span class="token operator">=</span>catefory.id-- case-when<span class="token keyword">select</span> tCClass ,<span class="token keyword">case</span> tCClasswhen 30 <span class="token keyword">then</span> <span class="token string">'正常课时'</span><span class="token keyword">else</span> <span class="token string">'正常+课时'</span>endfrom tbCourses</code></pre><h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><pre class=" language-bash"><code class="language-bash">  SELECT InforSource FROM dbo.viewShopAllInfo   ORDER BY CHARINDEX<span class="token punctuation">(</span>InforSource,<span class="token string">'1,0,2,3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Split函数"><a href="#Split函数" class="headerlink" title="Split函数"></a>Split函数</h2><pre class=" language-bash"><code class="language-bash"> CREATE FUNCTION dbo.SplitString<span class="token punctuation">(</span>          @Expression NVARCHAR<span class="token punctuation">(</span>4000<span class="token punctuation">)</span>, --要拆分的字符串          @Delimiter NVARCHAR<span class="token punctuation">(</span>100<span class="token punctuation">)</span>, --拆分符号          @n INT --要得到已拆分的返回字符串位置<span class="token punctuation">)</span>RETURNS NVARCHAR<span class="token punctuation">(</span>4000<span class="token punctuation">)</span>ASBEGINDECLARE @p INTSET @p <span class="token operator">=</span> CharIndex<span class="token punctuation">(</span>@Delimiter,@Expression<span class="token punctuation">)</span>  --获得第一个拆分符号所在的首位置IF @p <span class="token operator">></span> 0          BEGIN          SET @p <span class="token operator">=</span> @p + Len<span class="token punctuation">(</span>@Delimiter<span class="token punctuation">)</span> - 1          ENDDECLARE @i INTSET @i <span class="token operator">=</span> 1WHILE @i <span class="token operator">&lt;</span> @n          BEGIN          SET @i <span class="token operator">=</span> @i + 1          SET @Expression <span class="token operator">=</span> SubString<span class="token punctuation">(</span>@Expression, @p + 1,Len<span class="token punctuation">(</span>@Expression<span class="token punctuation">)</span> - @p <span class="token punctuation">)</span>          SET @p <span class="token operator">=</span> CharIndex<span class="token punctuation">(</span>@Delimiter,@Expression<span class="token punctuation">)</span>          IF @p <span class="token operator">></span> 0                    BEGIN                    SET @p <span class="token operator">=</span> @p + Len<span class="token punctuation">(</span>@Delimiter<span class="token punctuation">)</span> - 1                    END          ELSE                    BEGIN                    BREAK                    ENDENDDECLARE @s NVARCHAR<span class="token punctuation">(</span>1000<span class="token punctuation">)</span>IF @p <span class="token operator">=</span> 0 AND @i <span class="token operator">=</span> @n          BEGIN          SET @s <span class="token operator">=</span> @Expression          ENDELSE          IF @i <span class="token operator">=</span> @n          BEGIN          SET @s <span class="token operator">=</span> SubString<span class="token punctuation">(</span>@Expression, 1,@p - Len<span class="token punctuation">(</span>@Delimiter<span class="token punctuation">))</span>          ENDRETURN @sEND</code></pre><h2 id="substring用法"><a href="#substring用法" class="headerlink" title="substring用法"></a>substring用法</h2><pre class=" language-bash"><code class="language-bash"> SELECT keywords,substring<span class="token punctuation">(</span>substring<span class="token punctuation">(</span>keywords, CHARINDEX<span class="token punctuation">(</span><span class="token string">'$'</span>,keywords,CONVERT<span class="token punctuation">(</span>INT,CHARINDEX <span class="token punctuation">(</span><span class="token string">'$'</span>,keywords<span class="token punctuation">))</span>+1<span class="token punctuation">)</span>+1,100<span class="token punctuation">)</span>,  CHARINDEX<span class="token punctuation">(</span><span class="token string">'$'</span>,keywords,CONVERT<span class="token punctuation">(</span>INT,CHARINDEX <span class="token punctuation">(</span><span class="token string">'$'</span>,keywords<span class="token punctuation">))</span><span class="token punctuation">)</span>,100<span class="token punctuation">)</span>FROM dbo.house_searchs</code></pre><h2 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h2><pre class=" language-bash"><code class="language-bash"> --修改二手房查询的表结构ALTER TABLE house_searchs ADD sortdate datetime DEFAULT getdate<span class="token punctuation">(</span><span class="token punctuation">)</span>update house_searchs <span class="token keyword">set</span> sortdate <span class="token operator">=</span> convert<span class="token punctuation">(</span>datetime,left<span class="token punctuation">(</span>cast<span class="token punctuation">(</span>publicdate as varchar<span class="token punctuation">)</span>,4<span class="token punctuation">)</span> + <span class="token string">'-'</span> + substring<span class="token punctuation">(</span>cast<span class="token punctuation">(</span>publicdate as varchar<span class="token punctuation">)</span>,5,2<span class="token punctuation">)</span> +<span class="token string">'-'</span> + right<span class="token punctuation">(</span>cast<span class="token punctuation">(</span>publicdate as varchar<span class="token punctuation">)</span>,2<span class="token punctuation">)</span> + <span class="token string">' 00:00:00'</span><span class="token punctuation">)</span> </code></pre><h2 id="分组按照时间汇总"><a href="#分组按照时间汇总" class="headerlink" title="分组按照时间汇总"></a>分组按照时间汇总</h2><pre class=" language-bash"><code class="language-bash"> ---以部门,时间汇总 时间字段OIS_Date--这是取到所有的总和,我想要时间之间的总和<span class="token keyword">select</span> DeptID,    in_price <span class="token operator">=</span>sum<span class="token punctuation">(</span>CASE OIS_Type when <span class="token string">'4'</span>  <span class="token keyword">then</span> OIS_Price*OIS_Count END<span class="token punctuation">)</span>,    out_price <span class="token operator">=</span> sum<span class="token punctuation">(</span>CASE OIS_Type when <span class="token string">'7'</span>  <span class="token keyword">then</span> OIS_Price*OIS_Count END<span class="token punctuation">)</span>from Oper_OutInStockStreamWHERE  <span class="token punctuation">(</span>OIS_Date<span class="token operator">>=</span><span class="token string">'2015-01-27 00:00:01'</span> AND OIS_Date<span class="token operator">&lt;=</span><span class="token string">'2015-05-01 23:59:59'</span><span class="token punctuation">)</span>group by  DeptID</code></pre><h2 id="更新加行号"><a href="#更新加行号" class="headerlink" title="更新加行号"></a>更新加行号</h2><pre class=" language-bash"><code class="language-bash"> UPDATE His_Cart SET IsShopping<span class="token operator">=</span><span class="token string">'0'</span>,DETAIL_ID<span class="token operator">=</span>temp.ridFROM His_Cart,<span class="token punctuation">(</span>SELECT ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> OVER <span class="token punctuation">(</span>ORDER BY id<span class="token punctuation">)</span> rid,id FROM dbo.His_CartWHERE CreatedBy<span class="token operator">=</span><span class="token string">'jzt'</span><span class="token punctuation">)</span> temp WHERE His_Cart.ID<span class="token operator">=</span>temp.id</code></pre><h2 id="根据时间查询"><a href="#根据时间查询" class="headerlink" title="根据时间查询"></a>根据时间查询</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">select</span> * from info where DateDiff<span class="token punctuation">(</span>dd,datetime,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0 --查询24小时内的: <span class="token keyword">select</span> * from info where DateDiff<span class="token punctuation">(</span>hh,datetime,getDate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">&lt;=</span>24 --info为表名,datetime为数据库中的字段值--查询当天：<span class="token keyword">select</span> * from info where DateDiff<span class="token punctuation">(</span>dd,datetime,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0--查询24小时内的:<span class="token keyword">select</span> * from info where DateDiff<span class="token punctuation">(</span>hh,datetime,getDate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">&lt;=</span>24--info为表名,datetime为数据库中的字段值Sql代码--查询当天记录另类的方法 SELECT * FROM j_GradeShop WHERE <span class="token punctuation">(</span>GAddTime BETWEEN CONVERT<span class="token punctuation">(</span>datetime, LEFT<span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>, 10<span class="token punctuation">)</span> + ’ 00:00:00.000’<span class="token punctuation">)</span> AND CONVERT<span class="token punctuation">(</span>datetime, LEFT<span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>, 10<span class="token punctuation">)</span> + ’ 00:00:00.000’<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span> ORDER BY GAddTime DESC--查询当天记录另类的方法SELECT *FROM j_GradeShopWHERE <span class="token punctuation">(</span>GAddTime BETWEEN CONVERT<span class="token punctuation">(</span>datetime, LEFT<span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>, 10<span class="token punctuation">)</span> + ’ 00:00:00.000’<span class="token punctuation">)</span>AND CONVERT<span class="token punctuation">(</span>datetime, LEFT<span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>, 10<span class="token punctuation">)</span> + ’ 00:00:00.000’<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span>ORDER BY GAddTime DESCDATEDIFF 函数:语法:DATEDIFF <span class="token punctuation">(</span> datepart , startdate , enddate <span class="token punctuation">)</span>备注:enddate 减去 startdate。如果 startdate 晚于 enddate，则返回负值。如果结果超出整数值范围，则 DATEDIFF 将产生错误。对于毫秒，最大数是 24 天 20 小时 31 分钟零 23.647 秒。对于秒，最大数是 68 年。跨分钟、秒和毫秒等边界计算的方法使得 DATEDIFF 指定的结果在所有数据类型中均一致。结果是带正负号的整数值，它等于跨第一个和第二个日期间的 datepart 边界数。例如，在 1 月 4 日（星期日）和 1 月 11 日（星期日）之间的星期数是 1。可以再MSSQL中测试:Sql代码--两个时间差刚好是24 --打印的方式 print dateDiff<span class="token punctuation">(</span>hh,’2009-1-1 0:0:0’,’2009-1-2 0:0:0’<span class="token punctuation">)</span> --查询的方式 print dateDiff<span class="token punctuation">(</span>hh,’2009-1-1 0:0:0’,’2009-1-2 0:0:0’<span class="token punctuation">)</span>--两个时间差刚好是24--打印的方式print dateDiff<span class="token punctuation">(</span>hh,’2009-1-1 0:0:0’,’2009-1-2 0:0:0’<span class="token punctuation">)</span>--查询的方式print dateDiff<span class="token punctuation">(</span>hh,’2009-1-1 0:0:0’,’2009-1-2 0:0:0’<span class="token punctuation">)</span>Sql代码--本月记录 SELECT * FROM 表 WHERE datediff<span class="token punctuation">(</span>month,<span class="token punctuation">[</span>dateadd<span class="token punctuation">]</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0 --本周记录 SELECT * FROM 表 WHERE datediff<span class="token punctuation">(</span>week,<span class="token punctuation">[</span>dateadd<span class="token punctuation">]</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0 --包括本年这些查询方式是一样的--本月记录SELECT * FROM 表 WHERE datediff<span class="token punctuation">(</span>month,<span class="token punctuation">[</span>dateadd<span class="token punctuation">]</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0--本周记录SELECT * FROM 表 WHERE datediff<span class="token punctuation">(</span>week,<span class="token punctuation">[</span>dateadd<span class="token punctuation">]</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0sql server中的时间函数1. 当前系统日期、时间<span class="token keyword">select</span> getdate<span class="token punctuation">(</span><span class="token punctuation">)</span>2. dateadd 在向指定日期加上一段时间的基础上，返回新的 datetime 值例如：向日期加上2天<span class="token keyword">select</span> dateadd<span class="token punctuation">(</span>day,2,’2004-10-15’<span class="token punctuation">)</span> --返回：2004-10-17 00:00:00.0003. datediff 返回跨两个指定日期的日期和时间边界数。<span class="token keyword">select</span> datediff<span class="token punctuation">(</span>day,’2004-09-01’,’2004-09-18’<span class="token punctuation">)</span> --返回：174. datepart 返回代表指定日期的指定日期部分的整数。SELECT DATEPART<span class="token punctuation">(</span>month, ’2004-10-15’<span class="token punctuation">)</span> --返回 105. datename 返回代表指定日期的指定日期部分的字符串SELECT datename<span class="token punctuation">(</span>weekday, ’2004-10-15’<span class="token punctuation">)</span> --返回：星期五6. day<span class="token punctuation">(</span><span class="token punctuation">)</span>, month<span class="token punctuation">(</span><span class="token punctuation">)</span>,year<span class="token punctuation">(</span><span class="token punctuation">)</span> --可以与datepart对照一下<span class="token keyword">select</span> 当前日期<span class="token operator">=</span>convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">)</span>,120<span class="token punctuation">)</span>,当前时间<span class="token operator">=</span>convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>8<span class="token punctuation">)</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">)</span>,114<span class="token punctuation">)</span><span class="token keyword">select</span> datename<span class="token punctuation">(</span>dw,’2004-10-15’<span class="token punctuation">)</span><span class="token keyword">select</span> 本年第多少周<span class="token operator">=</span>datename<span class="token punctuation">(</span>week,’2004-10-15’<span class="token punctuation">)</span>,今天是周几<span class="token operator">=</span>datename<span class="token punctuation">(</span>weekday,’2004-10-15’<span class="token punctuation">)</span>函数 参数/功能GetDate<span class="token punctuation">(</span> <span class="token punctuation">)</span> 返回系统目前的日期与时间DateDiff <span class="token punctuation">(</span>interval,date1,date2<span class="token punctuation">)</span> 以interval 指定的方式，返回date2 与date1两个日期之间的差值 date2-date1DateAdd <span class="token punctuation">(</span>interval,number,date<span class="token punctuation">)</span> 以interval指定的方式，加上number之后的日期DatePart <span class="token punctuation">(</span>interval,date<span class="token punctuation">)</span> 返回日期date中，interval指定部分所对应的整数值DateName <span class="token punctuation">(</span>interval,date<span class="token punctuation">)</span> 返回日期date中，interval指定部分所对应的字符串名称参数 interval的设定值如下：值 缩 写（Sql Server） Access 和 ASP 说明Year Yy yyyy 年 1753 ~ 9999Quarter Qq q 季 1 ~ 4Month Mm m 月1 ~ 12Day of year Dy y 一年的日数,一年中的第几日 1-366Day Dd d 日，1-31Weekday Dw w 一周的日数，一周中的第几日 1-7Week Wk ww 周，一年中的第几周 0 ~ 51Hour Hh h 时0 ~ 23Minute Mi n 分钟0 ~ 59Second Ss s 秒 0 ~ 59Millisecond Ms - 毫秒 0 ~ 999access 和 asp 中用date<span class="token punctuation">(</span><span class="token punctuation">)</span>和now<span class="token punctuation">(</span><span class="token punctuation">)</span>取得系统日期时间；其中DateDiff,DateAdd,DatePart也同是能用于Access和asp中，这些函数的用法也类似举例：1.GetDate<span class="token punctuation">(</span><span class="token punctuation">)</span> 用于sql server :select GetDate<span class="token punctuation">(</span><span class="token punctuation">)</span>2.DateDiff<span class="token punctuation">(</span>’s’,’2005-07-20’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 514592 秒DateDiff<span class="token punctuation">(</span>’d’,’2005-07-20’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 5 天3.DatePart<span class="token punctuation">(</span>’w’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 2 即星期一<span class="token punctuation">(</span>周日为1，周六为7<span class="token punctuation">)</span>DatePart<span class="token punctuation">(</span>’d’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 25即25号DatePart<span class="token punctuation">(</span>’y’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 206即这一年中第206天DatePart<span class="token punctuation">(</span>’yyyy’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 2005即2005年</code></pre><h2 id="表横向展示"><a href="#表横向展示" class="headerlink" title="表横向展示"></a>表横向展示</h2><pre class=" language-bash"><code class="language-bash"> SELECT PDNAME as 设备类别,  max<span class="token punctuation">(</span>case ftName when <span class="token string">'临床功能'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 临床功能,  max<span class="token punctuation">(</span>case ftName when <span class="token string">'有形风险'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 有形风险,  max<span class="token punctuation">(</span>case ftName when <span class="token string">'问题避免概率'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 问题避免概率,   max<span class="token punctuation">(</span>case ftName when <span class="token string">'事故历史'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 事故历史,  max<span class="token punctuation">(</span>case ftName when <span class="token string">'管理部门的特殊要求'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 管理部门的特殊要求  FROM<span class="token punctuation">(</span>SELECT  fs.PDCode ,        fdt.PDNAME PDNAME ,        ft.Name ftName ,        SUM<span class="token punctuation">(</span>CONVERT<span class="token punctuation">(</span>INT, fps.score<span class="token punctuation">))</span> scoreFROM    FixeaAssetsPMConS fs        LEFT JOIN FixeaAssetsPMScore fps ON fps.id <span class="token operator">=</span> fs.PMScoreID        LEFT JOIN dbo.FixeaAssetsPMScoreType ft ON ft.ID <span class="token operator">=</span> fps.NameTypeID        LEFT JOIN FixeaPreventiveDeviceType fdt ON fdt.PDCode <span class="token operator">=</span> fs.PDCodeGROUP BY ft.Name ,        fs.PDCode ,        fdt.PDNAMEHAVING fs.PDCode <span class="token operator">!=</span><span class="token string">''</span><span class="token punctuation">)</span> tbgroup by PDNAME     </code></pre><h2 id="无联系2个表拼接"><a href="#无联系2个表拼接" class="headerlink" title="无联系2个表拼接"></a>无联系2个表拼接</h2><pre class=" language-bash"><code class="language-bash"> SELECT  BuyDate,BaseID,sum<span class="token punctuation">(</span>IsBuycount<span class="token punctuation">)</span> IsBuycount,sum<span class="token punctuation">(</span>IsNollBuycount<span class="token punctuation">)</span> IsNollBuycount,sum<span class="token punctuation">(</span>HousePartner<span class="token punctuation">)</span> HousePartner FROM <span class="token punctuation">(</span>SELECT * FROM --购买者<span class="token punctuation">(</span>select convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span> BuyDate,BaseID, count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> IsBuycount,<span class="token string">''</span> AS IsNollBuycount,<span class="token string">''</span> AS HousePartnerfrom  dbo.RecCustomer WHERE IsBuy<span class="token operator">=</span>1  group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> a  UNION  SELECT * FROM  --没购买 <span class="token punctuation">(</span>select convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span> BuyDate,BaseID,<span class="token string">''</span> AS IsBuycount , count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> IsNollBuycount,<span class="token string">''</span> AS HousePartnerfrom  dbo.RecCustomer WHERE IsBuy<span class="token operator">=</span>0group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> b   UNION   --合伙人 SELECT * FROM <span class="token punctuation">(</span> <span class="token keyword">select</span> convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,CreateDate,120<span class="token punctuation">)</span> BuyDate,BaseID, <span class="token string">''</span> AS IsBuycount , <span class="token string">''</span> AS IsNollBuycount,count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> HousePartnerfrom  dbo.Partner_CommsionHouse WHERE IsDeleted<span class="token operator">=</span>0group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,CreateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> c <span class="token punctuation">)</span> temp WHERE temp.BaseID<span class="token operator">=</span><span class="token string">'A6F4C7A7-D308-4DA6-BD0F-B1F50E27783D'</span> AND temp.BuyDate BETWEEN <span class="token string">'2014-10-01'</span> and <span class="token string">'2014-10-21'</span> GROUP BY temp.BuyDate,temp.BaseID</code></pre><h2 id="有联系2个表拼接"><a href="#有联系2个表拼接" class="headerlink" title="有联系2个表拼接"></a>有联系2个表拼接</h2><pre class=" language-bash"><code class="language-bash">SELECT * FROM <span class="token punctuation">(</span> SELECT a.BaseID aBaseID,b.BaseID bBaseID,c.BaseID cBaseID, ISNULL<span class="token punctuation">(</span>BuyDate,ISNULL<span class="token punctuation">(</span>NullBuyDate,Date<span class="token punctuation">))</span> BuyDate,ISNULL<span class="token punctuation">(</span>Date,ISNULL<span class="token punctuation">(</span>BuyDate,NullBuyDate<span class="token punctuation">))</span> Date,ISNULL<span class="token punctuation">(</span>NullBuyDate,ISNULL<span class="token punctuation">(</span>BuyDate,Date<span class="token punctuation">))</span> NullBuyDate, ISNULL<span class="token punctuation">(</span>IsBuycount,0<span class="token punctuation">)</span> IsBuycount, ISNULL<span class="token punctuation">(</span>IsNollBuycount,0<span class="token punctuation">)</span> IsNollBuycount, ISNULL<span class="token punctuation">(</span>HousePartner,0<span class="token punctuation">)</span> HousePartner FROM <span class="token punctuation">(</span> <span class="token keyword">select</span> convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span> BuyDate,BaseID, count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> IsBuycountfrom  dbo.RecCustomer WHERE IsBuy<span class="token operator">=</span>1  group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> a RIGHT <span class="token function">join</span> <span class="token punctuation">(</span>select convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span> NullBuyDate,BaseID, count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> IsNollBuycountfrom  dbo.RecCustomer WHERE IsBuy<span class="token operator">=</span>0group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> b  ON  a.BuyDate<span class="token operator">=</span>b.NullBuyDate LEFT JOIN <span class="token punctuation">(</span>select convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,CreateDate,120<span class="token punctuation">)</span> Date,BaseID, count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> HousePartnerfrom  dbo.Partner_CommsionHouse WHERE IsDeleted<span class="token operator">=</span>0group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,CreateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> cON b.NullBuyDate<span class="token operator">=</span>c.Date<span class="token punctuation">)</span> temp WHERE temp.aBaseID<span class="token operator">=</span>temp.bBaseID AND  temp.aBaseID<span class="token operator">=</span><span class="token string">'A6F4C7A7-D308-4DA6-BD0F-B1F50E27783D'</span>AND temp.BuyDate BETWEEN   <span class="token string">'2014-10-16'</span>    AND  <span class="token string">'2014-10-22'</span></code></pre><h2 id="2个数据库表互相导数据"><a href="#2个数据库表互相导数据" class="headerlink" title="2个数据库表互相导数据"></a>2个数据库表互相导数据</h2><pre class=" language-bash"><code class="language-bash">服务器数据库之间互相导入数据insert into <span class="token punctuation">[</span>HPD2.0<span class="token punctuation">]</span>.dbo.SysMenu <span class="token keyword">select</span> * from <span class="token punctuation">[</span>10.3.1.27<span class="token punctuation">]</span>.<span class="token punctuation">[</span>HPD2.0<span class="token punctuation">]</span>.dbo.SysMenu要是找不到服务器--添加服务器EXEC sp_addlinkedserver@server<span class="token operator">=</span><span class="token string">'10.3.1.27'</span>,--被访问的服务器别名（习惯上直接使用目标服务器IP，或取个别名如：JOY）@srvproduct<span class="token operator">=</span><span class="token string">''</span>,@provider<span class="token operator">=</span><span class="token string">'SQLOLEDB'</span>,@datasrc<span class="token operator">=</span><span class="token string">'10.3.1.27'</span> --要访问的服务器--设置账号和密码EXEC sp_addlinkedsrvlogin<span class="token string">'10.3.1.27'</span>, <span class="token string">'false'</span>,NULL,<span class="token string">'sa'</span>, --帐号<span class="token string">'JZTeya0!'</span> --密码insert into <span class="token punctuation">[</span>shenzhengHPD2.0<span class="token punctuation">]</span>.dbo.BaseSupplierInfo <span class="token keyword">select</span> * from <span class="token punctuation">[</span>qingdaoHPD2.0<span class="token punctuation">]</span>.dbo.BaseSupplierInfo/////////////////////////列名不一定要相同，只要你在HH中列出要插入列的列表跟select from mm表中的选择的列的列表一一对应就可以了，当然两边的数据类型应该是兼容的。 insert into hh <span class="token punctuation">(</span>fielda,fieldb,fieldc<span class="token punctuation">)</span> <span class="token keyword">select</span> fieldx,fieldy,fieldz from mm 复制代码 代码如下:---更新计量点中不存在的数据,将台帐中的信息转移到计量点中 insert into MetricPoints <span class="token punctuation">(</span>MeterID,MetricPointName,<span class="token punctuation">[</span>Description<span class="token punctuation">]</span>,DepartmentID,MediumID<span class="token punctuation">)</span> <span class="token punctuation">(</span>SELECT m.MeterID,m.MetricItems+m.InstallPlace as m_MetricPointName,m.MetricItems,m.DepartmentID,m.MediumID FROM Meters m WHERE NOT EXISTS <span class="token punctuation">(</span>SELECT 1 FROM MetricPoints WHERE MetricPoints.MeterID <span class="token operator">=</span> m.MeterID <span class="token punctuation">)</span> and m.MediumID <span class="token operator">=</span>2<span class="token punctuation">)</span> 声名：a,b ,都是表 复制代码 代码如下:--b表存在（两表结构一样） insert into b <span class="token keyword">select</span> * from a 若两表只是有部分（字段）相同，则 复制代码 代码如下:insert into b<span class="token punctuation">(</span>col1,col2,col3,col4,<span class="token punctuation">..</span>.<span class="token punctuation">)</span> <span class="token keyword">select</span> col1,col2,col3,col4,<span class="token punctuation">..</span>. from a where<span class="token punctuation">..</span>. 把表a插入到表b中去。 复制代码 代码如下:--b表不存在 <span class="token keyword">select</span> * into b from a // <span class="token keyword">select</span> <span class="token punctuation">(</span>字段1，字段2，<span class="token punctuation">..</span>.<span class="token punctuation">)</span> into b from a </code></pre><h2 id="页总数"><a href="#页总数" class="headerlink" title="页总数"></a>页总数</h2><pre class=" language-bash"><code class="language-bash"> SELECT  CEILING<span class="token punctuation">((</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> *2+0.0<span class="token punctuation">)</span>/10<span class="token punctuation">)</span> TotalPageCount,COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> TotalCountFROM    <span class="token punctuation">(</span> SELECT    ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> OVER <span class="token punctuation">(</span> ORDER BY customer DESC <span class="token punctuation">)</span> AS rowIndex ,                    SUM<span class="token punctuation">(</span>OutStockCount * Price<span class="token punctuation">)</span> totalPrice ,                    SUM<span class="token punctuation">(</span>OutStockCount<span class="token punctuation">)</span> totalStock ,                    COUNT<span class="token punctuation">(</span>GoodsName<span class="token punctuation">)</span> GoodsNumber ,                    COUNT<span class="token punctuation">(</span>VoucherCode<span class="token punctuation">)</span> VoucherNumber ,                    customer,OrderWay,                    Owner OwnerID          FROM      dbo.V_getOutStockVoucher          WHERE     Status <span class="token operator">=</span> <span class="token string">'已复核'</span>           GROUP BY  customer ,                    Owner,OrderWay        <span class="token punctuation">)</span> temp</code></pre><h2 id="查询重复的数据"><a href="#查询重复的数据" class="headerlink" title="查询重复的数据"></a>查询重复的数据</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">select</span> id, name, memo from A where <span class="token function">id</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>select <span class="token function">id</span> from A group by <span class="token function">id</span> having count<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token operator">>=</span> 2<span class="token punctuation">)</span></code></pre><h2 id="去除重复的数据"><a href="#去除重复的数据" class="headerlink" title="去除重复的数据"></a>去除重复的数据</h2><pre class=" language-bash"><code class="language-bash">Distinct 或select * from table1 as a  where not exists<span class="token punctuation">(</span>select 1 from table1 where logID<span class="token operator">=</span>a.LogID and ID<span class="token operator">></span>a.ID<span class="token punctuation">)</span>   <span class="token keyword">select</span> Distinct 列名 from 表名</code></pre><h2 id="检查重复数据情况"><a href="#检查重复数据情况" class="headerlink" title="检查重复数据情况"></a>检查重复数据情况</h2><pre class=" language-bash"><code class="language-bash">SELECT Userid, Res_ID FROM ahuser_app_rec GROUP BY Userid, Res_ID HAVING <span class="token punctuation">(</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> <span class="token operator">></span> 1<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SqlServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.net总结</title>
      <link href="/2019/01/09/asp.net-zhi-shi-dian-zong-jie/"/>
      <url>/2019/01/09/asp.net-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Asp-NET-知识点总结-一"><a href="#Asp-NET-知识点总结-一" class="headerlink" title="Asp.NET 知识点总结(一)"></a>Asp.NET 知识点总结(一)</h2><p>1.简述 private、 protected、 public、 internal 修饰符的访问权限。</p><p>答 . private : 私有类，私有成员, 在类的内部才可以访问。</p><p>protected : 保护成员，该类内部和继承类中可以访问。</p><p>public : 公共成员，完全公开，没有访问限制。</p><p>internal: 内部访问类，只限于本项目内访问，其他不能访问。</p><p>2.列举ASP.NET 页面之间传递值的几种方式。</p><p>QueryString, 如….?id=1; response. Redirect()….Request.QueryString[“name”];</p><p>优点：使用简单，传递数字和文本值非常有效; 缺点：安全性不高，不能传递对象。</p><p>使用Session变量 ;<br>优点：使用简单，不仅能传递简单数据类型，还能传递对象。<br>缺点：数据量大小是不限制的。在Session变量存储大量的数据会消耗较多的服务器资源，容易丢失。</p><p>使用cookie用于浏览器上存储小块的信息，保存用户的相关信息，方便下次检索，必须字符串<br>优点：使用简单，是保护用户状态常用方法<br>缺点：安全不高，收集用户信息<br>使用：HttpCookie objCookie = new HttpCookie(“myCookie”,”Hello,Cookie!”);Response.Cookies.Add(cookie);</p><p>Application<br>Application对象的作用范围是整个全局，也就是说对所有用户都有效。它在整个应用程序生命周期中都是有效的，它和Session变量的区别在于，前者是所有的用户共用的全局变量，后者是各个用户独有的全局变量。</p><p>优点：使用简单，消耗较少的服务器资源。缺点：1.作为全局变量容易被误操作。</p><p>使用Server.Transfer<br>Server.Transfer方法把流程从当前页面引导到另一个页面中，新的页面使用前一个页面的应答流，所以这个方法是完全面象对象的，简洁有效;</p><p>3.C#中的委托是什么？事件是不是一种委托？</p><p>委托可以把一个方法或多个方法作为参数代入另一个方法。</p><p>委托可以理解为指向一个函数的引用，是引用类型。</p><p>是，是一种特殊的委托。在NET事件模型，建立在委托机制上，它实现了对委托的封装。</p><p>4.override（重写）与重载（overload）的区别</p><p>override 与重载的区别。</p><p>重载是方法的名称相同。参数或参数类型不同，进行多次重载以适应不同的需要</p><p>Override 是进行基类中函数的重写。为了适应需要面向对象的多态性。</p><p>5.描述一下C#中索引器的实现过程，是否只能根据数字进行索引？</p><p>答：不是。可以用任意类型。</p><p>6.用.net做B/S结构的系统，您是用几层结构来开发，每一层之间的关系以及为什么要这样分层？</p><p>答：一般为3层</p><p>数据访问层，业务层，表示层。</p><p>数据访问层对数据库进行增删查改。</p><p>业务层一般分为二层，业务表观层实现与表示层的沟通，业务规则层实现用户密码的安全等。</p><p>表示层为了与用户交互例如用户添加表单。</p><p>优点： 分工明确，条理清晰，易于调试，而且具有可扩展性。</p><p>缺点： 增加成本</p><p>7.什么叫应用程序域？</p><p>答：应用程序域可以理解为一种轻量级进程。起到安全的作用。占用资源小。</p><p>8.CTS、CLS、CLR分别作何解释？</p><p>答：CTS：通用语言系统;CLS：通用语言规范;CLR：公共语言运行库;</p><p>9.什么是装箱和拆箱？</p><p>答：从值类型接口转换到引用类型装箱。从引用类型转换到值类型拆箱。</p><p>10.什么是受管制的代码？</p><p>答：unsafe：非托管代码。不经过CLR运行。</p><p>11.什么是强类型系统？</p><p>答：RTTI：类型识别系统。</p><p>12.net中读写数据库需要用到那些类？他们的作用？</p><p>答：DataSet:数据存储器。用来存储表的数据，并包含各表之间的联系。</p><p>DataCommand:执行语句命令。</p><p>DataAdapter:数据的集合，用语填充。用来将数据填充到dataset或datatable</p><p>datatable:用来存储一个表的数据；</p><p>sqlconnection:用来创建一个到数据库的连接。</p><p>dataReader:用来顺序读取数据；</p><p>13.ASP.net的身份验证方式有哪些？分别是什么原理？</p><p>答：Windows: 使用IIS验证方式。;IIS根据应用程序的设置执行身份验证。要使用这种验证方式，在IIS中必须禁用匿名访问。</p><p>Forms: 使用基于窗体的验证方式.用Cookie来保存用户凭证，并将未经身份验证的用户重定向到自定义的登录页。</p><p>Passport: 采用Passport cookie验证模式..通过Microsoft的集中身份验证服务执行的，为成员站点提供单独登录和核心配置文件服务; None: 不采用任何验证方式</p><p>14.什么是Code-Behind技术？</p><p>答：ASPX,RESX和CS三个后缀的文件，这个就是代码分离.实现了HTML代码和服务器代码分离.方便代码编写和整理.</p><p>15.在.net中，配件的意思是？</p><p>答：程序集。（中间语言，源数据，资源，装配清单）</p><p>16.常用的调用WebService的方法有哪些？</p><p>答：1.使用WSDL.exe命令行工具。</p><p>2.使用VS.NET中的Add Web Reference菜单选项</p><p>17.net Remoting 的工作原理是什么？</p><p>答：服务器端向客户端发送一个进程编号，一个程序域编号，以确定对象的位置。</p><p>18.在C＃中，string str = null 与 string str = “” 请尽量使用文字或图象说明其中的区别。</p><p>答：string str = null 是不给他分配内存空间,而string str = “” 给它分配长度为空字符串的内存空间。</p><p>19.请详述在dot.net中类(class)与结构(struct)的异同？</p><p>答：Class可以被实例化,属于引用类型,是分配在内存的堆上的,</p><pre><code>  Struct属于值类型,是分配在内存的栈上的.</code></pre><p>20.分析以下代码，完成填空</p><p>string strTmp = “abcdefg某某某”;</p><p>int i= System.Text.Encoding.Default.GetBytes(strTmp).Length;</p><p>int j= strTmp.Length;</p><p>以上代码执行完后，i= j=  </p><p>答：i=13,j=10</p><p>21.简要谈一下您对微软.NET 构架下remoting和webservice两项技术的理解以及实际中的应用。</p><p>答：WS主要是可利用HTTP，穿透防火墙。而Remoting可以利用TCP/IP，二进制传送提高效率。</p><p>22.面向对象的语言具有<strong>____</strong>性、<strong><strong>_</strong></strong>性、<strong>____</strong>性</p><p>答：封装、继承、多态。</p><p>23.能用foreach遍历访问的对象需要实现 <strong><strong><strong>____</strong></strong></strong>接口或声明<strong><strong><strong>____</strong></strong></strong>方法的类型。</p><p>答：IEnumerable 、 GetEnumerator。</p><p>其实IEnumerable接口是非常的简单，只包含一个抽象的方法GetEnumerator()，它返回一个可用于循环访问集合的IEnumerator对象。IEnumerator对象有什么呢？它是一个真正的集合访问器，没有它，就不能使用foreach语句遍历集合或数组，因为只有IEnumerator对象才能访问集合中的项.GetEnumerator方法返回对另一个接口System.Collections.IEnumerator的引用。这个接口提供了基础设施，调用方可以用来移动IEnumerable兼容容器包含的内部对象。</p><p>24.GC是什么? 为什么要有GC?</p><p>答：GC是垃圾收集器。程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一：</p><p>System.gc()</p><p>Runtime.getRuntime().gc()</p><p>25.String s = new String(“xyz”);创建了几个String Object?</p><p>答：两个对象，一个是“xyx”,一个是指向“xyx”的引用对象s。</p><p>26.abstract class和interface有什么区别?</p><p>答：声明方法的存在而不去实现它的类被叫做抽象类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况，不能创建abstract 类的实例。</p><p>接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的，接口中的所有方法都是抽象的，没有一个有程序体。引用可以转换到接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口。</p><p>相同点：</p><p>都可以被继承；都不能被实例化；都可以包含方法，声明；派生类必须实现未实现的方法；</p><p>不同点：</p><p>A.接口是抽象类的实体，接口中所有的方法必须是抽象的，抽象类是声明相同方法的存在而不去实现他的类；</p><p>B.接口可以多继承，而抽象类不行；</p><p>C.接口可定义方法不能实现，而抽象类可实现部分</p><p>27.启动一个线程是用run()还是start()?</p><p>启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行。这并不意味着线程就会立即运行。</p><p> run()方法可以产生必须退出的标志来停止一个线程。</p><p>28.接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承实体类(concrete class)?</p><p>答：接口可以继承接口。抽象类可以实现(implements)接口，抽象类是否可继承实体类，但前提是实体类必须有明确的构造函数。</p><p>29.构造器Constructor是否可被override?</p><p>答：构造器Constructor不能被继承，因此不能重写Overriding，但可以被重载Overloading。</p><p>30.是否可以继承String类?</p><p>答：String类是final类故不可以继承。</p><h2 id="Asp-NET-知识点总结-二"><a href="#Asp-NET-知识点总结-二" class="headerlink" title="Asp.NET 知识点总结(二)"></a>Asp.NET 知识点总结(二)</h2><p>1.两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?</p><p>答：不对，有相同的 hash code 编码格式。</p><p>2.swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上?</p><p>答：switch（expr1）中，expr1是一个整数表达式。因此传递给 switch 和 case 语句的参数应该是 int、 short、 char 或者 byte。long,string 都不能作用于swtich。</p><p>4.List, Set, Map是否继承自Collection接口?</p><p>答：List，Set是Map不是</p><p>5.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别?</p><p>答：Set里的元素是不能重复的，那么用iterator()方法来区分重复与否。equals()是判读两个Set是否相等。equals()和==方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值。</p><p>6.数组有没有length()这个方法? String有没有length()这个方法？</p><p>答：数组没有length()这个方法，有length的属性。String有length()这个方法。</p><p>7.sleep() 和 wait() 有什么区别?</p><p>答：创建，就绪，运行，阻塞，死亡</p><p>启动一个线程 调用start（）方法，使线程所代表的虚拟处理处于可运行状态，这意味着它可以由jvm调度并执行，并不意味着线程就会立即运行。</p><p>run()方法可以产生必须退出的标志来停止一个线程；</p><p>一个对象的synchronized方法只能一个线程访问；必须等待当前线程执行完这个代码块以后才能执行；当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?不能，一个对象的一个synchronized方法只能由一个线程访问。</p><p>sleep()方法是使线程停止一段时间的方法。在sleep 时间间隔期满后，线程不一定立即恢复执行。这是因为在那个时刻，其它线程可能正在运行而且没有被调度为放弃执行，除非(a)“醒来”的线程具有更高的优先级</p><p>(b)正在运行的线程因为其它原因而阻塞。</p><p>wait()是线程交互时，如果线程对一个同步对象x 发出一个wait()调用，该线程会暂停执行，被调对象进入等待状态，直到被唤醒或等待时间到。</p><p>8.short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?</p><p>答：short s1 = 1; s1 = s1 + 1;有错，s1是short型，s1+1是int型,不能显式转化为short型。可修改为s1 =(short)(s1 + 1) 。short s1 = 1; s1 += 1正确。</p><p>9.谈谈final, finally, finalize的区别。</p><p>final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此 一个类不能既被声明为 abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中 不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为 final的方法也同样只能使用，不能重载</p><p>finally—再异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 子句就会 执行，然后控制就会进入 finally 块（如果有的话）。</p><p>finalize—方法名。Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理 工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在 Object 类中定义的 ，因此所有的类都继承了它。子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。</p><p>10.如何处理几十万条并发数据？</p><p>答：用存储过程或事务。取得最大标识的时候同时更新..注意主键不是自增量方式这种方法并发的时候是不会有重复主键的..取得最大标识要有一个存储过程来获取.</p><p>11.Session有什么重大BUG，微软提出了什么方法加以解决？</p><p>答：是iis中由于有进程回收机制，系统繁忙的话Session会丢失，可以用Sate server或SQL Server数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的END事件。</p><p>12.进程和线程的区别？</p><p>答：进程是系统进行资源分配和调度的单位；线程是CPU调度和分派的单位，一个进程可以有多个线程，这些线程共享这个进程的资源。</p><p>13.堆和栈的区别？</p><p>答：栈（stack）：由编译器自动分配、释放。在函数体中定义的变量通常在栈上。</p><p>堆（keap）：一般由程序员分配释放。用new、malloc等分配内存函数分配得到的就是在堆上。</p><p>14.成员变量和成员函数前加static的作用？</p><p>答：它们被称为常成员变量和常成员函数，又称为类成员变量和类成员函数。分别用来反映类的状态。比如类成员变量可以用来统计类实例的数量，类成员函数负责这种统计的动作。</p><p>15.ASP.NET与ASP相比，主要有哪些进步？</p><p>答：asp解释型，aspx编译型，性能提高，有利于保护源码。</p><p>16.请指出GAC的含义？</p><p>答：全局程序集缓存。</p><p>17.向服务器发送请求有几种方式？</p><p>答：get,post。get一般为链接方式，post一般为按钮方式。</p><p>19.软件开发过程一般有几个阶段？每个阶段的作用？</p><p>答：需求分析，架构设计，代码编写，QA，部署</p><p>20.在c#中using和new这两个关键字有什么意义，请写出你所知道的意义？</p><p>using 指令 和语句 new 创建实例 new 隐藏基类中方法。</p><p>答：using 引入名称空间或者使用非托管资源</p><p>new 新建实例或者隐藏父类方法</p><p>21.在c#中using和new这两个关键字有什么意义，请写出你所知道的意义？using 指令 和语句 new 创建实例 new 隐藏基类中方法。</p><p>答：using 引入名称空间或者使用非托管资源</p><p>new 新建实例或者隐藏父类方法</p><p>22.什么是反射？</p><p>答：动态获取程序集信息</p><p>24.用Singleton如何写设计模式</p><p>答：static属性里面new ,构造函数private</p><p>25.什么是Application Pool？</p><p>答：Web应用，类似Thread Pool，提高并发性能。</p><p>26.什么是虚函数？什么是抽象函数？</p><p>答：虚函数：没有实现的，可由子类继承并重写的函数。抽象函数：规定其非虚子类必须实现的函数，必须被重写。</p><p>27.什么是ASP.net中的用户控件？</p><p>答：用户控件一般用在内容多为静态,或者少许会改变的情况下..用的比较大..类似ASP中的include..但是功能要强大的多。</p><p>28.什么是SOAP,有哪些应用。</p><p>答：simple object access protocal,简单对象接受协议.以xml为基本编码结构,建立在已有通信协议上(如http,不过据说ms在搞最底层的架构在tcp/ip上的soap)的一种规范Web Service使用的协议.</p><p>29.C#中 property 与 attribute的区别，他们各有什么用处，这种机制的好处在哪里？</p><p>答：一个是属性，用于存取类的字段，一个是特性，用来标识类，方法等的附加性质.</p><p>30.什么是WSE？目前最新的版本是多少？</p><p>答：WSE（Web Services Enhancements 2.0 for Microsoft .NET ）是一个用来建设Web服务的·NET类库，它支持最新的Web服务协议。最新版本3.0</p><h2 id="Asp-NET-知识点总结-三"><a href="#Asp-NET-知识点总结-三" class="headerlink" title="Asp.NET 知识点总结(三)"></a>Asp.NET 知识点总结(三)</h2><p>1.描述一下C#中索引器的实现过程，是否只能根据数字进行索引？</p><p>答：不是。可以用任意类型。</p><p>2.&lt;%# %&gt; 和 &lt;% %&gt; 有什么区别？</p><p>答：&lt;%# %&gt;表示绑定的数据源</p><p>&lt;% %&gt;是服务器端代码块</p><p>3.重载与覆盖的区别？</p><p>答：1、方法的覆盖是子类和父类之间的关系，是垂直关系；方法的重载是同一个类中方法之间的关系，是水平关系</p><p>2、覆盖只能由一个方法，或只能由一对方法产生关系；方法的重载是多个方法之间的关系。</p><p>3、覆盖要求参数列表相同；重载要求参数列表不同。</p><p>4、覆盖关系中，调用那个方法体，是根据对象的类型（对象对应存储空间类型）来决定；重载关系，是根据调 用时的实参表与形参表来选择方法体的。</p><p>4.error和exception有什么区别</p><p>error 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。</p><p>exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。</p><p>5.Overloaded的方法是否可以改变返回值的类型?</p><p>答：Overloaded的方法是可以改变返回值的类型。</p><p>6.HashMap和Hashtable的区别。</p><p>答：HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，效率上可能高于Hashtable.</p><p>7.&amp;和&amp;&amp;的区别。</p><p>&amp;是位运算符，表示按位与运算，&amp;&amp;是逻辑运算符，表示逻辑与（and）.</p><p>8.大概描述一下ASP.NET服务器控件的生命周期</p><p>答：初始化 加载视图状态 处理回发数据 加载 发送回发更改通知 处理回发事件 预呈现 保存状态 呈现 处置 卸载</p><p>9.Anonymous Inner Class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)?</p><p>答：不能，可以实现接口</p><p>10.Static Nested Class和inner class 的不同</p><p>Static Nested Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化。</p><p>11.C#中 property 与 attribute的区别，他们各有什么用处，这种机制的好处在哪里？</p><p>答：attribute（特性）:自定义属性的基类;用来标识类，方法等的附加性质；Attribute ：是一个对象，作用在于两个方面。一个是影响编译器的形为，另一个是把描述信息写入Assembly中。</p><p>property （属性）:类中的属性一个是属性，用于存取类的字段，一个是特性，用来标识类，方法等的附加性质;Property：是一个方法是GET和SET的组合，一个是读，一个是写。</p><p>12.当整数a赋值给一个object对象时，整数a将会被？</p><p>答：装箱。</p><p> 13.类成员有<strong>_</strong>种可访问形式？</p><p>答：this.;new Class().Method;</p><p> 14.public static const int A=1;这段代码有错误么？是什么？</p><p>答：const不能用static修饰。</p><p> 15.float f=-123.567F; int i=(int)f;i的值现在是<strong>_</strong>?</p><p>答：-123。</p><p> 16.委托声明的关键字是<strong>__</strong>?</p><p>答：delegate.</p><p> 17.用sealed修饰的类有什么特点？</p><p>答：密封，不能继承。</p><p> 18.在Asp.net中所有的自定义用户控件都必须继承自<strong>____</strong>?</p><p>答：Control。</p><p> 19.在.Net中所有可序列化的类都被标记为<strong>_</strong>?</p><p>答：[serializable]</p><p>20.在.Net托管代码中我们不用担心内存漏洞，这是因为有了<strong>__</strong>?</p><p>答：GC。</p><p>21.什么是虚函数？什么是抽象函数？</p><p>答：虚函数：没有实现的，可由子类继承并重写的函数。抽象函数：规定其非虚子类必须实现的函数，必须被重写。</p><p>22.谈谈你对ASP和ASP.NET的区别?<br>答：ASP.Net摆脱了以前ASP使用脚本语言来编程的缺点，理论上可以使用任何编程语言包括C++ , VB , JS等等，当然，最合适的编程语言还是MS为.Net Frmaework专门推出的C(读c sharp)，它可以看作是VC和Java的混合体吧，尽管MS自己讲C#内核中更多的象VC，但实际上我还是认为它和Java更象一些吧。首先它是面向对象的编程语言，而不是一种脚本，所以它具有面向对象编程语言的一切特性，比如封装性、继承性、多态性等等，这就解决了刚才谈到的ASP的那些弱点。封装性使得代码逻辑清晰，易于管理，并且应用到ASP.Net上就可以使业务逻辑和Html页面分离，这样无论页面原型如何改变，业务逻辑代码都不必做任何改动；继承性和多态性使得代码的可重用性大大提高，你可以通过继承已有的对象最大限度保护你以前的投资。并且C#和C++、Java一样提供了完善的调试/纠错体系。</p><p>23.为什么要用IsPortBack<br>答：页面第一次加载时需要绑定一些数据，如果每次加载都绑定的话，会给服务器很大压力ISPORTBACK第一次加载时返回的是false，以后每次返回的都是true，这样可以设置    一些只需要在页面一次加载时就绑定好的数据。</p><p>24..MVC指的是什么?<br>答：MVC将程序功能分成三部分考虑：视图(VIEW，即可见的用户界面部分)、模型（Model，程序的数据模型和业务逻辑部分），控制器（Controller，根据用户输入通知模型和视图进行相应更改）。</p><p>25..ADO.NET的常用对象<br>答：Connection，Command，DataAdapter，DataSet，DataReader，configuration</p><p>26.C/S和B/S的区别，优缺点有哪些?<br>答：C/S是客户端/服务器端，C/S的程序通常也叫胖客户端，也就是一个程序的大部分功能，都在客户端实现，而服务器端只实现一小部分功能。通过这点不难看出，C/S的程序大部分在客户端实现，对于服务器端的压力相对小一些，服务器端可以节省一些。而且C/S的程序用窗口来做，个人认为开发效率上快一点。但C/S的程序一大弊端就是，必须要在客户端安装并部署程序才能运行，也就是用户必须得到客户端程序才可以运行。所以得考虑不同系统之间的安装与配置。<br>B/S是浏览器/服务器端，B/S的程序通常也叫瘦客户端，与C/S相反。B/S的程序大部分功能都要在服务器端实现，客户端只用来做辅助的控制功能。因为B/S的程序直接部署安装在服务器上。用户只需要有浏览器，并知道网址就可以使用程序。客户端不必做任何配置和安装，即可使用应用程序。而B/S也是有缺点的，首先B/S大部分功能都要在服务器端实现，对于服务器的要求就很高。服务器同时要应付用户访问与程序处理，所以服务器的配置必须能够应付。另外就是B/S的程序是浏览器中执行，所以B/S的程序操作客户端电脑的硬件，一般就得安装ActiveX等插件在客户端才可以操作。因此B/S的程序对于操作硬件，优势没有C/S的程序要好。</p><p>27.Windows 身份验证提供程序<br>1，提供有关如何将 Windows 身份验证与 Microsoft Internet 信息服务 (IIS) 身份验证结合使用来确保 ASP.NET 应用程序安全的信息。<br>2、 Forms 身份验证提供程序<br>提供有关如何使用您自己的代码创建应用程序特定的登录窗体并执行身份验证的信息。使用 Forms 身份验证的一种简便方法是使用 ASP.NET 成员资格和 ASP.NET 登录控件，它们一起提供了一种只需少量或无需代码就可以收集、验证和管理用户凭据的方法。有关更多信息，请参见使用成员资格管理用户和 ASP.NET 登录控件概述。<br>3、 Passport 身份验证提供程序<br>提供有关由 Microsoft 提供的集中身份验证服务的信息，该服务为成员站点提供单一登录和核心配置文件服务</p><p>28.ASP.NET中页面传值的方法;<br>答：session(viewstate)                  简单，但易丢失<br>application                         全局<br>cookie                          简单，但可能不支持，可能被伪造<br>input type=”hidden”             简单，可能被伪造<br>url参数                          简单，显示于地址栏，长度有限<br>数据库                           稳定，安全，但性能相对弱</p><p>29.net中类与对象的关系;<br>答：万物都是对象，而类是对象的一个编程语言概念上的描述</p><p>30.ASP.NET里命名空间的定义;<br>答：命名空间是类的逻辑分组，它组织成一个层次结构——逻辑树。这个树的根是System。<br>在ASP.NET页面中，可以默认的使用某些命名空间中包含的类，称做标准的ASP.NET命名空间。对于其他命名空间，则必须显式地导入</p><p>31.ASP.NET中内置对象是什么?</p><p>在 Web 应用程序运行时，ASP.NET 将维护有关当前应用程序、每个用户会话、当前 HTTP 请求、请求的页等方面的信息。ASP.NET 包含一系列类，用于封装这些上下文信息。<br>Response提供对当前页的输出流的访问。您可以使用此类将文本插入页中、编写 Cookie，等等。<br>Request  提供对当前页请求的访问，其中包括请求标题、Cookie、客户端证书、查询字符串等。您可以使用此类读取浏览器已经发送的内容。<br>Context提供对整个当前上下文（包括请求对象）的访问。<br>Server公开可以用于在页之间传输控件的实用工具方法，获取有关最新错误的信息，对 HTML 文本进行编码和解码，等等。<br>Application提供对所有会话的应用程序范围的方法和事件的访问。还提供对可用于存储信息的应用程序范围的缓存的访问。<br>Session为当前用户会话提供信息。还提供对可用于存储信息的会话范围的缓存的访问，以及控制如何管理会话的方法。<br>Trace提供在 HTTP 页输出中显示系统和自定义跟踪诊断消息的方法。</p><h2 id="Asp-NET-知识点总结-四"><a href="#Asp-NET-知识点总结-四" class="headerlink" title="Asp.NET 知识点总结(四)"></a>Asp.NET 知识点总结(四)</h2><p>1.get和post 的区别</p><p>get是从服务器上获取数据，post是向服务器传送数据; </p><p>get安全性非常低，数据显示在地址栏，post安全性较高； 但是执行效率却比Post方法好；</p><p>get有字节限制为1024字节，post没有限制，起到限制的是服务器设置和内存大小及程序的处理能力；</p><p>对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。</p><p>2..asp.net页面提交过程</p><p>3.自定义控件如何做?<br>答：自定义控件，跟HtmlControl或WebControl相似，编译后可以添加引用到工具栏里<br>面，直接用鼠标拖动使用。</p><p>4.界面的布局?        答：表格，div<br>5、程序的执行过程  答：先被编译成中间语言，再翻译平台专用语言.</p><p>6.ASP.NET分页的常用方法有以下几种。</p><p>启用部分数据控件的内置分页功能，如设置GridView控件的“AllowPaging”属性为“true”，类似的数据控件还有DetailsView等。<br>通过SQL查询语句，以提取指定部分的数据的方式完成分页的功能。也包括调用数据库中内置的存储过程完成分页数据的提取。<br>调用所对应数据适配器对象（DataAdapter对象）的Fill方法时，传递分页参数以完成数据集的分页功能。<br>通过访问DataTable对象的“Rows”属性，以循环输出的方式访问结果集中指定区段的数据行，以达到分页的效果。</p><p>7.视图状态ViewState的具体运行过程是什么?</p><p>每当用户请求某个.aspx页面时，.NET框架首先把相关控件的状态数据序列化成一个字符串，然后，将其做为名为<strong>VIEWSTATE的隐藏域的Value值发送到客户端。<br>如果页面是第一次被请求，那么服务器控件也将是被第一次执行时，名为</strong>VIEWSTATE的隐藏域中只包含控件的默认信息，通常为空或null。<br>在随后的回送事件中，ViewState中就保存了服务器控件在前面回送中可用的属性状态。这样服务器控件就能监视在当前被处理的回送事件发生之前的状态了。这些过程是由.NET框架负责的，对用户来说是执行.aspx页面就有了持续执行的效果。</p><p>8.面向对象的思想主要包括什么?<br>对向对象程序设计（OOP）思想：封装、继承、多态<br> 封装：用抽象的数据类型将数据和基于数据操作封装在一起，数据被保护在抽象类型内部。<br> 继承：子类拥有父类的所有数据和操作。<br> 多态：一个程序中同名的不同方法共存的情况。 有两种形式的多态：重载与重写。</p><p>9.什么是ASP.net中的用户控件?<br>用户控件就是.ascx,复合控件就是.DLL</p><p>10.UDP连接和TCP连接的异同。<br> 前者只管传,不管数据到不到,无须建立连接.后者保证传输的数据准确,须要连接.</p><p>11.进程和线程分别怎么理解?<br>进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对应用的并发性。进程和线程的区别在于：简而言之,一个程序至少有一个进程,一个进程至少有一个线程.线程的划分尺度小于进程，使得多线程程序的并发性高。<br>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p>12.什么是SOAP,有哪些应用。<br>SOAP（Simple Object Access Protocol ）简单对象访问协议是在分散或分布式的环境中交换信息并执行远程过程调用的协议，是一个基于XML的协议。</p><p>13.概述反射</p><p> 反射:程序集包含模块，而模块包含类型，类型又包含成员。反射则提供了封装程序集、模块和类型的对象。您可以使用反射动态地创建类型的实例，将类型绑定到现有对象，或从现有对象中获取类型。然后，可以调用类型的方法或访问其字段和属性</p><p>14.序列化和反序列化 </p><p>序列化是将对象状态转换为可保持或传输的格式的过程，比如转化为二进制、xml、json等的过程。<br>与序列化相对的是反序列化，它将流转换为对象，也就是将在序列化过程中所生成的二进制串、xml、json等转换成数据结构或者对象的过程<br>这两个过程结合起来，可以轻松地存储、传输数据</p><p>15.用sealed修饰的类有什么特点</p><p>sealed 修饰符用于防止从所修饰的类派生出其它类。如果一个密封类被指定为其他类的基类，则会发生编译时错误。密封类不能同时为抽象类。sealed 修饰符主要用于防止非有意的派生，但是它还能促使某些运行时优化。具体说来，由于密封类永远不会有任何派生类，所以对密封类的实例的虚拟函数成员的调用可以转换为非虚拟调用来处理。</p><p>16.什么是ERP?ERP的演变过程?<br>答：所谓ERP是英文Enterprise Resource Planning(企业资源计划)的简写。它是从MRP(物料资源<br> 计划)发展而来的新一代集成化管理信息系统，它扩展了MRP的功能，其核心思想是供应链管理，它跳<br> 出了传统企业边界，从供应链范围去优化企业的资源，是基于网络经济时代的新一代信息系统。它对<br> 于改善企业业务流程、提高企业核心竞争力的作用是显而易见的。</p><p>17.在ASP.NET中如何进行文件上传?</p><p>首先，从客户端取得上传的文件，然后，我们将它放入数据流；<br>第二，服务器端读取数据流，然后将其保存到缓存；<br>第三，将缓存数据保存到数据库；<br>第一步:首先我们要实现用户在浏览器端自由选择文件，然后上传，这里用户选择文件，当然是要求标准的Windows方式，所以，我们在这里使用Form的File文件组件来给用户选择文件。注意，因为上传文件，所以，在Form的属性设置的时候，我们应该设置为：multipart/form-data，这样，才可以正确上传文件。</p><p>18.ASP.NET中共有几种类型的控件?各有什么区别?</p><p>WEB控件分为：内部控件, 列表控件, 复杂控件, 验证控件<br>内部控件–内部控件的使用方法与 HTML 控件相同,它们映射到 HTML 元素并通过使用 runat = “server” 属性在服务器上执行<br>列表控件–用于在 Web 页中创建数据列表<br>复杂控件– •当希望控件拥有复杂的功能或使用 HTML 元素无法创建的功能丰富的用户界面时，可以使用复杂控件<br>验证控件–输入控件的数据需要进行准确性和取值范围方面的检查</p><p>19.ASP.NET中的身份验证有那些?请解释。</p><p>Windows验证:指定Windows身份验证作为默认的身份验证模式.如果是任何形式的Internet信息服务(IIS)身份验证，则使用此模式.<br>Forms验证:指定基于ASP。NET窗体的身份验证作为默认的身份验证模式。<br>Passport:指定Microsoft Passport身份验证作为默认的身份验证模式。<br>None:不指定身份验证，仅适用于匿名用户，或者应用程序可以处理事件以提供它们自己的身份验证情况。</p><p>20.请详述在dotnet中类(class)与结构(struct)的异同：(10分)<br>答：Class可以被实例化,属于引用类型,是分配在内存的堆上的;Struct属于值类型,是分配在内存的栈上的.</p><p>21.简要谈一下您对微软.NET 构架下remoting和webservice两项技术的理解以及实际中的应用。(10)<br>答：WS主要是可利用HTTP，穿透防火墙。而Remoting可以利用TCP/IP，二进制传送提高效率。</p><p>22.在c#中using和new这两个关键字有什么意义</p><p>using 指令有两个用途：允许在命名空间中使用类型，为命名空间或类型创建别名。</p><p>using 语句允许程序员指定使用资源的对象应当何时释放资源。</p><p>New 实例化一个对像，或修饰一个方法，表此方法完全重写此方法</p><p>23.C#中的验证控件有几种</p><p>a)RequiredFieldValidator（必须字段验证）；<br>b)CompareValidator（比较验证）；<br>c)RangeValidator （范围验证）；<br>d)RegularExpresionValidator（正则表达式）；<br>e)ValidationSummary（验证总结）；<br>f)CustomValidator（自定义验证）</p><p>24.静态成员和非静态成员的区别</p><p>静态变量使用 static 修饰符进行声明，在类被实例化时创建，通过类进行访问<br>不带有 static 修饰符声明的变量称做非静态变量，在对象被实例化时创建，通过对象进行访问<br>一个类的所有实例的同一静态变量都是同一个值，同一个类的不同实例的同一非静态变量可以是不同的值<br>静态函数的实现里不能使用非静态成员，如非静态变量、非静态函数等</p><p>25.如何调试一个ASP.NET web应用？<br>Attach aspnet_wp.exe 进程到你的DbgCLR debugger</p><p>26.const和static readonly区别</p><p>const：用 const 修饰符声明的成员叫常量，是在编译期初始化并嵌入到客户端程序<br>static readonly：用 static readonly 修饰符声明的成员依然是变量，只不过具有和常量类似的使用方法：通过类进行访问、初始化后不可以修改。但与常量不同的是这种变量是在运行期初始化</p><p>27.C#里面可以避免一个类被其他类继承么？</p><p>是的，C#可以通过添加sealed关键字的方法来避免一个类被其他类继承。</p><p>28.C#如何允许一个类被继承但是避免这个类的方法被重载？</p><p>C#可以允许一个类被继承，但是这个类的方法不被重载。<br>只要把这个类定义为public的，但是在不允许被重载的方法前面加上sealed.</p><p>C#可以通过调用Sort()方法，然后再调用Reverse()方法。extern 修饰符用于声明由程序集外部实现的成员函数</p><p>29.params有什么用</p><p> params 关键字在方法成员的参数列表中使用，为该方法提供了参数个数可变的能力<br> 30.别名指示符是什么</p><p>主要用于解决两个命名空间内有同名类型的冲突或避免使用冗余的命名空间<br>别名指示符在所有命名空间最外层定义，作用域为整个单元文件。如果定义在某个命名空间内，那么它只在直接隶属的命名空间内起作用</p><h2 id="Asp-NET-知识点总结-五"><a href="#Asp-NET-知识点总结-五" class="headerlink" title="Asp.NET 知识点总结(五)"></a>Asp.NET 知识点总结(五)</h2><p>1.传入某个属性的set方法的隐含参数的名称是什么？<br>value，它的类型和属性所声名的类型相同。</p><p>2.如何在C#中实现继承？<br>在类名后加上一个冒号，再加上基类的名称。</p><p>3.C#支持多重继承么？<br>不支持。可以用接口来实现。</p><p>4.被protected修饰的属性/方法在何处可以访问？<br>在继承或间接继承与这个类的子类中可以访问。</p><p>5.私有成员会被继承么？<br>会，但是不能被访问。所以看上去他们似乎是不能被继承的，但实际上确实被继承了。</p><p>6.请描述一下修饰符protected internal。</p><p>被protected internal修饰的属性/方法只能在它的在同一个程序集（Assembly）中的子类被访问。</p><p>C#提供一个默认的无参数构造函数，当我实现了另外一个有一个参数的构造函数时候，还想保留这个无参数的构造函数。这样我应该写几个构造函数？<br>两个，一旦你实现了一个构造函数，C#就不会再提供默认的构造函数了，所以需要手动实现那个无参数构造函数。</p><p>7.C#中所有对象共同的基类是什么？</p><p>System.Object.</p><p>8.重载和覆写有什么区别？</p><p>重载提供了对一个方法签名的不同参数调用的实现。覆写提供了子类中改变父类方法行为的实现。</p><p>9.在方法定义中，virtual有什么含意？</p><p>被virtual修饰的方法可以被子类覆写。<br>能够将非静态的方法覆写成静态方法么？<br>不能，覆写方法的签名必须与被覆写方法的签名保持一致，除了将virtual改为override。</p><p>10.可以覆写私有的虚方法么？</p><p>不可以，甚至子类中无法访问父类中的私有方法。</p><p>11.能够阻止某一个类被其他类继承么？<br>可以，使用关键字sealed。</p><p>12.能够实现允许某个类被继承，但不允许其中的某个方法被覆写么？<br>可以，标记这个类为public，并标记这个方法为sealed。</p><p>13.什么是抽象类（abstract class）？</p><p>一种不可以被实例化的类。抽象类中一般含有抽象方法，当然也可有具体实现。继承类只有实现过所有抽象类的抽象方法后才能被实例化。</p><p>14.何时必须声明一个类为抽象类？<br>当这个类中包含抽象方法时，或是该类并没有完全实现父类的抽象方法时。</p><p>15.接口（interface）是什么？<br>只含有共有抽象方法（public abstract method）的类。这些方法必须在子类中被实现。</p><p>16.为什么不能指定接口中方法的修饰符？</p><p>接口中的方法用来定义对象之间通信的契约，指定接口中的方法为私有或保护没有意义。他们默认为公有方法。</p><p>17.可以继承多个接口么？<br>当然。</p><p>那么如果这些接口中有重复的方法名称呢？<br>这种情况中你可以决定如何实现。当然需要特别得小心。但是在编译环节是没有问题的。</p><p>18.接口和抽象类的区别是什么？</p><p>接口中所有方法必须是抽象的，并且不能指定方法的访问修饰符。抽象类中可以有方法的实现，也可以指定方法的访问修饰符。<br>如何区别重载方法？<br>不同的参数类型，不同的参数个数，不同的参数顺序。</p><p>19.const和readonly有什么区别？</p><p>const关键字用来声明编译时常量，readonly用来声明运行时常量。<br>System.String 和System.StringBuilder有什么区别？<br>System.String是不可变的字符串。System.StringBuilder存放了一个可变的字符串，并提供一些对这个字符串修改的方法。</p><p>20.列举一下你所了解的XML技术及其应用<br>答：保存配置,站与站之间的交流,WEB SERVICE。以及与数据库的数据交互等地方都要用它.</p><p>21.C#中的接口和类有什么异同。<br>答：<br>异：</p><p>不能直接实例化接口。<br>接口不包含方法的实现。<br>接口、类和结构可从多个接口继承。但是C# 只支持单继承：类只能从一个基类继承实现。<br>类定义可在不同的源文件之间进行拆分。</p><p>同：</p><p>接口、类和结构可从多个接口继承。<br>接口类似于抽象基类：继承接口的任何非抽象类型都必须实现接口的所有成员。<br>接口可以包含事件、索引器、方法和属性。<br>一个类可以实现多个接口。22.活动目录的作用。<br>答：Active Directory存储了有关网络对象的信息，并且让管理员和用户能够轻松地查找和使用这些信息。Active Directory使用了一种结构化的数据存储方式，并以此作为基础对目录信息进行合乎逻辑的分层组织。<br>23..net中读写XML的类都归属于哪些命名空间？<br>答：System.Xml</p><p>24.什么是SOAP,有哪些应用。<br>答：SOAP（Simple Object Access Protocol ）简单对象访问协议是在分散或分布式的环境中交换信息并执行远程过程调用的协议，是一个基于XML的协议。使用SOAP，不用考虑任何特定的传输协议（最常用的还是HTTP协议），可以允许任何类型的对象或代码，在任何平台上，以任何一直语言相互通信。</p><p>25.抽象类和接口的区别</p><p>抽象类（abstract class）可以包含功能定义和实现，接口（interface）只能包含功能定义;</p><p>抽象类是从一系列相关对象中抽象出来的概念， 因此反映的是事物的内部共性；接口是为了满足外部调用而定义的一个功能约定， 因此反映的是事物的外部特性;<br>分析对象，提炼内部共性形成抽象类，用以表示对象本质，即“是什么”;<br>为外部提供调用或功能需要扩充时优先使用接口;</p><p> 接口可以包含属性、方法、索引指示器和事件，但不能包含常量、域、操作符、构造函数和析构函数，而且也不能包含任何静态成员</p><p>26.this 关键字</p><p>this是一个保留字，仅限于构造函数和方法成员中使用</p><p>27.Debug类与Trace类有什么区别</p><p>Debug类里所提供的函数仅在编译时带#Debug宏参数才奏效，一旦到了Release版本中，这些函数都会被忽略。也就是说Debug类的功能仅在程序员开发的时候能用。而Trace则不同，它能在Release版本的程序中也被运行</p><p>28.页面间的传值有哪几种方式<br>答：session(viewstate) 简单，但易丢失<br>application 全局<br>cookie 简单，但可能不支持，可能被伪造<br>input ttype=”hidden” 简单，可能被伪造<br>url参数 简单，显示于地址栏，长度有限<br>数据库 稳定，安全，但性能相对弱</p><p>29.深拷贝和浅拷贝</p><p>浅拷贝是指将对象中的数值类型的字段拷贝到新的对象中，而对象中的引用型字段则指复制它的一个引用到目标对象。如果改变目标对象中引用型字段的值他将反映在原是对象中，也就是说原始对象中对应的字段也会发生变化。深拷贝与浅拷贝不同的是对于引用的处理，深拷贝将会在新对象中创建一个新的和原是对象中对应字段相同（内容相同）的字段，也就是说这个引用和原是对象的引用是不同的，我们在改变新对象中的这个字段的时候是不会影响到原始对象中对应字段的内容</p><p>30.什么是属性访问器</p><p>属性访问器（Property Accessor），包括 get 访问器和 set 访问器分别用于字段的读写操作<br>其设计目的主要是为了实现面向对象（OO）中的封装思想。根据该思想，字段最好设为private，一个精巧的类最好不要直接把字段设为公有提供给客户调用端直接访问</p><h2 id="Asp-NET-知识点总结-六"><a href="#Asp-NET-知识点总结-六" class="headerlink" title="Asp.NET 知识点总结(六)"></a>Asp.NET 知识点总结(六)</h2><p>1.传入某个属性的set方法的隐含参数的名称是什么？</p><p>value，它的类型和属性所声名的类型相同。</p><p>2.如何在C#中实现继承？</p><p>在类名后加上一个冒号，再加上基类的名称。</p><p>3.C#支持多重继承么？</p><p>类之间不支持，接口之间支持。类对接口叫做实现，不叫继承。<br>4.被protected修饰的属性/方法在何处可以访问？</p><p>在继承或间接继承与这个类的子类中可以访问。<br>私有成员会被继承么？<br>会，但是不能被访问。所以看上去他们似乎是不能被继承的，但实际上确实被继承了。</p><p>请描述一下修饰符protected internal。</p><p>在同一个Assembly中，他的访问级别和public一样，而跨Assembly访问时，他的访问级别同protected一样。即protected的范围 + internal的范围。<br>C#提供一个默认的无参数构造函数，当我实现了另外一个有一个参数的构造函数时候，还想保留这个无参数的构造函数。这样我应该写几个构造函数？<br>两个，一旦你实现了一个构造函数，C#就不会再提供默认的构造函数了，所以需要手动实现那个无参数构造函数。</p><p>C#中所有对象共同的基类是什么？<br>System.Object.</p><p>重载和覆写有什么区别？</p><p>重载提供了对一个方法签名的不同参数调用的实现。覆写提供了子类中改变父类方法行为的实现。</p><p>在方法定义中，virtual有什么含意？</p><p>被virtual修饰的方法可以被子类覆写。</p><p>能够将非静态的方法覆写成静态方法么？</p><p>不能，覆写方法的签名必须与被覆写方法的签名保持一致，除了将virtual改为override。</p><p>可以覆写私有的虚方法么？</p><p>不可以，甚至子类中无法访问父类中的私有方法。</p><p>能够阻止某一个类被其他类继承么？</p><p>可以，使用关键字sealed。</p><p>能够实现允许某个类被继承，但不允许其中的某个方法被覆写么？</p><p>可以，标记这个类为public，并标记这个方法为sealed。</p><p>什么是抽象类（abstract class）？</p><p>一种不可以被实例化的类。抽象类中一般含有抽象方法，当然也可有具体实现。继承类只有实现过所有抽象类的抽象方法后才能被实例化。</p><p>何时必须声明一个类为抽象类？</p><p>当这个类中包含抽象方法时，或是该类并没有完全实现父类的抽象方法时。</p><p>接口（interface）是什么？</p><p>只含有共有抽象方法（public abstract method）的类。这些方法必须在子类中被实现。<br>为什么不能指定接口中方法的修饰符？<br>接口中的方法用来定义对象之间通信的契约，指定接口中的方法为私有或保护没有意义。他们默认为公有方法。</p><p>可以继承多个接口么？</p><p>当然。</p><p>那么如果这些接口中有重复的方法名称呢？</p><p>这种情况中你可以决定如何实现。当然需要特别得小心。但是在编译环节是没有问题的。</p><p>接口和抽象类的区别是什么？</p><p>接口中所有方法必须是抽象的，并且不能指定方法的访问修饰符。抽象类中可以有方法的实现，也可以指定方法的访问修饰符。</p><p>如何区别重载方法？</p><p>不同的参数类型，不同的参数个数，不同的参数顺序。</p><p>const和readonly有什么区别？</p><p>const可以用于局部常量，而readonly，实际是类的initonly字段，显然不能是局部的。</p><p>System.String 和System.StringBuilder有什么区别？</p><p>System.String是不可变的字符串。System.StringBuilder存放了一个可变的字符串，并提供一些对这个字符串修改的方法。</p><h2 id="Asp-NET-知识点总结-七"><a href="#Asp-NET-知识点总结-七" class="headerlink" title="Asp.NET 知识点总结(七)"></a>Asp.NET 知识点总结(七)</h2><p>1.new修饰符是起什么作用<br>new 修饰符用于声明类或类的成员，表示隐藏了基类中同名的成员。而new 操作符用于实例化一个类型<br>new 修饰符只能用于继承类，一般用于弥补基类设计的不足<br>new 修饰符和 override 修饰符不可同时用在一个成员上，因为这两个修饰符在含义上互相排斥</p><p>2.可以使用抽象函数重写基类中的虚函数吗</p><p>需使用 new 修饰符显式声明，表示隐藏了基类中该函数的实现<br>或增加 override 修饰符，表示抽象重写了基类中该函数的实现</p><p>3.说出你对remoting 和webservice的理解和应用</p><p>web服务，是利用SOAP（简单对象访问协议，Simple Object Access Protocol）在HTTP上执行远程方法调用的一种方法，也可以使用WSDL（Web Service Description Language，Web服务描述语言）来完整的描述Web服务，基于XML标准。<br>Remoting，可以用来访问另一个应用程序域中的对象，为客户机和服务器端的.Net应用程序之间的通讯提供了一种更为快速的格式。Remoting体系的主要元素：远程对象，信道，消息，格式标识符，格式标识符提供程序，代理对象，消息接收器，激活器，RemotingConfiguration类,ChannelServices类。</p><p>4..什么是XML？<br>答：可扩展标记语言，可以做配置文件，可以传输数据，可以存储数据</p><p>5.什么是Application Pool？<br>答：Web应用，类似Thread Pool，提高并发性能<br>6.链表和数组的区别，各有什么优缺点.<br>答：一个可以动态增长，一个固定,性能数组教好<br>7.Remoting在客户端服务器怎么实现 ?<br>答：创建一个TcpClientChannel对象，在ChannelServices中注册，然后使用Activator类把代理对象返回给远程对象。<br>8.什么是友元函数？<br>答：friendly声明，可以访问protect级别方法</p><p>9.dataset是保存数据的数据结构，断开模式，而DataReader不承担保存数据的责任，需要自己手动关闭连接数据库，它只负责从数据源读取数据到本地而已，是只读向前的，它不是数据结构，而是网络通讯组件的高层封装。</p><p>10.session 保存原理</p><p>通过cookie<br>Cookie是保存在客户端的一小段信息，服务器在响应请求时可以将一些数据以“键-值”对的形式通过响应信息保存在客户端。当浏览器再次访问相同的应用时，会将原先的Cookie通过请求信息带到服务器端。</p><p>可以采用url重写。</p><p>11.iframe 的用法</p><p>iframe 标签 文件透明</p><p>allowtransparency=”true” style=”background-color=transparent”</p><p>刷新的三种方案：</p><p>用iframe的name属性定位：</p><input type="button" name="Button" value="Button" onclick="document.frames('ifrmname').location.reload()"><p>用iframe的id属性定位：</p><input type="button" name="Button" value="Button" onclick="ifrmid.window.location.reload()"><p>当iframe的src为其它网站地址(跨域操作时)：</p><input type="button" name="Button" value="Button" onclick="window.open(document.all.ifrmname.src,'ifrmname','')"><p>12.您了解设计模式么？请列出您所知道的设计模式的名称。</p><p>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使人们可以更加简单方便地复用成功的设计和体系结构。</p><p>创建型设计模式：与对象的创建有关。<br>结构型设计模式：处理类或对象的组合。<br>行为型设计模式：描述类或对象如何交互及如何分配职责。<br>常见的创建型设计模式有：单例模式；简单工厂模式；工厂方法模式；抽象工厂模式；建造者模式；原型模式。<br>常见的结构型模式：适配器模式；桥接模式；组合模式；装饰模式；外观模式；轻量级模式；代理模式。<br>常见的行为型模式：责任链模式；命令模式；解释模；迭代器模式；中介者模式；备忘录模式；观察者模式；状态模式；策略模式；模板方法模式；访问者模式。</p><p>单一设计模式： Singleton就是确保一个类只有唯一的一个实例。Singleton主要用于对象的创建，这意味着，如果某个类采用了Singleton模式，则在这个类被创建后，它将有且仅有一个实例可供访问。</p><p>简单工厂设计模式：简单工厂模式的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。</p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADO.NET+SqlHelper</title>
      <link href="/2019/01/08/ado.net/"/>
      <url>/2019/01/08/ado.net/</url>
      
        <content type="html"><![CDATA[<h2 id="ADO-NET-自己封装的SqlHelper"><a href="#ADO-NET-自己封装的SqlHelper" class="headerlink" title="ADO.NET+自己封装的SqlHelper"></a>ADO.NET+自己封装的SqlHelper</h2><p> 理论到处都是的，我就不写理论了，两张图表达一切：<br><img src="/2019/01/08/ado.net/1.jpg" alt="图1"><br><img src="/2019/01/08/ado.net/2.jpg" alt="图2"><br> 下面直接写demo练习和自己封装一个sqlHelper分享大家看看</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre class=" language-bash"><code class="language-bash"> static public void TestConnection<span class="token punctuation">(</span><span class="token punctuation">)</span> //连接        <span class="token punctuation">{</span>        //1.连接通道的连接字符串            string Constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa"</span><span class="token punctuation">;</span>        //2.连接通道           SqlConnection con<span class="token operator">=</span>new SqlConnection<span class="token punctuation">(</span>Constr<span class="token punctuation">)</span><span class="token punctuation">;</span>          //3.打开通道            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          //4.关闭通道            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"连接上数据库了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //注意如果是orcale的，方式不同：            OleDbConnection conn <span class="token operator">=</span> new OleDbConnection<span class="token punctuation">(</span><span class="token string">"Provider=MSDAORA.1;Data Source=(DESCRIPTION =(ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.2.234)(PORT = 1521)))(CONNECT_DATA = (SID = orcl))) ;User Id=sjk;Password=sssss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string sql <span class="token operator">=</span> <span class="token string">"select * from tbl_aa "</span><span class="token punctuation">;</span>            OleDbDataAdapter da <span class="token operator">=</span> new OleDbDataAdapter<span class="token punctuation">(</span>sql, conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            DataSet ds <span class="token operator">=</span> new DataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            da.Fill<span class="token punctuation">(</span>ds, <span class="token string">"ds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataGridView1.DataSource <span class="token operator">=</span> ds.Tables<span class="token punctuation">[</span>0<span class="token punctuation">]</span>        <span class="token punctuation">}</span></code></pre><h2 id="查询单个值"><a href="#查询单个值" class="headerlink" title="查询单个值"></a>查询单个值</h2><pre class=" language-bash"><code class="language-bash">   static public void QuerySingle<span class="token punctuation">(</span><span class="token punctuation">)</span> //查询单个值  SqlCommand .ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection  con<span class="token operator">=</span>new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select count(*) from Category"</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            object obj <span class="token operator">=</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span>obj.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="增，删，改"><a href="#增，删，改" class="headerlink" title="增，删，改"></a>增，删，改</h2><pre class=" language-bash"><code class="language-bash"> static public void AddRecord<span class="token punctuation">(</span><span class="token punctuation">)</span> //增，删，改 SqlCommand ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int res <span class="token operator">=</span> 0<span class="token punctuation">;</span> //准备接受新橧        //1.连接通道的字符串            string Constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>        //2.连接通道            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       //3.手动指定连接字符串            con.ConnectionString <span class="token operator">=</span> Constr<span class="token punctuation">;</span>       //4.准备insert字符串语句            string sqlstr <span class="token operator">=</span> <span class="token string">"insert into Category(C_name,C_remark,C_isdel,C_addtime)values('编程书籍','asp.net','0',GetDate())"</span><span class="token punctuation">;</span>        //5.新建命令对象（工人），并告诉哪里走，做什么            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            //cmd.CommandText <span class="token operator">=</span> sqlstr<span class="token punctuation">;</span>            //cmd.Connection <span class="token operator">=</span> con<span class="token punctuation">;</span>         //打开连接通道            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         //6.调用方法去执行sql语句            res <span class="token operator">=</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//此方法负责增删改，返回受影响的行数（int）            //关闭连接通道            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"新增成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"新增失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="查询多行数据-SqlDataReader"><a href="#查询多行数据-SqlDataReader" class="headerlink" title="查询多行数据 SqlDataReader"></a>查询多行数据 SqlDataReader</h2><pre class=" language-bash"><code class="language-bash"> static public void QueryList<span class="token punctuation">(</span><span class="token punctuation">)</span> //查询多行数据 SqlDataReader        <span class="token punctuation">{</span>            string constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select * from Category"</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlDataReader dr <span class="token operator">=</span> cmd.ExecuteReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dr.HasRows<span class="token punctuation">)</span>//是返回返回结果            <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>dr.Read<span class="token punctuation">(</span><span class="token punctuation">))</span>//前进下一行记录                <span class="token punctuation">{</span>                    //Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //for <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 5<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>                    //<span class="token punctuation">{</span>                    //    Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //<span class="token punctuation">}</span>                    Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> +<span class="token string">"+"</span>+ dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //Console.WriteLine<span class="token punctuation">(</span>dr.GetOrdinal<span class="token punctuation">(</span><span class="token string">"C_id"</span><span class="token punctuation">)</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"无数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            dr.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="使用适配器读取数据-填充数据集-SqlDataAdapter"><a href="#使用适配器读取数据-填充数据集-SqlDataAdapter" class="headerlink" title="使用适配器读取数据,填充数据集 SqlDataAdapter"></a>使用适配器读取数据,填充数据集 SqlDataAdapter</h2><pre class=" language-bash"><code class="language-bash">  static public void QueryListByAdapter<span class="token punctuation">(</span><span class="token punctuation">)</span> //使用适配器读取数据,填充数据集 SqlDataAdapter        <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select * from Category"</span><span class="token punctuation">;</span>            //创建适配器，告诉它要做什么事情，走那条路            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建数据集对象（程序端的临时数据库）            DataSet ds <span class="token operator">=</span> new DataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //调用fill方法，填充数据集（先去数据库查询数据集，并把结果集返回赋值给数据集）            da.Fill<span class="token punctuation">(</span>ds,<span class="token string">"table1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //获取数据集中的每一张表            DataTable dt <span class="token operator">=</span> ds.Tables<span class="token punctuation">[</span><span class="token string">"table1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            //循环数据表中的每一行            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dt.Rows.Count<span class="token punctuation">;</span>i++ <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                DataRow dr <span class="token operator">=</span> dt.Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                //每一行里的每一列                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span></code></pre><h2 id="使用适配器读取数据-填充表-SqlDataAdapter"><a href="#使用适配器读取数据-填充表-SqlDataAdapter" class="headerlink" title="使用适配器读取数据,填充表 SqlDataAdapter"></a>使用适配器读取数据,填充表 SqlDataAdapter</h2><pre class=" language-bash"><code class="language-bash">  static public void QueryListByAdapter2<span class="token punctuation">(</span><span class="token punctuation">)</span> //使用适配器读取数据,填充表 SqlDataAdapter        <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select * from Category"</span><span class="token punctuation">;</span>            //创建适配器，告诉它要做什么事情，走那条路            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建数据表（程序端的临时数据库）            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //调用fill方法，填充数据集（先去数据库查询数据集，并把结果集返回赋值给数据集）            da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            //循环数据表中的每一行            foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            //for <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dt.Rows.Count<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            //<span class="token punctuation">{</span>            //    DataRow dr <span class="token operator">=</span> dt.Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            //    //每一行里的每一列            //    Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //<span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="调用存储过程-单个参数"><a href="#调用存储过程-单个参数" class="headerlink" title="调用存储过程 单个参数"></a>调用存储过程 单个参数</h2><pre class=" language-bash"><code class="language-bash"> static public void QueryListByProc<span class="token punctuation">(</span><span class="token punctuation">)</span> //调用存储过程 单个参数        <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token string">"usp_getBook"</span>, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd.CommandType <span class="token operator">=</span> CommandType.StoredProcedure<span class="token punctuation">;</span> //指定命令类型为存储过程            SqlParameter sp<span class="token operator">=</span>new SqlParameter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//指定存储过程中的参数            sp.ParameterName <span class="token operator">=</span> <span class="token string">"@CateId"</span><span class="token punctuation">;</span>            sp.SqlDbType <span class="token operator">=</span> SqlDbType.Int<span class="token punctuation">;</span>            sp.Value <span class="token operator">=</span> 3<span class="token punctuation">;</span>            cmd.Parameters.Add<span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>//将参数对象加入到命令对象的参数集合中            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="调用存储过程，多参数"><a href="#调用存储过程，多参数" class="headerlink" title="调用存储过程，多参数"></a>调用存储过程，多参数</h2><pre class=" language-bash"><code class="language-bash">        static public void QueryListByProc2<span class="token punctuation">(</span><span class="token punctuation">)</span>//调用存储过程，多参数         <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=Bank;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token string">"getBank"</span>, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd.CommandType <span class="token operator">=</span> CommandType.StoredProcedure<span class="token punctuation">;</span>//指定作为存储过程执行            SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> sp <span class="token operator">=</span> <span class="token punctuation">{</span> new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageSize"</span>, SqlDbType.Int, 4<span class="token punctuation">)</span>,                                  new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageindex"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                  new SqlParameter<span class="token punctuation">(</span><span class="token string">"@rowCount"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                  new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageCount"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>                                <span class="token punctuation">}</span><span class="token punctuation">;</span>            sp<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 2<span class="token punctuation">;</span>//设置搜索第一页            sp<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 5<span class="token punctuation">;</span>//设置显示的页数            sp<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>//输出参数            sp<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>            //sp<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 5<span class="token punctuation">;</span>            //sp<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 5<span class="token punctuation">;</span>            cmd.Parameters.AddRange<span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>//为cmd对象添加参数数组            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>//创建适配器            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创建数据表（程序端）            da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"R"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"+"</span>+dr<span class="token punctuation">[</span><span class="token string">"bankID"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"+"</span>+dr<span class="token punctuation">[</span><span class="token string">"customerName"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"+"</span>+dr<span class="token punctuation">[</span><span class="token string">"currentMoney"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            int rowCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>cmd.Parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>            int pageCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>cmd.Parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0},{1}"</span>,rowCount,pageCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="SqlHelper"><a href="#SqlHelper" class="headerlink" title="SqlHelper"></a>SqlHelper</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Configuration<span class="token punctuation">;</span>using System.Data.SqlClient<span class="token punctuation">;</span>namespace Power_2.DAL<span class="token punctuation">{</span>    class SqlHelper    <span class="token punctuation">{</span> //每次打开一个连接保持快速连接        private static <span class="token function">readonly</span> string constr <span class="token operator">=</span> ConfigurationManager.ConnectionStrings<span class="token punctuation">[</span><span class="token string">"conStr"</span><span class="token punctuation">]</span>.ConnectionString<span class="token punctuation">;</span>        //封装方法的原则：把不变大的放到方法里，把变化的放参数中到        private static SqlConnection conn<span class="token punctuation">;</span> //连接        public static SqlConnection Conn        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> null <span class="token operator">||</span> conn.State <span class="token operator">==</span> ConnectionState.Broken<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> conn<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 析构函数，自动消除，防止没有删除完，程序自动调用        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sql"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        ~SqlHelper<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public void Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span> //写个方法可以调用回收        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn.State <span class="token operator">!=</span> ConnectionState.Closed<span class="token punctuation">)</span>                    conn.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                conn.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 执行的语句 执行增删改        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sql"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static int ExecuteNonQuery<span class="token punctuation">(</span>string sql<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 参数执行的语句 执行增删改        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sqlstr"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"paras"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static int ExecuteNonQuery<span class="token punctuation">(</span>string sqlstr, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                int res <span class="token operator">=</span> 0<span class="token punctuation">;</span>                try                <span class="token punctuation">{</span>                    res <span class="token operator">=</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    throw ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                finally                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd.Parameters.Count <span class="token operator">></span> 0<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            cmd.Parameters.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        cmd.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        cmd <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                Conn.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ExecuteScalar<span class="token punctuation">(</span>string sql<span class="token punctuation">)</span> //查询单个值        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ExecuteScalar<span class="token punctuation">(</span>string sql, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span> //查询单个值        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 查询结果集比较少的sql        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sql"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"paras"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static DataTable ExecuteDataTable<span class="token punctuation">(</span>string sql, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sql,conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                SqlDataAdapter adapter <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                try                <span class="token punctuation">{</span>                    adapter.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    throw ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                finally                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        adapter.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        adapter <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> dt<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static SqlDataReader ExecuteDataReader<span class="token punctuation">(</span>string cmdText, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>            conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                cmd.CommandText <span class="token operator">=</span> cmdText<span class="token punctuation">;</span>                cmd.Parameters.AddRange<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> cmd.ExecuteReader<span class="token punctuation">(</span>CommandBehavior.CloseConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 执行简单分页存储过程        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pageIndex"</span><span class="token operator">></span>每页行数<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pageSize"</span><span class="token operator">></span>当前页面数<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"rowCount"</span><span class="token operator">></span>总行数（传出参数）<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pageCount"</span><span class="token operator">></span>总页数（传出参数）<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static DataTable ExecProSimplePageList<span class="token punctuation">(</span>int pageIndex, int pageSize, out int rowCount, out int pageCount<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            rowCount <span class="token operator">=</span> 1<span class="token punctuation">;</span>            pageCount <span class="token operator">=</span> 1<span class="token punctuation">;</span>            SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span><span class="token punctuation">{</span>                                      new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageindex"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                       new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageSize "</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                       new SqlParameter<span class="token punctuation">(</span><span class="token string">"@rowCount "</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                       new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageCount"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>                                      <span class="token punctuation">}</span><span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Value <span class="token operator">=</span> pageIndex<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Value <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value <span class="token operator">=</span> rowCount<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value <span class="token operator">=</span> pageCount<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span><span class="token punctuation">{</span>                 cmd.Connection <span class="token operator">=</span> conn<span class="token punctuation">;</span>                 cmd.CommandText <span class="token operator">=</span> <span class="token string">"usp_Book_paging"</span><span class="token punctuation">;</span>                 cmd.CommandType <span class="token operator">=</span> CommandType.StoredProcedure<span class="token punctuation">;</span>                 cmd.Parameters.AddRange<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>                 SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                 DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>                 rowCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                 pageCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> dt<span class="token punctuation">;</span>             <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        public static object FromDbValue<span class="token punctuation">(</span>object value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> DBNull.Value<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ToDbValue<span class="token punctuation">(</span>object value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> DBNull.Value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ////////////////////执行存储过程的增删查改//////////////////////////        private static SqlConnection CNN        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn.State <span class="token operator">!=</span> ConnectionState.Open<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> conn<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region 连接等都写在一个方法里</span>        private static SqlCommand CreateCommand<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd.Connection <span class="token operator">=</span> CNN<span class="token punctuation">;</span>            cmd.CommandText <span class="token operator">=</span> cmdText<span class="token punctuation">;</span>            cmd.CommandType <span class="token operator">=</span> cmdType<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parms <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cmd.Parameters.AddRange<span class="token punctuation">(</span>parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> cmd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ///         <span class="token comment" spellcheck="true">#endregion &lt;summary></span>        ///执行增删改功能储存过程        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region ExecuteCommand</span>        public static int ExecuteCommand<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> ExecuteCommand<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static int ExecuteCommand<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> ExecuteCommand<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static int ExecuteCommand<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 返回一张表        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region GetTable</span>        public static DataTable GetTable<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetTable<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static DataTable GetTable<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetTable<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static DataTable GetTable<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DataTable table <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlDataAdapter adapter <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">))</span><span class="token punctuation">;</span>            adapter.Fill<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> table<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// SqlDataReader可以读一行行数据的对象、查询多行数据 SqlDataReader        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region GetReader</span>        public static SqlDataReader GetReader<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetReader<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static SqlDataReader GetReader<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetReader<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static SqlDataReader GetReader<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cmd.ExecuteReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 返回单个值        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region GetScalar</span>        public static object GetScalar<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetScalar<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static object GetScalar<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetScalar<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static object GetScalar<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADO.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML解析demo</title>
      <link href="/2019/01/08/xml/"/>
      <url>/2019/01/08/xml/</url>
      
        <content type="html"><![CDATA[<h2 id="创建xml"><a href="#创建xml" class="headerlink" title="创建xml"></a>创建xml</h2><pre class=" language-bash"><code class="language-bash">  static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  //1.创建一个XDocument对象      XDocument writeXml <span class="token operator">=</span> new XDocument<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     //2.增加一个根节点      XElement XRoot <span class="token operator">=</span> new XElement<span class="token punctuation">(</span><span class="token string">"WebSites"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      //3.将根节点加到writeXML中      writeXml.Add<span class="token punctuation">(</span>XRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>      //4.写子节点      XElement XeBaidu <span class="token operator">=</span> new XElement<span class="token punctuation">(</span><span class="token string">"WebSite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      XeBaidu.SetAttributeValue<span class="token punctuation">(</span><span class="token string">"url"</span>, <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      //5.把子节点加到根节点上      //快速添加子节点      XRoot.SetElementValue<span class="token punctuation">(</span><span class="token string">"webSiteCount"</span>,100<span class="token punctuation">)</span><span class="token punctuation">;</span>      XRoot.Add<span class="token punctuation">(</span>XeBaidu<span class="token punctuation">)</span><span class="token punctuation">;</span>      //继续增加子元素增加子标签      XeBaidu.SetElementValue<span class="token punctuation">(</span><span class="token string">"name"</span>, <span class="token string">"笑笑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      XeBaidu.SetElementValue<span class="token punctuation">(</span><span class="token string">"age"</span>, <span class="token string">"19"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      writeXml.Save<span class="token punctuation">(</span><span class="token string">"Web.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="解析XML"><a href="#解析XML" class="headerlink" title="解析XML"></a>解析XML</h2><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     XDocument doc <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\订单练习\orders.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     XElement orderElement <span class="token operator">=</span> doc.Root<span class="token punctuation">;</span>     XElement customerElement<span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"CustomerName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     XElement orderNumberElement <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"orderNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     XElement orderItems <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderName <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderCount <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     foreach <span class="token punctuation">(</span>XElement order <span class="token keyword">in</span> orderItems.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span>         <span class="token punctuation">{</span>               orderName.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>               orderCount.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Count"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        Console.WriteLine<span class="token punctuation">(</span>customerElement.Value+<span class="token string">"的订单"</span>+orderNumberElement.Value+<span class="token string">"买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Console.WriteLine<span class="token punctuation">(</span>orderNae<span class="token punctuation">[</span>0<span class="token punctuation">]</span> +orderCount<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>2<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    ////////////////XML 文件<span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>order<span class="token operator">></span>  <span class="token operator">&lt;</span>CustomerName<span class="token operator">></span>小肖<span class="token operator">&lt;</span>/CustomerName<span class="token operator">></span>  <span class="token operator">&lt;</span>orderNumber<span class="token operator">></span>BJ200888<span class="token operator">&lt;</span>/orderNumber<span class="token operator">></span>  <span class="token operator">&lt;</span>items<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电脑"</span> Count<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电视"</span> Count<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"水杯"</span> Count<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>  <span class="token operator">&lt;</span>/items<span class="token operator">></span><span class="token operator">&lt;</span>/order<span class="token operator">></span></code></pre><h2 id="XML序列化"><a href="#XML序列化" class="headerlink" title="XML序列化"></a>XML序列化</h2><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Person per <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per.name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>        per.age <span class="token operator">=</span> 18<span class="token punctuation">;</span>        Person per1 <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per1.name <span class="token operator">=</span> <span class="token string">"dfafd"</span><span class="token punctuation">;</span>        per1.age <span class="token operator">=</span> 12<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list.Add<span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>        list.Add<span class="token punctuation">(</span>per1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#region 序列号一般的类</span>        //XmlSerializer xmlSer <span class="token operator">=</span> new XmlSerializer<span class="token punctuation">(</span>typeof<span class="token punctuation">(</span>Person<span class="token punctuation">))</span><span class="token punctuation">;</span>        //using <span class="token punctuation">(</span>FileStream fs <span class="token operator">=</span> File.OpenWrite<span class="token punctuation">(</span><span class="token string">"Person.xml"</span><span class="token punctuation">))</span>        //<span class="token punctuation">{</span>        //    xmlSer.Serialize<span class="token punctuation">(</span>fs, per<span class="token punctuation">)</span><span class="token punctuation">;</span>        //<span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>        <span class="token comment" spellcheck="true">#region 序列号集合</span>        XmlSerializer xmlser<span class="token operator">=</span>new XmlSerializer<span class="token punctuation">(</span>typeof<span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">))</span><span class="token punctuation">;</span>        using <span class="token punctuation">(</span>FileStream fs <span class="token operator">=</span> File.OpenWrite<span class="token punctuation">(</span><span class="token string">"list.xml"</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>            xmlser.Serialize<span class="token punctuation">(</span>fs, list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  public  class Person <span class="token punctuation">{</span>        public string name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public int age <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="studentmessage-xml文件"><a href="#studentmessage-xml文件" class="headerlink" title="studentmessage.xml文件"></a>studentmessage.xml文件</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>student<span class="token operator">></span>  <span class="token operator">&lt;</span>net09<span class="token operator">></span>    <span class="token operator">&lt;</span>preson id<span class="token operator">=</span><span class="token string">"cz001"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>小小<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>22<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>女<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/preson<span class="token operator">></span>    <span class="token operator">&lt;</span>person id<span class="token operator">=</span><span class="token string">"cz002"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>小周<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>21<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>男<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/person<span class="token operator">></span>  <span class="token operator">&lt;</span>/net09<span class="token operator">></span>  <span class="token operator">&lt;</span>net08<span class="token operator">></span>    <span class="token operator">&lt;</span>person id<span class="token operator">=</span><span class="token string">"cx001"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>嘉怡<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>16<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>女<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/person<span class="token operator">></span>    <span class="token operator">&lt;</span>person id<span class="token operator">=</span><span class="token string">"cx002"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>小肖<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>18<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>男<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/person<span class="token operator">></span>      <span class="token operator">&lt;</span>/net08<span class="token operator">></span><span class="token operator">&lt;</span>/student<span class="token operator">></span></code></pre><h2 id="XML加载"><a href="#XML加载" class="headerlink" title="XML加载"></a>XML加载</h2><pre class=" language-bash"><code class="language-bash"> private void btnXml_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //1加载            XDocument docxml <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\XML操作\studentmessage.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //2.获取根节点            XElement xmlRoot <span class="token operator">=</span> docxml.Root<span class="token punctuation">;</span>            //3.把根节点加到TreeView上            TreeNode treeviewroot <span class="token operator">=</span> tvXmlShow.Nodes.Add<span class="token punctuation">(</span>xmlRoot.Name.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //4.递归加载            LoadNodes<span class="token punctuation">(</span>xmlRoot,treeviewroot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //foreach没了，就停止了        private void LoadNodes<span class="token punctuation">(</span>XElement xmlRoot, TreeNode treeviewroot<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            foreach <span class="token punctuation">(</span>XElement ele <span class="token keyword">in</span> xmlRoot.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ele.Elements<span class="token punctuation">(</span><span class="token punctuation">)</span>.Count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>   //绑定的是元素本身                    TreeNode node <span class="token operator">=</span> treeviewroot.Nodes.Add<span class="token punctuation">(</span>ele.Name.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //如果有属性的话，怎遍历属性                    XAttribute eleAttribute<span class="token operator">=</span> ele.Attribute<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>eleAttribute <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        node.Text +<span class="token operator">=</span> <span class="token string">"{"</span> + eleAttribute.Name + <span class="token string">"="</span> + eleAttribute.Value + <span class="token string">"}"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    LoadNodes<span class="token punctuation">(</span>ele, node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> TreeNode node <span class="token operator">=</span> treeviewroot.Nodes.Add<span class="token punctuation">(</span>ele.Value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p><img src="/2019/01/08/xml/1.jpg" alt="图1"></p><h2 id="经典案例银行xml"><a href="#经典案例银行xml" class="headerlink" title="经典案例银行xml"></a>经典案例银行xml</h2><h3 id="ytbank-xml"><a href="#ytbank-xml" class="headerlink" title="ytbank.xml"></a>ytbank.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span> <span class="token operator">&lt;</span>CFX<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000001"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"腾讯销售部"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"新浪财务部"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000002"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000003"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000004"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000005"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000006"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000007"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000008"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000009"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000010"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000011"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000012"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000013"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000014"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000015"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span><span class="token operator">&lt;</span>/CFX<span class="token operator">></span></code></pre><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        XDocument bankdoc <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\银行bank解析\ytbank.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XElement bankroot <span class="token operator">=</span> bankdoc.Root<span class="token punctuation">;</span>        string businesscode, serialnumber, money, payorganization, payunit,  getorganization, getunit<span class="token punctuation">;</span>        foreach <span class="token punctuation">(</span>XElement bankmsg <span class="token keyword">in</span> bankroot.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>            businesscode <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"交易码"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            serialnumber <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"流水号"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            money <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"金额"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            payorganization <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"付款机构"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            payunit <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"付款单位账号"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            getorganization <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"收款机构"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            getunit <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"收款单位账号"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"交易码"</span> + businesscode + <span class="token string">"流水号"</span> + serialnumber + <span class="token string">"金额"</span> + money<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"付款机构"</span> + payorganization + <span class="token string">"付款单位账号"</span> + payunit<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"收款机构"</span> + getorganization + <span class="token string">"收款单位账号 "</span> + getunit<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="订单练习"><a href="#订单练习" class="headerlink" title="订单练习"></a>订单练习</h2><h3 id="orders-xml"><a href="#orders-xml" class="headerlink" title="orders.xml"></a>orders.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>order<span class="token operator">></span>  <span class="token operator">&lt;</span>CustomerName<span class="token operator">></span>小肖<span class="token operator">&lt;</span>/CustomerName<span class="token operator">></span>  <span class="token operator">&lt;</span>orderNumber<span class="token operator">></span>BJ200888<span class="token operator">&lt;</span>/orderNumber<span class="token operator">></span>  <span class="token operator">&lt;</span>items<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电脑"</span> Count<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电视"</span> Count<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"水杯"</span> Count<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>  <span class="token operator">&lt;</span>/items<span class="token operator">></span><span class="token operator">&lt;</span>/order<span class="token operator">></span></code></pre><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><pre class=" language-bash"><code class="language-bash">   static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            XDocument doc <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\订单练习\orders.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XElement orderElement <span class="token operator">=</span> doc.Root<span class="token punctuation">;</span>            XElement customerElement<span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"CustomerName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XElement orderNumberElement <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"orderNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XElement orderItems <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderName <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderCount <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>XElement order <span class="token keyword">in</span> orderItems.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                      orderName.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                      orderCount.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Count"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>               Console.WriteLine<span class="token punctuation">(</span>customerElement.Value+<span class="token string">"的订单"</span>+orderNumberElement.Value+<span class="token string">"买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               Console.WriteLine<span class="token punctuation">(</span>orderName<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + orderCount<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>2<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#委托Demo三界面同步</title>
      <link href="/2019/01/08/c-shi-jian-wei-tuo-demo-san-jie-mian-tong-bu/"/>
      <url>/2019/01/08/c-shi-jian-wei-tuo-demo-san-jie-mian-tong-bu/</url>
      
        <content type="html"><![CDATA[<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托（delegate）“一个函数赋值给一个委托变量后，调用这个委托等价于调用那个函数<br>委托就是能存放符合签名方法指针的容器</p><ol><li>委托是一种数据类型，引用类型，像类一样（可以声明委托类型变量）</li><li>使用委托的时候必须new一个委托对象，即使看到的代码没有new委托对象，编译器也会在编译时<br>帮我们new赋值给委托的方法，其实是存储在委托对象中的</li><li>委托（在代码中动态嵌入一个方法）使用的步骤：<br>1&gt;定义一个委托类型<br> public delegate void form2delegate();<br>2&gt;声明一个委托变量<br>  form2delegate wd=new form2delegate(方法名);<br>3&gt;调用委托<br>  if(wd !=null){<br> //调用委托<br>   wd();<br>  或wd.Invoke();<br> }</li><li>什么情况下用委托？委托有什么用？<br>1.有一段代码<br>2.变化（当一个类型中需要嵌入一段代码，但是这段代码具有不确定性，是根据使用这个类型的用户来确定代码的，这种情况下就可以在该类型中，使用一个委托，保证在某种情况下调用这个委托，<br>这时，用户将对应的方法传递给该委托，则就会调用这个方法）</li></ol><p>&emsp;自定义控件中的事件会大量使用到委托（写事件的时候会用到委托）<br>//可以把静态方法或私有方法赋值到委托变量，赋值后能使用到该委托变量的地方<br>就能使用该方法<br>–匿名方法： myDelegate md=delegate(){ console…};<br>调用： md();<br> public delegate void myDelegate();<br>–事件  ：委托可以实现事件所有功能时代<br>事件就是委托封装了add和remove方法，不会让别人捣乱 本质还是委托<br>定义事件之前要定义委托;</p><pre class=" language-bash"><code class="language-bash">public delegate void myTriplechick<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>public event myTriplechick Tirpclick<span class="token punctuation">;</span></code></pre><p>事件只能使用+=或-=赋值，避免使用=赋值时覆盖问题<br>/<br>委托和事件区别：委托是类型，事件是对象，相当于一个委托的变量（可以理解为对委托变量的封装（私有委托）），<br>委托可以在外部调用，可以用=号赋值，事件只能在定义事件的内部来调用，只能用+=或-=赋值,委托可以实现件的所有功能，事件相对于对委托做了一个限制。<br>/<br>事件作用与委托变量一样。<br>–程序集（exe,dll）:类型元数据（代码中每一个类型和成员），程序集元数据（程序集清单），IL代码，资源文件<br>可以通过Assmblyinfo.cs文件来定义</p><pre class=" language-bash"><code class="language-bash">namespace 委托<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        public delegate void DGSay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//声明委托类        public delegate void DGsay2<span class="token punctuation">(</span>string msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DGSay saydelegate <span class="token operator">=</span> new DGSay<span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>//方法放进去            saydelegate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DGsay2 say2delegat <span class="token operator">=</span> new DGsay2<span class="token punctuation">(</span>say2<span class="token punctuation">)</span><span class="token punctuation">;</span>            say2delegat<span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void say<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>           Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void say2<span class="token punctuation">(</span>string msg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三界面同步Demo"><a href="#三界面同步Demo" class="headerlink" title="三界面同步Demo"></a>三界面同步Demo</h2><h3 id="委托当参数"><a href="#委托当参数" class="headerlink" title="委托当参数"></a>委托当参数</h3><pre class=" language-bash"><code class="language-bash">         //定义委托，它定义了可以代表的方法的类型      public delegate void GreetingDelegate<span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">;</span>      class Program <span class="token punctuation">{</span>          private static void EnglishGreeting<span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 Console.WriteLine<span class="token punctuation">(</span>”Morning, ” + name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> Www~          private static void ChineseGreeting<span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 Console.WriteLine<span class="token punctuation">(</span>”早上好, ” + name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>           //注意此方法，它接受一个GreetingDelegate类型的方法作为参数          private static void GreetPeople<span class="token punctuation">(</span>string name, GreetingDelegate MakeGreeting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 MakeGreeting<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 GreetPeople<span class="token punctuation">(</span>”Jimmy Zhang”, EnglishGreeting<span class="token punctuation">)</span><span class="token punctuation">;</span>                 GreetPeople<span class="token punctuation">(</span>”张子阳”, ChineseGreeting<span class="token punctuation">)</span><span class="token punctuation">;</span>                 Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h3><pre class=" language-bash"><code class="language-bash">namespace 最简单的自定义事件<span class="token punctuation">{</span>     /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>     /// 事件发送类     /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>     class Class1     <span class="token punctuation">{</span>         public delegate void UserRequest<span class="token punctuation">(</span>object sender,EventArgs e<span class="token punctuation">)</span><span class="token punctuation">;</span> //定义委托         public event UserRequest OnUserRequest<span class="token punctuation">;</span> //定义一个委托类型的事件         public void run<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             while<span class="token punctuation">(</span>true<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 if<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"a"</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>//事件监听                     OnUserRequest<span class="token punctuation">(</span>this,new EventArgs<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //产生事件                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>     /// 事件接收类     /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>     class Class2     <span class="token punctuation">{</span>         static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             Class1 c1 <span class="token operator">=</span> new Class1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             c1.OnUserRequest +<span class="token operator">=</span> new Class1.UserRequest<span class="token punctuation">(</span>c1_OnUserRequest<span class="token punctuation">)</span><span class="token punctuation">;</span> //委托实例化后绑定到事件             c1.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         private static void c1_OnUserRequest<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>         <span class="token punctuation">{</span>//事件处理方法             Console.WriteLine<span class="token punctuation">(</span><span class="token string">"/t你触发了事件！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>namespace ConsoleApplication2<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            person p <span class="token operator">=</span> new person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p.hello +<span class="token operator">=</span> new person.say<span class="token punctuation">(</span>p_hello<span class="token punctuation">)</span><span class="token punctuation">;</span>            p.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void p_hello<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    class person <span class="token punctuation">{</span>        public delegate void say<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        public event say hello<span class="token punctuation">;</span>        public void run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><h3 id="Form1"><a href="#Form1" class="headerlink" title="Form1"></a>Form1</h3><pre class=" language-bash"><code class="language-bash">   private void btnForm2_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form2 form2 <span class="token operator">=</span> new Form2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form2.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnForm3_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form3 form3 <span class="token operator">=</span> new Form3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form3.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public delegate void ColorDelegate<span class="token punctuation">(</span>string color<span class="token punctuation">)</span><span class="token punctuation">;</span>        public static ColorDelegate ColorChange <span class="token operator">=</span> null<span class="token punctuation">;</span>        private void cbColor_SelectedIndexChanged<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ColorChange <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ColorChange<span class="token punctuation">(</span>this.cbColor.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="Form2"><a href="#Form2" class="headerlink" title="Form2"></a>Form2</h3><pre class=" language-bash"><code class="language-bash">   private void Form2_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form1.ColorChange +<span class="token operator">=</span> delegate<span class="token punctuation">(</span>string color<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                switch <span class="token punctuation">(</span>color<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"red"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Red<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"black"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Black<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"blue"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Blue<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="Form3"><a href="#Form3" class="headerlink" title="Form3"></a>Form3</h3><pre class=" language-bash"><code class="language-bash">  private void Form3_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form1.ColorChange +<span class="token operator">=</span> delegate<span class="token punctuation">(</span>string color<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                switch <span class="token punctuation">(</span>color<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"red"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Red<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"black"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Black<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"blue"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Blue<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流的使用</title>
      <link href="/2019/01/03/io-liu-de-shi-yong/"/>
      <url>/2019/01/03/io-liu-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="IO流的一般使用"><a href="#IO流的一般使用" class="headerlink" title="IO流的一般使用"></a>IO流的一般使用</h2><pre class=" language-bash"><code class="language-bash">string ce<span class="token operator">=</span><span class="token string">"测试"</span><span class="token punctuation">;</span>File.WriteAllText<span class="token punctuation">(</span>@<span class="token string">"12.txt"</span>,ce,Encoding.UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span> //Path类string s1 <span class="token operator">=</span> @<span class="token string">"C:\a"</span><span class="token punctuation">;</span>string s2 <span class="token operator">=</span> <span class="token string">"b.txt"</span><span class="token punctuation">;</span>//combine处理末尾\问题string s3 <span class="token operator">=</span> Path.Combine<span class="token punctuation">(</span>s1, s2<span class="token punctuation">)</span><span class="token punctuation">;</span>Console.WriteLine<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>string g1 <span class="token operator">=</span> @<span class="token string">"c:\windows\test\a.txt"</span><span class="token punctuation">;</span>// 1.获取文件名Console.WriteLine<span class="token punctuation">(</span>Path.GetFileName<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>// 2.获取目录Console.WriteLine<span class="token punctuation">(</span>Path.GetDirectoryName<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//3.获取文件名不包括扩展名Console.WriteLine<span class="token punctuation">(</span>Path.GetFileNameWithoutExtension<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//4.获取扩展名Console.WriteLine<span class="token punctuation">(</span>Path.GetExtension<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//5.获取完整路劲<span class="token punctuation">..</span>/获取父目录Console.WriteLine<span class="token punctuation">(</span>Path.GetFullPath<span class="token punctuation">(</span><span class="token string">"12.txt"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//6.获取当前用户临时目录Console.WriteLine<span class="token punctuation">(</span>Path.GetTempPath<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//7.获取一个随机的文件名（也可以用作文件夹名）Console.WriteLine<span class="token punctuation">(</span>Path.GetRandomFileName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//8.获取一个随机的文件名，并在临时目录下创建这个文件Console.WriteLine<span class="token punctuation">(</span>Path.GetTempFileName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span></code></pre><h2 id="StreamWriter字符串生成js文件"><a href="#StreamWriter字符串生成js文件" class="headerlink" title="StreamWriter字符串生成js文件"></a>StreamWriter字符串生成js文件</h2><pre class=" language-bash"><code class="language-bash"> string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> string path <span class="token operator">=</span> <span class="token string">"D:/newfdc"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string FileName <span class="token operator">=</span><span class="token string">"hello.js"</span><span class="token punctuation">;</span> Encoding code <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> StreamWriter sw <span class="token operator">=</span> new StreamWriter<span class="token punctuation">(</span>Path.Combine<span class="token punctuation">(</span>path, FileName<span class="token punctuation">)</span>, false, code<span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Write<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="file-copy使用"><a href="#file-copy使用" class="headerlink" title="file.copy使用"></a>file.copy使用</h2><pre class=" language-bash"><code class="language-bash"> string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> string path <span class="token operator">=</span> <span class="token string">"D:/newfdc"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string FileName <span class="token operator">=</span><span class="token string">"hello.js"</span><span class="token punctuation">;</span> Encoding code <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> string nowpath <span class="token operator">=</span> Path.Combine<span class="token punctuation">(</span>path, FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>//现有文件 string path2 <span class="token operator">=</span> <span class="token string">"E:/new"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path2<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string name <span class="token operator">=</span> <span class="token string">"copy.js"</span><span class="token punctuation">;</span> File.Copy<span class="token punctuation">(</span>nowpath,Path.Combine<span class="token punctuation">(</span>path2,name<span class="token punctuation">)</span>,true<span class="token punctuation">)</span><span class="token punctuation">;</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"复制成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><pre class=" language-bash"><code class="language-bash">  <span class="token keyword">if</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      path <span class="token operator">=</span> System.Configuration.ConfigurationSettings.AppSettings<span class="token punctuation">[</span><span class="token string">"jsupload"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span>      <span class="token punctuation">{</span>          Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      File.Copy<span class="token punctuation">(</span>localfileName, Path.Combine<span class="token punctuation">(</span>path, ftpfileName<span class="token punctuation">)</span>, true<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h2 id="StreamWriter和reader"><a href="#StreamWriter和reader" class="headerlink" title="StreamWriter和reader"></a>StreamWriter和reader</h2><pre class=" language-bash"><code class="language-bash"> string mobile <span class="token operator">=</span> <span class="token string">"13628611111"</span><span class="token punctuation">;</span> StreamWriter writer <span class="token operator">=</span> new StreamWriter<span class="token punctuation">(</span><span class="token string">"SMS.txt"</span>, true, Encoding.UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Write<span class="token punctuation">(</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Write<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> StreamReader reader <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span><span class="token string">"SMS.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string read<span class="token operator">=</span> reader.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span>int count <span class="token operator">=</span> 0<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>read.IndexOf<span class="token punctuation">(</span>mobile, i<span class="token punctuation">)</span> <span class="token operator">>=</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token operator">=</span>read.IndexOf<span class="token punctuation">(</span>mobile,i<span class="token punctuation">)</span>+1<span class="token punctuation">;</span>  count++<span class="token punctuation">;</span> <span class="token punctuation">}</span>Console.WriteLine<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Serializable序列号案例"><a href="#Serializable序列号案例" class="headerlink" title="Serializable序列号案例"></a>Serializable序列号案例</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>public class ClassToSerialize<span class="token punctuation">{</span>    public int <span class="token function">id</span> <span class="token operator">=</span> 100<span class="token punctuation">;</span>    public string name <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>NonSerialized<span class="token punctuation">]</span>    public string Sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public void SerializeNow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ClassToSerialize c <span class="token operator">=</span> new ClassToSerialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     FileStream fileStream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"c:\\temp.dat"</span>, FileMode.Create<span class="token punctuation">)</span><span class="token punctuation">;</span>     BinaryFormatter b <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     b.Serialize<span class="token punctuation">(</span>fileStream, c<span class="token punctuation">)</span><span class="token punctuation">;</span>     fileStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> public void DeSerializeNow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ClassToSerialize c <span class="token operator">=</span> new ClassToSerialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     c.Sex <span class="token operator">=</span> <span class="token string">"kkkk"</span><span class="token punctuation">;</span>     FileStream fileStream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"c:\\temp.dat"</span>, FileMode.Open, FileAccess.Read, FileShare.Read<span class="token punctuation">)</span><span class="token punctuation">;</span>     BinaryFormatter b <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     c <span class="token operator">=</span> b.Deserialize<span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span> as ClassToSerialize<span class="token punctuation">;</span>       Response.Write<span class="token punctuation">(</span>c.name<span class="token punctuation">)</span><span class="token punctuation">;</span>     Response.Write<span class="token punctuation">(</span>c.Sex<span class="token punctuation">)</span><span class="token punctuation">;</span>     fileStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//////////////////////////////<span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>public class XRentManager<span class="token punctuation">{</span>   public XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       m_DicMyTraffics <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       m_DicRenteds <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//出租集合   <span class="token punctuation">}</span>   ///字典集合：保存可以出租的车   private Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> m_DicMyTraffics<span class="token punctuation">;</span>   internal Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> DicMyTraffics   <span class="token punctuation">{</span>        get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DicMyTraffics<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    /// 获取可以出租的汽车集合    private Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> m_DicRenteds<span class="token punctuation">;</span>   /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>   /// 汽车入库或者出租的车回库   /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>   internal Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> DicRenteds   <span class="token punctuation">{</span>     get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DicRenteds<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#region 反序列化</span> FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"Students.bin"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fs.Length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>     m_RM <span class="token operator">=</span> bf.Deserialize<span class="token punctuation">(</span>fs<span class="token punctuation">)</span> as XRentManager<span class="token punctuation">;</span>//反序列化 <span class="token punctuation">}</span> bf <span class="token operator">=</span> null<span class="token punctuation">;</span> fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //正序列化 XRentManager m_RM <span class="token operator">=</span> new XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#region 序列化</span> FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"Students.bin"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创建序列化 bf.Serialize<span class="token punctuation">(</span>fs, m_RM<span class="token punctuation">)</span><span class="token punctuation">;</span>//保存 bf <span class="token operator">=</span> null<span class="token punctuation">;</span> fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#endregion</span></code></pre><h2 id="Direcotry类（操作目录）"><a href="#Direcotry类（操作目录）" class="headerlink" title="Direcotry类（操作目录）"></a>Direcotry类（操作目录）</h2><pre class=" language-bash"><code class="language-bash">//1.创建一些目录Directory.CreateDirectory<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//2.获取当前目录下的所有的直接子目录<span class="token punctuation">(</span>文件夹<span class="token punctuation">)</span>第二个参数包含<span class="token string">"*I*"</span>，第三个参数，是当前目录还是所有搜索string <span class="token punctuation">[</span><span class="token punctuation">]</span> dirs<span class="token operator">=</span> Directory.GetDirectories<span class="token punctuation">(</span>@<span class="token string">"c:\");foreach(string item in dirs ){    Console.WriteLine(item);}//3.获取当前目录下的所有文件string[] files = Directory.GetFiles(@"</span>c:\<span class="token string">");foreach (string item in files) {   Console.WriteLine(item);}//4.判断是否有这个目录返boolDirectory.Exists(@"</span>C:\test1<span class="token string">");//5.删目录Directory.Delete(@"</span>C:\test1<span class="token string">",true);//6.移动，剪切，移动到同一个地方，改名字，就是重名Directory.Move(@"</span>C:\a.txt<span class="token string">", @"</span>C:\a\a.txt"<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><pre class=" language-bash"><code class="language-bash">    //1.判断文件是否存在？2.删除DeleteFile.Exists<span class="token punctuation">(</span>@<span class="token string">"C:\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //2.读取也有对应的写入File.ReadAllLines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File.ReadAllBytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File.ReadAllText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="文件流-FileStream"><a href="#文件流-FileStream" class="headerlink" title="文件流 FileStream"></a>文件流 FileStream</h2><pre class=" language-bash"><code class="language-bash"> //1.创建一个文件流 FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span>@<span class="token string">"c:\txt.txt"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> //2.读或写,每次读取的内容都有放在缓冲区中 byte<span class="token punctuation">[</span><span class="token punctuation">]</span> byts<span class="token operator">=</span>new byte<span class="token punctuation">[</span>fs.Length<span class="token punctuation">]</span><span class="token punctuation">;</span> //设置、字节 //第一个参数：文件中的字节读取到该数组中，0是从第0个索引开始放，第三个参数数最多读取的字长 fs.Read<span class="token punctuation">(</span>byts, 0, byts.Length<span class="token punctuation">)</span><span class="token punctuation">;</span> //文件流要关闭和释放 fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# 基础知识 </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebClient抓取网页代码</title>
      <link href="/2019/01/03/webclient-zhua-qu-wang-ye-dai-ma/"/>
      <url>/2019/01/03/webclient-zhua-qu-wang-ye-dai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="WebClient类"><a href="#WebClient类" class="headerlink" title="WebClient类"></a>WebClient类<br></h2><p>&emsp;WebClient类位于System.Net命名空间下，WebClient类提供向URI标识的任何本地、Intranet或Internet资源发送数据以及从这些资源接收数据的公共方法。<br>源代码:</p><pre class=" language-bash"><code class="language-bash">///引用命名空间using System.IO<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>PageUrl <span class="token operator">=</span> <span class="token string">"http://www.webkaka.com"</span><span class="token punctuation">;</span> //需要获取源代码的网页WebClient <span class="token function">wc</span> <span class="token operator">=</span> new WebClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 创建WebClient实例提供向URI 标识的资源发送数据和从URI 标识的资源接收数据wc.Credentials <span class="token operator">=</span> CredentialCache.DefaultCredentials<span class="token punctuation">;</span> // 获取或设置用于对向 Internet 资源的请求进行身份验证的网络凭据。///方法一：Encoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> pageData <span class="token operator">=</span> wc.DownloadData<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> // 从资源下载数据并返回字节数组。ContentHtml.Text <span class="token operator">=</span> enc.GetString<span class="token punctuation">(</span>pageData<span class="token punctuation">)</span><span class="token punctuation">;</span> // 输出字符串<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件</code></pre><pre class=" language-bash"><code class="language-bash">/// 方法二：/// ***************代码开始**********Stream resStream <span class="token operator">=</span> wc.OpenRead<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> //以流的形式打开URLEncoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312StreamReader sr <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span>resStream,enc<span class="token punctuation">)</span><span class="token punctuation">;</span> //以指定的编码方式读取数据流ContentHtml.Text <span class="token operator">=</span> sr.ReadToEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //输出<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件 resStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>/// **************代码结束********/// wc.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="WebRequest类"><a href="#WebRequest类" class="headerlink" title="WebRequest类"></a>WebRequest类</h2><p>&emsp;WebRequest类是.NET Framework中“请求/响应”模型的abstract基类，用于访问Internet数据。使用WebRequest类请求/响应模型的应用程序可以用协议不可知的方式从Internet请求数据，在这种方式下，应用程序处理WebRequest类的实例，而协议特定的子类则执行请求的具体细节，请求从应用程序发送到某个特定的URI，如服务器上的网页。URI从一个为应用程序注册的WebRequest子类列表中确定要创建的适当子类。注册WebRequest子类通常是为了处理某个特定的协议（如HTTP或FTP），但是也可以注册它以处理对特定服务器或服务器上的路径的请求。<br><br>&emsp;WebRequest类中最常用的是Create方法，Create方法用于为指定的URI方案初始化新的WebRequest实例。</p><pre class=" language-bash"><code class="language-bash">　　语法：public static WebRequest Create<span class="token punctuation">(</span>　 string requestUriString<span class="token punctuation">)</span></code></pre><p>　　参数：requestUriString：标识Internet资源的URI。<br><br>　　返回值：特定URI方案的WebRequest子类。<br><br>　　注意：Create方法将运行时确定的WebRequest类的子类作为与requestUri最接近的注册匹配项返回。例如，当以http://开头的URI在requestUri中传递时，由Create返回一个HttpWebRequest。如果改为传递以file://开头的URI，则Create方法将返回FileWebRequest实例。.NET Framework包括对http://和file:// URI方案的支持。</p><h2 id="WebResponse类"><a href="#WebResponse类" class="headerlink" title="WebResponse类"></a>WebResponse类</h2><p>&emsp;WebResponse类是abstract基类，协议特定的响应类从该抽象基类派生。应用程序可以使用 WebResponse类的实例以协议不可知的方式参与请求和响应事务，而从WebResponse类派生的协议特定的类携带请求的详细信息。<br>　　在WebResponse类中最常用的是GetResponse方法，GetResponse方法用于当在子类中被重写时，返回对 Internet 请求的响应<br>　　语法：<br>　　public virtual WebResponse GetResponse ()<br>　　返回值：包含对Internet请求的响应的WebResponse。</p><pre class=" language-bash"><code class="language-bash">源代码///引用命名空间using System.IO<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>PageUrl <span class="token operator">=</span> <span class="token string">"http://www.webkaka.com"</span><span class="token punctuation">;</span> //需要获取源代码的网页WebRequest request <span class="token operator">=</span> WebRequest.Create<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> //WebRequest.Create方法，返回WebRequest的子类HttpWebRequestWebResponse response <span class="token operator">=</span> request.GetResponse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //WebRequest.GetResponse方法，返回对 Internet 请求的响应Stream resStream <span class="token operator">=</span> response.GetResponseStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //WebResponse.GetResponseStream 方法，从 Internet 资源返回数据流。 Encoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312StreamReader sr <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span>resStream, enc<span class="token punctuation">)</span><span class="token punctuation">;</span> //命名空间:System.IO。 StreamReader 类实现一个 TextReader <span class="token punctuation">(</span>TextReader类，表示可读取连续字符系列的读取器<span class="token punctuation">)</span>，使其以一种特定的编码从字节流中读取字符。 ContentHtml.Text <span class="token operator">=</span> sr.ReadToEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //输出<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件resStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sr.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>orcale总结</title>
      <link href="/2019/01/02/orcale-zong-jie/"/>
      <url>/2019/01/02/orcale-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="orcale-导出和导入数据"><a href="#orcale-导出和导入数据" class="headerlink" title="orcale 导出和导入数据"></a>orcale 导出和导入数据</h2><p>有些网友报错，一般都是没有dba权限，授权：</p><pre class=" language-bash"><code class="language-bash">sqlplus / as sysdba进入后直接创建用户并授予dba的权限例如：sqlplus / as sysdbaSQL*Plus: Release 11.1.0.7.0 - Production on 星期二 3月 22 09:10:48 2011Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1982, 2008, Oracle. All rights reserved.连接到:Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing optionsSQL<span class="token operator">></span> create user testmin identified by testmin<span class="token punctuation">;</span>用户已创建。SQL<span class="token operator">></span> grant dba to testmin<span class="token punctuation">;</span>授权成功。SQL<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">数据库导出功能：1 将数据库TEST完全导出,用户名system 密码manager 导出到D:\daochu.dmp中exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp full<span class="token operator">=</span>y2 将数据库中system用户与sys用户的表导出exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp owner<span class="token operator">=</span><span class="token punctuation">(</span>system,sys<span class="token punctuation">)</span>3 将数据库中的表table1 、table2导出exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp tables<span class="token operator">=</span><span class="token punctuation">(</span>table1,table2<span class="token punctuation">)</span>4 将数据库中的表table1中的字段filed1以<span class="token string">"00"</span>打头的数据导出exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp tables<span class="token operator">=</span><span class="token punctuation">(</span>table1<span class="token punctuation">)</span> query<span class="token operator">=</span>\" where filed1 like <span class="token string">'00%'</span>\"</code></pre><p>数据的导入</p><pre class=" language-bash"><code class="language-bash">1 将D:\daochu.dmp 中的数据导入 TEST数据库中。imp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp ignore<span class="token operator">=</span>y上面可能有点问题，因为有的表已经存在，然后它就报错，对该表就不进行导入。在后面加上 ignore<span class="token operator">=</span>y 就可以了。2 将d:\daochu.dmp中的表table1 导入imp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp tables<span class="token operator">=</span><span class="token punctuation">(</span>table1<span class="token punctuation">)</span></code></pre><h2 id="orcale设置权限"><a href="#orcale设置权限" class="headerlink" title="orcale设置权限"></a>orcale设置权限</h2><p>Oracle 创建普通用户，并赋予权限</p><pre class=" language-bash"><code class="language-bash">1.采用sys or system / manager as sysdba<span class="token punctuation">;</span> 连接数据库。2.创建普通用户konglin: create user konglin identified by pwd_oracle<span class="token punctuation">;</span>删除用户, drop user konglin<span class="token punctuation">;</span>3.授予用户登录数据库的权限： grant create session to konglin<span class="token punctuation">;</span>4.授予用户操作表空间的权限：<span class="token operator">&lt;</span>br<span class="token operator">></span>grant unlimited tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant create tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant alter tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant drop tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant manage tablespace to konglin<span class="token punctuation">;</span>5.授予用户操作表的权限：grant create table to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有create index权限, alter table, drop table权限<span class="token punctuation">)</span>6.授予用户操作视图的权限:grant create view to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有alter view, drop view权限<span class="token punctuation">)</span>7.授予用户操作触发器的权限：grant create trigger to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有alter trigger, drop trigger权限<span class="token punctuation">)</span>8.授予用户操作存储过程的权限：grant create procedure to konglin<span class="token punctuation">;</span><span class="token punctuation">(</span>包含有alter procedure, drop procedure 和function 以及 package权限<span class="token punctuation">)</span>9.授予用户操作序列的权限：grant create sequence to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有创建、修改、删除以及选择序列<span class="token punctuation">)</span>10.授予用户回退段权限：grant create rollback segment to konglin<span class="token punctuation">;</span>grant alter rollback segment to konglin<span class="token punctuation">;</span>grant drop rollback segment to konglin<span class="token punctuation">;</span>11.授予用户同义词权限：grant create synonym to konglin<span class="token punctuation">;</span><span class="token punctuation">(</span>包含drop synonym权限<span class="token punctuation">)</span>grant create public synonym to konglin<span class="token punctuation">;</span>grant drop public synonym to konglin<span class="token punctuation">;</span>12.授予用户关于用户的权限：grant create user to konglin<span class="token punctuation">;</span>grant alter user to konglin<span class="token punctuation">;</span>grant become user to konglin<span class="token punctuation">;</span>grant drop user to konglin<span class="token punctuation">;</span>13.授予用户关于角色的权限：grant create role to konglin<span class="token punctuation">;</span>14.授予用户操作概要文件的权限grant create profile to konglin<span class="token punctuation">;</span>grant alter profile to konglin<span class="token punctuation">;</span>grant drop profile to konglin<span class="token punctuation">;</span>15.允许从sys用户所拥有的数据字典表中进行选择grant <span class="token keyword">select</span> any dictionary to konglin<span class="token punctuation">;</span></code></pre><h2 id="sqlplus创建表基本操作"><a href="#sqlplus创建表基本操作" class="headerlink" title="sqlplus创建表基本操作"></a>sqlplus创建表基本操作</h2><pre class=" language-bash"><code class="language-bash">最高用户（系统管理员）可以删别人用户 drop userSQL<span class="token operator">></span> create user xiaoming identified by 123<span class="token punctuation">;</span> 创建用户SQL<span class="token operator">></span> grant connect to xiaoming<span class="token punctuation">;</span>授权SQL<span class="token operator">></span> grant <span class="token keyword">select</span> on emp to xiaoming；授权给小明SQL<span class="token operator">></span>show user 查看当前用户SQL<span class="token operator">></span>conn sysstem/manager 连接用户 账户/密码 连接SQL<span class="token operator">></span>对表user没权限 alter user 数据库用户名 <span class="token function">quota</span> unlimited on USERS<span class="token punctuation">;</span>SQL<span class="token operator">></span>GrantCreate session,create table,select any table,update any table,insert anytable,delete any table To user_namealter user zy20081 <span class="token function">quota</span> unlimited on USERS  空间操作权限 导入表给所有权限disc<span class="token punctuation">[</span>onnect<span class="token punctuation">]</span>断开连接passw<span class="token punctuation">[</span>ord<span class="token punctuation">]</span> 用户名 修改密码sys/system可以修改别人密码<span class="token keyword">exit</span> 退出文件操作命令sql<span class="token operator">></span>START d:\a.sql 运行一个脚本SQL<span class="token operator">></span>edit d:\a.sql 编辑。。。。。。截取中间内容。。。。。。。。。SQL<span class="token operator">></span> spool d:\bb.sql 建立SQL<span class="token operator">></span> <span class="token keyword">select</span> * from 表SQL<span class="token operator">></span> spool off<span class="token punctuation">;</span> 保存 。。。。。。。。。。。。。SQL<span class="token operator">></span> show linesize 设置显示行的宽度 默认是80个字符SQL<span class="token operator">></span>set linesize 90SQL<span class="token operator">></span> <span class="token keyword">set</span> pagesize 2<span class="token punctuation">;</span>设置分页。。。。。。。。。。。。。。。。。。。。。SQL<span class="token operator">></span> create user xiaoming identified by m123 创建账户和密码密码以字母开头 SQL<span class="token operator">></span>drop user xiaoming 删除用户</code></pre><h2 id="日志基本管理"><a href="#日志基本管理" class="headerlink" title="日志基本管理"></a>日志基本管理</h2><pre class=" language-bash"><code class="language-bash">1.强制日志切换（forcing log switches）alter system switch logfile<span class="token punctuation">;</span>2.强制执行检查点（forcing checkpoints）alter system checkpoint<span class="token punctuation">;</span>3.增加一个重做日志组 （adding online redo log groups）alter fatabases add logfile <span class="token punctuation">[</span> group 4 <span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token string">'/disk3/log4a.rdo'</span>,<span class="token string">'/disk4/log4b.rdo'</span><span class="token punctuation">)</span> size 1M<span class="token punctuation">;</span>4.增加一个重做日志文件<span class="token punctuation">(</span> adding online redo log memebers <span class="token punctuation">)</span>alter databases add logfile member<span class="token string">'/disk3/log1b.rdo'</span> to group 1,<span class="token string">'/disk4/log2b.rdo'</span> to group 2<span class="token punctuation">;</span>5.改变重做日志文件名 （changes the name of the online redo logfile）alter databases <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'c:/oracle/oradata/oradb/redo01.log'</span>to <span class="token string">'c:/oracle/oracdata/redo01.log'</span><span class="token punctuation">;</span>6.删除重做日志 （drio online redo log groups）alter database drop logfile groupp 3<span class="token punctuation">;</span>7.删除重做日志组（drop online redo log members）alter database drop logfile member <span class="token string">'c:/oracle/readata/red01.log'</span><span class="token punctuation">;</span>8.清空重做日志（clearing online redo log files）alter database <span class="token function">clear</span> <span class="token punctuation">[</span>unarchived<span class="token punctuation">]</span> logfile <span class="token string">'c:/oracle/log2a.rdo'</span><span class="token punctuation">;</span>9.使用logminer分析重做日志文件（using logminer analyzing redo logfiles）a.  <span class="token keyword">in</span> the init.ora specify utl_file_dir <span class="token operator">=</span> <span class="token string">' '</span>b.  execute dbms_logmnr_d.build<span class="token punctuation">(</span><span class="token string">'oradb.ora'</span>,<span class="token string">'c:\oracle\oradb\log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c.  execute dbms_logmnr_add_logfile<span class="token punctuation">(</span><span class="token string">'c:\oracle\oradata\oradb\redo01.log'</span>,dbms_logmnr.new<span class="token punctuation">)</span><span class="token punctuation">;</span>d.  execute dbms_logmnr.add_logfile<span class="token punctuation">(</span><span class="token string">'c:\oracle\oradata\oradb\redo02.log'</span>,dbms_logmnr.addfile<span class="token punctuation">)</span><span class="token punctuation">;</span>e.  execute dbms_logmnr.start_logmnr<span class="token punctuation">(</span>dictfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'c:\oracle\oradb\log\oradb.ora'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f.  <span class="token keyword">select</span> * from <span class="token function">v</span><span class="token variable">$logmnr_contents</span><span class="token punctuation">(</span>v<span class="token variable">$logmnr_dictionary</span>,v<span class="token variable">$logmnr_parameters</span> <span class="token function">v</span><span class="token variable">$logmnr_logs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g.  execute dbms_logmnr.end_logmnr<span class="token punctuation">;</span></code></pre><h2 id="表空间管理"><a href="#表空间管理" class="headerlink" title="表空间管理"></a>表空间管理</h2><pre class=" language-bash"><code class="language-bash">1.创建表空间（create tablespaces）create tablespace table_name datafile <span class="token string">'c:\oracle\oradata\file1.dbf'</span>size 100Mminimum extent 550k <span class="token punctuation">[</span>logging/nologging<span class="token punctuation">]</span>default storage <span class="token punctuation">(</span>initial 500k next 500k maxextents 500 pctinccease 0<span class="token punctuation">)</span><span class="token punctuation">[</span>online/offline<span class="token punctuation">]</span><span class="token punctuation">[</span>permanent/temporary<span class="token punctuation">]</span><span class="token punctuation">[</span>extent_management_clause<span class="token punctuation">]</span>2.创建本地管理的表空间<span class="token punctuation">(</span> locally managed tabalespace <span class="token punctuation">)</span>create tablespace user_data datafile <span class="token string">'c:\oracle\oradata\user_data001.dbf'</span>size 500Mextent management local uniform size 10M<span class="token punctuation">;</span>3. 创建临时表空间（temporary tablespace）create temporary tablespace temp tempfile <span class="token string">'c:\oracle\oradata\temppp01.dbf'</span>size 500Mextent managementlocal uniform size 10M<span class="token punctuation">;</span>4.改变表空间的存储参数（change the storage setting）alter tablespace app_data minimum extent 2M<span class="token punctuation">;</span>oralter tablespace app_date default storage<span class="token punctuation">(</span> initial 2M next 2M maxextents 999<span class="token punctuation">)</span><span class="token punctuation">;</span>5.使表空间离线或连线（taking tablespace offline or online）alter tablespace app_data offline<span class="token punctuation">;</span>oralter tablespace app_data online<span class="token punctuation">;</span>6.设置表空间为只读、可写模式（read_only tablespace）alter tablespace app_data <span class="token function">read</span> only <span class="token operator">|</span> <span class="token function">write</span><span class="token punctuation">;</span>7.删除表空间（droping tablespace）drop tablespace app_data including contents<span class="token punctuation">;</span>8.允许数据文件自动扩张（enableing automatic extension of data files）alter tablespace app_data add datafile <span class="token string">'c:\oracle\oradata\app_data01.dbf'</span>size 200Mautoextend on next 10Mmaxsize 500M<span class="token punctuation">;</span>9.手动改变数据文件大小（change the size fo data files manually）alter database datafile <span class="token string">'c:\oracle\oradata\app_data.dbf'</span>resize 200M<span class="token punctuation">;</span>10.改变表空间中的数据文件（mocing data files:alter tablespace）alter tablespace app_data <span class="token function">rename</span> datafile <span class="token string">'c:\oracle\oradata\app_data.dbf'</span> to <span class="token string">'c:\oracle\app_data.dbf'</span><span class="token punctuation">;</span>11.修改数据库中的数据文件（moving data files:alter database）alter database <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'c:\oracle\oradata\app_data.dbf'</span>to <span class="token string">'c:\oracle\app_data.dbf'</span><span class="token punctuation">;</span></code></pre><h2 id="表管理"><a href="#表管理" class="headerlink" title="表管理"></a>表管理</h2><pre class=" language-bash"><code class="language-bash">1.创建表create table table_name <span class="token punctuation">(</span>    column datatype,    <span class="token punctuation">[</span>column datatype<span class="token punctuation">]</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span>.  <span class="token punctuation">)</span><span class="token punctuation">;</span>tablespace tablespace_name <span class="token punctuation">[</span> ppctfree integer <span class="token punctuation">]</span> <span class="token punctuation">[</span> pctused integer <span class="token punctuation">]</span><span class="token punctuation">[</span> initrans integer <span class="token punctuation">]</span><span class="token punctuation">[</span> maxtrans integer <span class="token punctuation">]</span>storage<span class="token punctuation">(</span> initial 200k next 200k ppctincrease 0 maxextents 50<span class="token punctuation">)</span> <span class="token punctuation">[</span> logging <span class="token operator">|</span> nologging <span class="token punctuation">]</span>  <span class="token punctuation">[</span> cache <span class="token operator">|</span> nocaahe <span class="token punctuation">]</span>2.复制一个已存在的表（copy an existing table）create table table_name <span class="token punctuation">[</span> logging <span class="token operator">|</span> nologging <span class="token punctuation">]</span> as subquery3.创建一个临时表（create temporary table）create global temporary table xay_temp as <span class="token keyword">select</span> * from xay<span class="token punctuation">;</span>on commint preserve rows/on commit delete rows4.pctfree 和 pctused 参数计算公式pctfree <span class="token operator">=</span> <span class="token punctuation">(</span>average row size - initial row size<span class="token punctuation">)</span>*100/average row sizepctused <span class="token operator">=</span> 100-pctfree-<span class="token punctuation">(</span>average row size * 100/available data space<span class="token punctuation">)</span>    pctfree <span class="token keyword">:</span> 指定表内每个数据块中空间的百分比。pctfree的值必须介于0和99之间。如果为零，表示可以通过插入新行来填充整个块。　　　　　　　　缺省值为10.此值表示每个块中保留着10%的空间，用于更新现有的行以及插入新行，每个块最多可以填充到90%    pctused <span class="token keyword">:</span> 指定为表内每个数据块的已用空间的最小百分比。如果一个块的已用空间低于pctused，则可在该块中插入行。pctused的值介于0和99之间的整数，缺省值为40.结合pctfree 和 pctused 就可以确定将新行插入到现有数据块中，还是插入到新块中。这两个参数值的和必须小于或等于100.使用这两个参数可以更有效地利用表内的空间。设置 pctfree 和pctused    pctfree 值越高，可为数据库块内的更新提供的空间就越大。如果表存在下面两种情况，则应设置一个更高的值：？某些列最初为null，后来更新为某个值？ 　　　　　　某些列由于更新，大小可能增加pctfree的值越高，块密度就越低，即每个块容纳的行数就越少。上面的公式确保块中有足够的空间供行增长使用。    pctused 以确保只有在具备足够空间来容纳一个平均大小的行时才将块返回到空闲列表中。　　　　　　如果空闲列表中的某个块没有足够的空间来插入一行，oracle服务器将查找空闲列表中的下个块、直到找到具备足够空间的块或者到达列表的末尾，这种线性扫描才会结束。　　　　　　使用给定的公式可以增加找到具有所有需空闲空间的块的概率，从而缩短扫描空闲列表时间。注：可以使用 analyze table 命令估算平均行大小的值。注：oracle9i “自动段空间管理” 功能可替代 pctused、freelists 和 freelist       groups.5.改变存储和块利用率参数（change storage and block utilization parameter）alter table table_name pctfree<span class="token operator">=</span>30 pctused<span class="token operator">=</span>50 storage<span class="token punctuation">(</span>next 500k minextents 2 maxextents 100<span class="token punctuation">)</span><span class="token punctuation">;</span>6.手工分配区间（extents）<span class="token punctuation">(</span>manually allxoating extents<span class="token punctuation">)</span>alter table table_name allocate extent <span class="token punctuation">(</span>size 500k datafile <span class="token string">'c:/oracle/data.dbf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>7.改变表的所属表空间（move tablespace）alter table employee move tablespace <span class="token function">users</span><span class="token punctuation">;</span>8.释放表中未用空间（deallocate of unused space）alter table table_name deallocate unused <span class="token punctuation">[</span> keep integer <span class="token punctuation">]</span>9.截断表（truncate）（truncate a table ）truncate table table_name<span class="token punctuation">;</span>截断一个表将删除表中所有行，从而释放已使用的空间。对应的索引将被截断注：truncate table 不是DML语句，是DDL语句。另外truncate与delete的区别是吗，delete不释放空间，truncate释放空间。10.删除表（drop a table）drop table table_name <span class="token punctuation">[</span>cascade constraints<span class="token punctuation">]</span><span class="token punctuation">;</span>11.删除列（drop a cloumn）alter table table_name drop column commentd cascade constraints checkppoint 1000<span class="token punctuation">;</span>oralter table table_name drop columns <span class="token keyword">continue</span><span class="token punctuation">;</span>12.表示某一列为未使用（unused）（mark a column sa unused）alter table table_name <span class="token keyword">set</span> unused column comments xascade constraints<span class="token punctuation">;</span>oralter table table_name dropp unused columns checkpoint 1000<span class="token punctuation">;</span>oralter table orders drop columns <span class="token keyword">continue</span> checkpoint 1000 data_dictionary <span class="token keyword">:</span> dba_unused_col_tabs<span class="token punctuation">;</span>除将列从表中删除以外，还可以先将列标记为 “未使用”，以后再删除。因为没有删除数据，所以此操作不回收磁盘空间，    因而具有速度比较快的优点。被标为 “未使用” 的列可在以后系统活动较少时从表中删除。     未使用的列就像不属于表一样。查询时看不到未使用列中的数据。此外，在执行 DESCRIBE 命令时，    也不会显示这些列的名称和数据类型。用户可以添加与未使用的列同名的新列。     如果想删除同一表中的两列，则可先将列设置为 “未使用” 然后再删除。在删除两列时，    表中的所有行都会更新两次；但如果将这些列设置为 “未使用” 然后再删除，则所有的行仅更新一次。</code></pre><h2 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h2><pre class=" language-bash"><code class="language-bash">1.创建一个基于函数的索引（creating function-based indexes）create index summit.item_quantity on summit.item<span class="token punctuation">(</span>quantity-quantity_shipped<span class="token punctuation">)</span><span class="token punctuation">;</span>基于函数的索引（function-based indexes）:如果在表中要建立索引的一列或多列上使用了函数或表达式，则创建的是基于函数的索引。基于函数的索引预先计算函数或表达式的值，病将结果存储在索引中。可以将基于函数的索引创建为B树或位图索引。2.创建一个B树索引（create a B-tree index）creae <span class="token punctuation">[</span> unique <span class="token punctuation">]</span> index index_name on table_name <span class="token punctuation">(</span>column,<span class="token punctuation">..</span> asc/desc<span class="token punctuation">)</span> tablespace tablespace_name <span class="token punctuation">[</span> pctfree integer <span class="token punctuation">]</span> <span class="token punctuation">[</span> initrans integer <span class="token punctuation">]</span><span class="token punctuation">[</span> maxtrans integer <span class="token punctuation">]</span><span class="token punctuation">[</span> logging <span class="token operator">|</span> nologging <span class="token punctuation">]</span><span class="token punctuation">[</span> nosort <span class="token punctuation">]</span>storage<span class="token punctuation">(</span>initial 200k next 200k pctincrease 0 maxextents 50<span class="token punctuation">)</span><span class="token punctuation">;</span>B树：平衡二叉树，oracle中用的最多的索引模式，使用与取值唯一性高的情况。只有两层，非叶级、叶级（指针所在级）3.索引中pctfree参数计算公式pctfree<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>maximum number of rows-initial number of rows<span class="token punctuation">)</span>*100/maximum number of rows4.创建一个反向键索引（creating reverse key indexes）create unique index xay_id on xay<span class="token punctuation">(</span>a<span class="token punctuation">)</span> reverse pctfree 30 storage <span class="token punctuation">(</span>initial 200k next 200k pctincrease 0 maxextents 50<span class="token punctuation">)</span> tablespace indx<span class="token punctuation">;</span>5.创建位图索引（creating reverse key indexes）create unique index say_id on xay<span class="token punctuation">(</span>a<span class="token punctuation">)</span> reverse pctfree 30 storage <span class="token punctuation">(</span>initial 200k next 200k pctincrease 0 maxextents 50<span class="token punctuation">)</span> tablespace indx<span class="token punctuation">;</span>在下列情况中，位图索引比 B 树索引更有利：     ?        当表包含数百万行且键列的基数很低（即，该列中重复的值很多）时。例如，对于包含护照记录的表的性别列和婚姻状况列而言，位图索引比 B 树索引更适合     ?        当查询经常使用涉及 OR 运算符的多个 WHERE 条件组合时     ?        当键列上存在只读或很少的更新操作时     （位图索引适用于取值的唯一性很低的情况）6.改变索引的存储参数（change storage parameter of index）alter index xay_id storage <span class="token punctuation">(</span> next 400k maxextents 100 <span class="token punctuation">)</span>7.为索引分配空间（allocating index space）alter index xay_id allocate extent <span class="token punctuation">(</span>size 200k datafile <span class="token string">'c:/oracle/index.dbf'</span><span class="token punctuation">)</span>8. alter index xay_id deallocate unused<span class="token punctuation">;</span>手动分配索引空间：     在表上进行频繁的插入操作前，可能需要向索引添加区。添加区可防止索引动态扩展并导致性能降低。     （其中指定的数据文件一定是索引所在表空间的数据文件）</code></pre><h2 id="约束管理"><a href="#约束管理" class="headerlink" title="约束管理"></a>约束管理</h2><pre class=" language-bash"><code class="language-bash">1.将约束定义为立即（immediate）或延迟（deferred）（define constraints as immediate or deferred）alter session <span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>immediate/deferred/default<span class="token punctuation">;</span><span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span> constraint_name/all immediate/deferred<span class="token punctuation">;</span><span class="token keyword">set</span> constraints 语句用于将特定事务的约束设置为 deferred 或 immediate.可以使用此语句设置约束名称列表或约束的模式。<span class="token keyword">set</span> constraints模式将一直持续到事务处理完成或者另一个set constraints语句重置模式<span class="token keyword">set</span> constraints语句还包含将约束设置为immediate或deferred的子句set constraints.此命令缺省为设置所有（all） 可延迟的约束（不能指定约束名称列表）。alter session <span class="token keyword">set</span> constraints 语句仅适用于当前会话2.删除表或表空间时连带删除其上的外检（约束）drop table table_name cascade constraintsordrop tablespace tablespace_name including contents cascade constraints在删除父表之前，必须先删除外键。可以使用以下一条语句同事执行这两个操作：drop table table_name cascade constraints在未删除或禁用外键之前无法（truncated）父表。在删除包含附表的表空间之前，必须先删除外键。可使用下列命令完成该操作：drop tablespace tablespace_name including contentscascade constraints如果从父表中删除行时没有使用 delete cascade 选项，oracle 服务器必须确保子表中的行不包含相应的外键。同样，仅当子行中不包含旧键值时，才允许更新父键。如果字表的外键上没有索引，则oracle服务器索引子表并禁止更改以确保引用完整性。如果表上有索引，则通过锁定索引项并避免子表上有更具限制性的锁来维护引用完整性。如果必须从不同的事务处理同时更新两个表，则在外键列上创建索引。3.在创建表时定义约束（define constraints <span class="token keyword">while</span> create a table ）create table  xay<span class="token punctuation">(</span>id number<span class="token punctuation">(</span>7<span class="token punctuation">)</span> constraint xay_id pprimary key deferrable using index storage<span class="token punctuation">(</span>initial 100k next 100k <span class="token punctuation">)</span> tablespace indx<span class="token punctuation">)</span><span class="token punctuation">;</span>primary key /unique /references table<span class="token punctuation">(</span>column<span class="token punctuation">)</span> ／check4.启用当前禁用的约束（enable constraints）alter table xay <span class="token function">enable</span> novalidate constraint xay_id<span class="token punctuation">;</span>启用novalidate:对于当前已有索引的 primary key 和 unique 约束，启用novalidate 约束比启用validate约束要快的多，这是应为，如果使用该选项启用约束，则不要求锁定表。这种方法适合表上有许多DML活动的情况，如在oltp环境中。    但是，如果需要创建索引，使用这中启用约束的方法并不能比enable validate带来更多的好处，因为oracle服务器在建立索引时锁定表。5.启用约束（enable constraints）alter table xay <span class="token function">enable</span> validate constraint xay_id<span class="token punctuation">;</span></code></pre><h2 id="约束管理-1"><a href="#约束管理-1" class="headerlink" title="约束管理"></a>约束管理</h2><pre class=" language-bash"><code class="language-bash">1.将约束定义为立即（immediate）或延迟（deferred）（define constraints as immediate or deferred）alter session <span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>immediate/deferred/default<span class="token punctuation">;</span><span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span> constraint_name/all immediate/deferred<span class="token punctuation">;</span><span class="token keyword">set</span> constraints 语句用于将特定事务的约束设置为 deferred 或 immediate.可以使用此语句设置约束名称列表或约束的模式。<span class="token keyword">set</span> constraints模式将一直持续到事务处理完成或者另一个set constraints语句重置模式<span class="token keyword">set</span> constraints语句还包含将约束设置为immediate或deferred的子句set constraints.此命令缺省为设置所有（all） 可延迟的约束（不能指定约束名称列表）。alter session <span class="token keyword">set</span> constraints 语句仅适用于当前会话2.删除表或表空间时连带删除其上的外检（约束）drop table table_name cascade constraintsordrop tablespace tablespace_name including contents cascade constraints在删除父表之前，必须先删除外键。可以使用以下一条语句同事执行这两个操作：drop table table_name cascade constraints在未删除或禁用外键之前无法（truncated）父表。在删除包含附表的表空间之前，必须先删除外键。可使用下列命令完成该操作：drop tablespace tablespace_name including contentscascade constraints如果从父表中删除行时没有使用 delete cascade 选项，oracle 服务器必须确保子表中的行不包含相应的外键。同样，仅当子行中不包含旧键值时，才允许更新父键。如果字表的外键上没有索引，则oracle服务器索引子表并禁止更改以确保引用完整性。如果表上有索引，则通过锁定索引项并避免子表上有更具限制性的锁来维护引用完整性。如果必须从不同的事务处理同时更新两个表，则在外键列上创建索引。3.在创建表时定义约束（define constraints <span class="token keyword">while</span> create a table ）create table  xay<span class="token punctuation">(</span>id number<span class="token punctuation">(</span>7<span class="token punctuation">)</span> constraint xay_id pprimary key deferrable using index storage<span class="token punctuation">(</span>initial 100k next 100k <span class="token punctuation">)</span> tablespace indx<span class="token punctuation">)</span><span class="token punctuation">;</span>primary key /unique /references table<span class="token punctuation">(</span>column<span class="token punctuation">)</span> ／check4.启用当前禁用的约束（enable constraints）alter table xay <span class="token function">enable</span> novalidate constraint xay_id<span class="token punctuation">;</span>启用novalidate:对于当前已有索引的 primary key 和 unique 约束，启用novalidate 约束比启用validate约束要快的多，这是应为，如果使用该选项启用约束，则不要求锁定表。这种方法适合表上有许多DML活动的情况，如在oltp环境中。    但是，如果需要创建索引，使用这中启用约束的方法并不能比enable validate带来更多的好处，因为oracle服务器在建立索引时锁定表。5.启用约束（enable constraints）alter table xay <span class="token function">enable</span> validate constraint xay_id<span class="token punctuation">;</span></code></pre><h2 id="加载（load）数据"><a href="#加载（load）数据" class="headerlink" title="加载（load）数据"></a>加载（load）数据</h2><pre class=" language-bash"><code class="language-bash">1.使用insert语句从另一张表中“直接加载”数据到新表（loading data using direct_load insert）insert //*+append*/into emp nologging<span class="token keyword">select</span> * from emp_old<span class="token punctuation">;</span>2.使用sql*loader加载数据（using sql*loader）sqlldr scott/tiger \control <span class="token operator">=</span> ulcase6.ctl \log <span class="token operator">=</span> ulcase6.log direct <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><h2 id="重整数据"><a href="#重整数据" class="headerlink" title="重整数据"></a>重整数据</h2><pre class=" language-bash"><code class="language-bash">1.使用export导出数据（using export）<span class="token variable">$exp</span> scott/tiger tables<span class="token punctuation">(</span>dept,emp<span class="token punctuation">)</span> file<span class="token operator">=</span>c:\emp.dmp log<span class="token operator">=</span>exp.log compress<span class="token operator">=</span>n direct<span class="token operator">=</span>y2.使用import导入数据（using impport）alter tablespace sales_ts <span class="token function">read</span> only<span class="token punctuation">;</span><span class="token variable">$expp</span> sys/<span class="token punctuation">..</span>  file<span class="token operator">=</span>xay.dmp transpport_tablespace<span class="token operator">=</span>y tablespace<span class="token operator">=</span>sales_ts triggers<span class="token operator">=</span>n constraints<span class="token operator">=</span>n<span class="token variable">$copy</span> datafile<span class="token variable">$imp</span> sys/<span class="token punctuation">..</span> file<span class="token operator">=</span>xay.dmp transpport_tablespppace<span class="token operator">=</span>y datafiles<span class="token operator">=</span><span class="token punctuation">(</span>/disk/sles01.dbf,/disk2/sles02.dbf<span class="token punctuation">)</span>alter tablespace sales_ts <span class="token function">read</span> <span class="token function">write</span><span class="token punctuation">;</span>4.checking transport <span class="token keyword">set</span>DNMS_tts.transport_set_check<span class="token punctuation">(</span>ts_list <span class="token operator">=</span><span class="token operator">></span><span class="token string">'sales_ts'</span> <span class="token punctuation">..</span>,incl_constraints<span class="token operator">=</span><span class="token operator">></span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>在表transport_set_violations中查看dbms_tts.isselfcontained 为true 是，表示自包含</code></pre><h2 id="管理口令及相关资源"><a href="#管理口令及相关资源" class="headerlink" title="管理口令及相关资源"></a>管理口令及相关资源</h2><pre class=" language-bash"><code class="language-bash">1.修改用户账号、解锁及口令（controlling account lock and password）alter user jumcky identified by oracle account unlock<span class="token punctuation">;</span>2.user_privided password <span class="token keyword">function</span>function_name<span class="token punctuation">(</span>userid <span class="token keyword">in</span> varchar2<span class="token punctuation">(</span>30<span class="token punctuation">)</span>,password <span class="token keyword">in</span> varchar2<span class="token punctuation">(</span>30<span class="token punctuation">)</span>,old_password <span class="token keyword">in</span> varchar2<span class="token punctuation">(</span>30<span class="token punctuation">))</span> <span class="token keyword">return</span> boolean3.创建概要文件：设置口令参数（create a profile <span class="token keyword">:</span> password setting）create profile grace_5 limit failed_login_attempts 3password_lock_time unlimited password_life_time 30password_reuse_time 30 password_verify_function verify_functionpassword_grace_time 5<span class="token punctuation">;</span>4.修改概要文件（altering a profile）alter profile default limitfailed_lofin_attemppts 3password_life_time 60<span class="token punctuation">;</span>5.删除概要文件（drop a profile）drop profile grace_5 <span class="token punctuation">[</span>cascade<span class="token punctuation">]</span><span class="token punctuation">;</span>6.创建概要文件：设置资源限制（create a profile <span class="token keyword">:</span> resource limit）create profile developer_prof limit sessions_per_user 2cpu_per_session 10000 idle_time 60 connect_time 480<span class="token punctuation">;</span>7.view <span class="token operator">=</span><span class="token operator">></span>resource_cost <span class="token keyword">:</span> alter resource cost dba_users,dba_profiles8.允许资源限制（enable resource limits）alter system <span class="token keyword">set</span> resource_limit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><pre class=" language-bash"><code class="language-bash">1.创建用户（数据库认真方式）（create a user <span class="token keyword">:</span> database authentication）create user juncky identified by oracle default tablespace <span class="token function">users</span> temporary tablespace temp <span class="token function">quota</span> 10m/unlimited on data password  expire <span class="token punctuation">[</span> account  lock <span class="token operator">|</span> unock <span class="token punctuation">]</span> <span class="token punctuation">[</span> profile profilename <span class="token operator">|</span> default <span class="token punctuation">]</span><span class="token punctuation">;</span>2.修改用户的表空间限额（change user <span class="token function">quota</span> on tablespace）alter user juncky <span class="token function">quota</span> 0 on <span class="token function">users</span><span class="token punctuation">;</span>3.删除用户（drop  a user ）drop user juncky <span class="token punctuation">[</span> cascade <span class="token punctuation">]</span><span class="token punctuation">;</span>4.监控用户的视图（monitor user）view：dba_users, dba_ts_quotas</code></pre><h2 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h2><pre class=" language-bash"><code class="language-bash">1.系统权限（managing privileges）view <span class="token operator">=</span><span class="token operator">></span>system_privilege_map ,dba_sys_privs,session_privs2.授权系统权限（grant system privilege）grant create session,create table to managers<span class="token punctuation">;</span>orgrant create sessionto scott with admin option<span class="token punctuation">;</span>with admin option can gran grant or revoke privilege from any user or role<span class="token punctuation">;</span>3.sysdba和sysoper的权限（sysdba and sysoper privileges:）sysoper:startup,shtdown,alter database <span class="token function">open</span> <span class="token operator">|</span> mount,alter database backup controlfile,alter tablespacesysdba:sysoper privileges with admin option,create database,recover database <span class="token keyword">until</span>4.口令文件成员视图（password <span class="token function">file</span> members:）view:<span class="token operator">=</span>v<span class="token variable">$pwfile_users</span>5.07_dictionary_accessibility <span class="token operator">=</span> <span class="token boolean">true</span>restriction access to view or tables <span class="token keyword">in</span> other schema6.撤销系统权限（revoke system privilege）revoke create table from karen<span class="token punctuation">;</span>orrevoke create session from scott<span class="token punctuation">;</span>7.授权对象权限（grant object privilege）grant execute on dbms_pipe to public<span class="token punctuation">;</span>grant update<span class="token punctuation">(</span>first_name,salary<span class="token punctuation">)</span> on employee to karen with grant option<span class="token punctuation">;</span>8.显示对象权限的视图（display object privilege）view <span class="token operator">=</span><span class="token operator">></span>dba_tab_privs,dba_col_privs9.撤销用户的对象权限（revoke object privilege）revoke execute on dbms_pipe from scott <span class="token punctuation">[</span> cascade constraints <span class="token punctuation">]</span><span class="token punctuation">;</span>10.审计记录视图（audit record view）sys.aud$11.保护审计线索（protecting the audit trail）audit delete on sys.aud$ by access<span class="token punctuation">;</span>保护审计线索：应保护审计线索，以防添加，修改或删除审计信息。发布以下，命令：audit delete on sys.aud$ by access<span class="token punctuation">;</span>可防止审计线索未经授权即被删除<span class="token punctuation">;</span>只有DBA才拥有delete_catalog_role角色12.语句审计（statement auditing）audit user<span class="token punctuation">;</span>13.权限审计（privilege auditing）audit <span class="token keyword">select</span> any table by summit by access<span class="token punctuation">;</span>权限审计：该种审计执行操作应具有的相应系统权限进行选择性审计，如audit create any trigger. 可以设置权限审计对数据库中的所选用户或每个用户进行审计。14.方案对象审计（schema object auditing）sudit lock on summit.employee by access whenever successful<span class="token punctuation">;</span>方案对象审计：该种审计对待特定方案对象上的特定语句进行选择性审计，如 audit <span class="token keyword">select</span> on  hr.employees.方案对象审计始终适用于所有数据库用户。15.审计选项视图（view audit option）view <span class="token operator">=</span><span class="token operator">></span>all_def_audit_opts,dba_stmt_audit_opts,dba_priv_audit_opts,dba_obj_audit_opts16.设计结果视图（view audit result）view<span class="token operator">=</span><span class="token operator">></span>dba_audit_trail,dba_audit_exists,dba_audit_object,dba_audit_session,dba_audit_statement</code></pre><h2 id="管理角色"><a href="#管理角色" class="headerlink" title="管理角色"></a>管理角色</h2><pre class=" language-bash"><code class="language-bash">1.创建角色（create roles）create role sales_clerk<span class="token punctuation">;</span>orcreate role hr_clerk identified by bonus<span class="token punctuation">;</span>orcreate role hr_manager identified externally<span class="token punctuation">;</span>2.修改角色（modify role）alter role sales_clerk identified by commission<span class="token punctuation">;</span>oralter role hr_clerk identified externally<span class="token punctuation">;</span>oralter role hr_manager not identified<span class="token punctuation">;</span>3.分配角色（assigning roles）grant sales_clerk to scott<span class="token punctuation">;</span>oegrant hr_clerk to hr_manager<span class="token punctuation">;</span>orgrant hr_manager to scott with admin option<span class="token punctuation">;</span>4.建立缺省角色（establish default role）alter user scott default role hr_clerk,sales_clerk<span class="token punctuation">;</span>oralter user scott default role all<span class="token punctuation">;</span>oralter user scott default fole all except hr_clerk<span class="token punctuation">;</span>oralter user scott default role none<span class="token punctuation">;</span>5.允许和禁止角色（enable and disable roles）<span class="token keyword">set</span> role hr_clerk<span class="token punctuation">;</span>or<span class="token keyword">set</span> role sales_clerk identified by commission<span class="token punctuation">;</span>or<span class="token keyword">set</span> role all except sales_clerk<span class="token punctuation">;</span>or<span class="token keyword">set</span> role none<span class="token punctuation">;</span>6.撤销用户的角色（remove role from user）revoke sales_clerk from scott<span class="token punctuation">;</span>orrevoke hr_manager from public <span class="token punctuation">;</span>7.删除角色（remove role）drop role hr_manager<span class="token punctuation">;</span>8.显示角色信息的视图（display role information）view:<span class="token operator">=</span><span class="token operator">></span>dba_roles.dba_role_privs,role_role_privs,dba_sys_privs,role_sys_privs,role_tab_privs,session_roles</code></pre><h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><pre class=" language-bash"><code class="language-bash">1.备份恢复用相关视图<span class="token function">v</span><span class="token variable">$sga</span>,v<span class="token variable">$instance</span>,v<span class="token variable">$process</span>,v<span class="token variable">$bgprocess</span>,v<span class="token variable">$database</span>,v<span class="token variable">$datafile</span>,v<span class="token variable">$sgastat</span>2.为rman设置初始化参数rman need <span class="token keyword">set</span> dbwr_io_slaves or backup_tape_io_slaves and large_pool_size3.监控并行回滚的视图（monitoring parallel rollback）<span class="token function">v</span><span class="token variable">$fast_start_servers</span>,v<span class="token variable">$fast_start_transactions</span>4.执行一个冷备份（perform a closed database baskup <span class="token punctuation">(</span> noarchivelog <span class="token punctuation">)</span>）<span class="token function">shutdown</span> immediate<span class="token function">cp</span> files /backup/startup5.改变数据库文件的位置（restore to a different location）connect system/manager as sysdbastartupp <span class="token function">mount</span>alter database <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'/disk1/../user.dbf'</span> to <span class="token string">'/disk/../user.dbf'</span><span class="token punctuation">;</span>6.恢复命令（recover）语法（recover syntax）--recover a mounted databaserecover database<span class="token punctuation">;</span>recover datafile <span class="token string">'/disk1/data/df2.dbf'</span><span class="token punctuation">;</span>alter database recover database<span class="token punctuation">;</span>--recover an opened databaserecover tablespace user_data<span class="token punctuation">;</span>recover datafile 2<span class="token punctuation">;</span>alter database recover datafile 2<span class="token punctuation">;</span>7.设置自动应用重做日志文件（how to apply redo log files automatically）<span class="token keyword">set</span> autorecovery onrecover automatic datafile 4<span class="token punctuation">;</span>8.完全恢复（complete recovery）--method 1 <span class="token punctuation">(</span> mounted databe <span class="token punctuation">)</span>copy c:\backup\user.dbf  c:\oradata\user.dbfstartup <span class="token function">mount</span>recover datafile <span class="token string">'c:\oradata\user.dbf'</span><span class="token punctuation">;</span>alter database oppen<span class="token punctuation">;</span>--mothod 2 <span class="token punctuation">(</span> opened database,initially opened, not system or rollback datafile<span class="token punctuation">)</span>copy c:\backup\user.dbf  c:\oradata\user.dbf <span class="token punctuation">(</span> alter tablespace offline<span class="token punctuation">)</span>recover datafile <span class="token string">'c:\oradata\user.dbf'</span> orrecover tablespace user_data<span class="token punctuation">;</span>alter database datafile <span class="token string">'c:\oradata\user.dbf'</span> online or alter tablespace user_data online<span class="token punctuation">;</span>--method 3 <span class="token punctuation">(</span> opened database,initially closed not system or rollback datafile <span class="token punctuation">)</span>startup <span class="token function">mount</span>alter database datafile <span class="token string">'c:\oradata\user.dbf'</span> offline<span class="token punctuation">;</span>alter database <span class="token function">open</span>copy c:\backup\user.dbf  d:\oradata\user.dbfalter database <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'c:\oradata\user.dbf'</span> to <span class="token string">'d:\oradata\user.dbf'</span>recover datafile <span class="token string">'e:\oradata\user.dbf'</span> or recover tablespace user_data<span class="token punctuation">;</span>alter tablespace user_data online<span class="token punctuation">;</span>--method 4 <span class="token punctuation">(</span> loss of data <span class="token function">file</span> with no backup and have all archive log <span class="token punctuation">)</span>alter tablespace user_data offline immediate<span class="token punctuation">;</span>alter database create datafile <span class="token string">'d:\oradata\user.dbf'</span> as  <span class="token string">'c:\oradata\user.dbf'</span>recover tablespace user_data<span class="token punctuation">;</span>alter tablespace user_data online9.对一个打开的数据库进行备份（perform an <span class="token function">open</span> database backup）alter tablespace user_data begin backup<span class="token punctuation">;</span>copy files /backup/alter database datafile <span class="token string">'/c:/../data.dbf'</span> end backup<span class="token punctuation">;</span>alter system switch logfile<span class="token punctuation">;</span>10.备份一个控制文件（backup a control file）alter database backup controlfile to <span class="token string">'controll.bkp'</span><span class="token punctuation">;</span>alter database backup xontrolfile to trace<span class="token punctuation">;</span>11.非归档模式下的恢复（recovery （noarchivelog mode））<span class="token function">shutdown</span> abort<span class="token function">cp</span> filesstartup12.备份模式下的文件恢复（recovery of <span class="token function">file</span> <span class="token keyword">in</span> backup mode）alter database datafile 2 end backup<span class="token punctuation">;</span>13.清空重做日志文件（rclearing redo log file）alter database <span class="token function">clear</span> unarchived logfile group 1<span class="token punctuation">;</span>alter database <span class="token function">clear</span> unarchived logfile group 1 unrecoverable datafile<span class="token punctuation">;</span>14.重做日志的恢复（删除与重建）（redo log recovery）alter database add logfile group 3 <span class="token string">'c:\oradata\redo03.log'</span> size 1000k<span class="token punctuation">;</span>alter database drop logfile group 1<span class="token punctuation">;</span>alter database <span class="token function">open</span><span class="token punctuation">;</span>or <span class="token operator">></span>cpp c:\oradata\redo02.log ,c:\oradata\redo01.logalter database <span class="token function">clear</span> logfile ‘c:\oradata\log01.log’<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> orcale </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http响应码</title>
      <link href="/2019/01/02/http-xiang-ying-ma/"/>
      <url>/2019/01/02/http-xiang-ying-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Http请求"><a href="#1-Http请求" class="headerlink" title="1.Http请求"></a>1.Http请求</h2><p>&emsp;浏览器 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 先看本地电脑是否存在百度服务器的IP，如果存在直接 发送请求报文，如果不存在,则会先请求 DNS服务器，通过映射关系找到 百度 服务器的 IP地址返回给浏览器，浏览器保存IP ，并通过流的方式向 百度服务器 发送 转化为byte[]的请求报文。</p><h2 id="2-TTP协议响应码"><a href="#2-TTP协议响应码" class="headerlink" title="2.TTP协议响应码"></a>2.TTP协议响应码<br></h2><p>&emsp;    “200” : OK <br><br>&emsp;    “302” : Found 重定向<br><br>&emsp;    “400” : Bad Request 错误请求,发出错误的不符合Http协议的请求<br><br>&emsp;    “403” : Forbidden 禁止<br><br>&emsp;    “404” : Not Found 未找到<br><br>&emsp;    “500” : Internal Server Error 服务器内部错误。<br><br>&emsp;    “503” : Service U navailable 一般是访问人数过多<br></p><ul><li>200段是成功；300段需要对请求做进一步处理；400段表示客户端请求错误；500段是服务器错误。</li></ul><h3 id="HTTP-常用ContentType"><a href="#HTTP-常用ContentType" class="headerlink" title="HTTP 常用ContentType"></a>HTTP 常用ContentType<br></h3><pre><code>type/html(默认是这个); image/gif;  image/jpeg; text/plain（普通文本）</code></pre><h3 id="http其他-（是无状态的）"><a href="#http其他-（是无状态的）" class="headerlink" title="http其他 （是无状态的）"></a>http其他 （是无状态的）<br></h3><p>http不会记得”上个请求是什么”，所以哪怕是同一个页面中的JS/CSS/JPG也都需要重复提交。</p><p>网页中如果有图片，CSS,JS等外部文件的话，这些请求都会在一个单独请求中,也就是说并不是页面的所有内容都在一个请求中完成,而是每个资源都是一个单独请求。</p><h2 id="3-服务器端"><a href="#3-服务器端" class="headerlink" title="3.服务器端"></a>3.服务器端</h2><p>&emsp;服务器端 分 内核模式 和用户模式 ， 内核模式为windows底层的一些东西内核模式(Kernel Model)中的 HTTP.SYS(无法看到，他实现了一个插件的机制，自己不处理程序，只负责接收请求，只负责接收请求，让其他exe等程序处理)监听80端口(监听的socket)，识别请求的协议：一般为HTTP，识别请求的端口,把请求发送给具体的应用程序(IIS安装后就在注册表里注册了)。<br>这时候还会再创建一个新的端口 来负责和请求的客户端通信(称为代理Socket或通信Socket)</p><ol><li>w3svc服务(托管)和 inetInfo.exe进程 和起来就是IIS<br>请求通过HTTP.SYS 交给 w3svc服务(svchost.exe),来查看INETINFO.exe<br>访问 IIS进程中的元数据(包含扩展注册信息) 查下请求后缀的文件应如何处理，</li></ol><p>如果是静态网页(.htm,.html等)会先通过内核模块再通过通信端口发送回去。</p><p>&emsp;如果是动态网页（.aspx）会交给扩展 aspnet_isapi.dll(非托管的代码写的,非托管和托管代码的桥梁)处理，然后aspnet_isapi会负责启动ApplicationDomain，请求交给（通过windows系统的句柄，句柄是操作系统的一些标识符） ISApiRuntime，在ISapiRuntime内部，通过ecb指针创建了一个HttpWorkRequest对象（就是简单的对报文的一个封装）然后将HttpWorkRequest对象 交给HttpRunTime PR方法，在PR方法内部又将HttpWorkRequest对象封装成了HttpContext(也就是把请求报文封装成了Request对象和Response对象)再通过HttpApplicationFactory创建一个具体的Application实例<br>然后请求随着 Application管道一次一次的流，在管道里面有19个公开的事件(共23)，请求留到Application的PR方法的时候，帮我们一次性的把19个事件都调用了，二者19个事件又允许我们开发人员自己注册响应方法，可以过滤响应报文(对报文的处理)第8个事件时会根据HttpContext中的RequestURL(请求的地址)会创建最终处理当前请求的Handler实例<br>在11个事件和12个事件之间会调用创建的Handler实例的PR方法</p><p>ISAPIRuntime.PR()通过ECB创建HttpWorkRequest对象，将请求报文放到其中</p><p>Http.Runtime.PR()创建HttpContext对象(包含HttpRequest对象和HttpResponse对象，分析浏览器的请求报文,然后将请求报文的数据存入HttpContext里的Resquest属性中)<br>HttpApplicationFactory 获取一个HttpApplication实例<br>HttpApplication执行管道23个事件,19个事公开给开发人员的(插件机制) ，负责创建和执行页面</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asp.Net页面生命周期</title>
      <link href="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/"/>
      <url>/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Asp-Net页面生命周期"><a href="#Asp-Net页面生命周期" class="headerlink" title="Asp.Net页面生命周期"></a>Asp.Net页面生命周期</h1><h2 id="1-什么是Asp-Net页面生命周期"><a href="#1-什么是Asp-Net页面生命周期" class="headerlink" title="1.什么是Asp.Net页面生命周期"></a>1.什么是Asp.Net页面生命周期</h2><p>&emsp; 当我们在浏览器地址栏中输入网址，回车查看页面时，这时会向服务器端（IIS）发送一个request请求，服务器就会判断发送过来的请求页面，  完全识别 HTTP 页面处理程序类后，ASP.NET 运行时将调用处理程序的 ProcessRequest 方法来处理请求，来创建页面对象。通常情况下，无需更改此方法的实现，因为它是由 Page 类提供的。接下来被创建页面对象的ProcessRequest方法使页面经历了各个阶段：初始化、加载视图状态信息和回发数据、加载页面的用户代码以及执行回发服务器端事件。之后，页面进入显示模式：收集更新的视图状态，生成 HTML 代码并随后将代码发送到输出控制台。最后，卸载页面，并认为请求处理完毕。其中页面对象ProcessRequest方法 完成的这一系列事件的处理过程就是Asp.Net页面生命周期。</p><h2 id="2-了解Asp-Net页面生命周期的好处"><a href="#2-了解Asp-Net页面生命周期的好处" class="headerlink" title="2.了解Asp.Net页面生命周期的好处"></a>2.了解Asp.Net页面生命周期的好处</h2><p>&emsp;  了解个掌握ASP.NET页面生命周期是非常必要的，这有助于我们更加灵活的控制页面，以我们需要的方式编程开发。ASP.NET页运行时，此页会经历一个又一个的事件链，每个事件链中执行不同的行为，这所有的行为共同组成我们所需要的页面。了解了生命周期也更有助于我们对程序调试中发生问题的地方的定位。</p><h2 id="3-Asp-Net页面生命周期简化版流程"><a href="#3-Asp-Net页面生命周期简化版流程" class="headerlink" title="3.Asp.Net页面生命周期简化版流程"></a>3.Asp.Net页面生命周期简化版流程</h2><p>页面初始化          Page_Init<br>加载View State      LoadViewState<br>回发数据处理      LoadPostData<br>页面加载          Page_Load<br>回发通知          RaisePostDataChangedEvent<br>回发事件处理     RaisePostBackEvent<br>页面预渲染       Page_PreRender<br>保存             viewstate SaveViewState<br>Page渲染         Page_Render<br>Page 卸载       Page_UnLoad<br>&emsp;要是详细写太多了也不好理解，简化版看图：<br><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/4.jpg" alt=""></p><h2 id="4-什么地方用到了Asp-Net-页面生命周期"><a href="#4-什么地方用到了Asp-Net-页面生命周期" class="headerlink" title="4.什么地方用到了Asp.Net 页面生命周期"></a>4.什么地方用到了Asp.Net 页面生命周期</h2><p>1  第一张图片从全局说明从客户端发出一个Request请求，服务器windows内核中的HTTP.SYS组件接收该请求开始到IIS处理完该请求并响应到客户端结束。<br><br>2  第二张图片为图1中Http处理管线的详细步骤<br><br>3  第三张图片为图2Http处理管线中调用处理程序(HttpHandler,  此处为Page对象)的详细生命周期过程。</p><p><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/1.jpg" alt="图1"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/2.png" alt="图2"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/3.png" alt="图3"></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH整合之Login</title>
      <link href="/2018/12/25/ssh-zheng-he-zhi-login/"/>
      <url>/2018/12/25/ssh-zheng-he-zhi-login/</url>
      
        <content type="html"><![CDATA[<h2 id="三大框架架构-整合原理"><a href="#三大框架架构-整合原理" class="headerlink" title="三大框架架构(整合原理)"></a>三大框架架构(整合原理)</h2><p> <img src="/2018/12/25/ssh-zheng-he-zhi-login/1.jpg" alt="图1"><br> <img src="/2018/12/25/ssh-zheng-he-zhi-login/2.jpg" alt="图2"></p><h2 id="spring容器"><a href="#spring容器" class="headerlink" title="spring容器"></a>spring容器</h2><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>        xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>         xmlns:context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>        xmlns:aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>         xmlns:tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>        xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd                             http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd                             http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd                             http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd "</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 读取db.properties文件 --<span class="token operator">></span>    <span class="token operator">&lt;</span>context:property-placeholder location<span class="token operator">=</span><span class="token string">"classpath:db.properties"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置c3p0连接池 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"dataSource"</span> class<span class="token operator">=</span><span class="token string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"jdbcUrl"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.jdbcUrl}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClass"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.driverClass}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.user}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"<span class="token variable">${jdbc.password}</span>"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 核心事务管理器 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"transactionManager"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.orm.hibernate5.HibernateTransactionManager"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置通知 --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>tx:advice id<span class="token operator">=</span><span class="token string">"txAdvice"</span> transaction-manager<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>tx:attributes<span class="token operator">></span>            <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"save*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"persist*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"update*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"modify*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"delete*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"remove*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"false"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"get*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>tx:method name<span class="token operator">=</span><span class="token string">"find*"</span> isolation<span class="token operator">=</span><span class="token string">"REPEATABLE_READ"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read-only<span class="token operator">=</span><span class="token string">"true"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>/tx:attributes<span class="token operator">></span>    <span class="token operator">&lt;</span>/tx:advice<span class="token operator">></span> --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置将通知织入目标对象    配置切点    配置切面 --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>aop:config<span class="token operator">></span>        <span class="token operator">&lt;</span>aop:pointcut expression<span class="token operator">=</span><span class="token string">"execution(* cn.itcast.service.impl.*ServiceImpl.*(..))"</span> id<span class="token operator">=</span><span class="token string">"txPc"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>aop:advisor advice-ref<span class="token operator">=</span><span class="token string">"txAdvice"</span> pointcut-ref<span class="token operator">=</span><span class="token string">"txPc"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/aop:config<span class="token operator">></span> --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 开启注解事务 --<span class="token operator">></span>    <span class="token operator">&lt;</span>tx:annotation-driven transaction-manager<span class="token operator">=</span><span class="token string">"transactionManager"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 将SessionFactory配置到spring容器中 --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 加载配置方案1:仍然使用外部的hibernate.cfg.xml配置信息 --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"configLocation"</span> value<span class="token operator">=</span><span class="token string">"classpath:hibernate.cfg.xml"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span> --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 加载配置方案2:在spring配置中放置hibernate配置信息 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> class<span class="token operator">=</span><span class="token string">"org.springframework.orm.hibernate5.LocalSessionFactoryBean"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 将连接池注入到sessionFactory, hibernate会通过连接池获得连接 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置hibernate基本信息 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernateProperties"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>props<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span>--  必选配置 --<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>--     <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.connection.driver_class"</span> <span class="token operator">></span>com.mysql.jdbc.Driver<span class="token operator">&lt;</span>/prop<span class="token operator">></span>                <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.connection.url"</span> <span class="token operator">></span>jdbc:mysql:///crm_32<span class="token operator">&lt;</span>/prop<span class="token operator">></span>                <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.connection.username"</span> <span class="token operator">></span>root<span class="token operator">&lt;</span>/prop<span class="token operator">></span>                <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.connection.password"</span> <span class="token operator">></span>1234<span class="token operator">&lt;</span>/prop<span class="token operator">></span> --<span class="token operator">></span>                <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.dialect"</span> <span class="token operator">></span>org.hibernate.dialect.MySQLDialect<span class="token operator">&lt;</span>/prop<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">!</span>--  可选配置 --<span class="token operator">></span>                <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.show_sql"</span> <span class="token operator">></span>true<span class="token operator">&lt;</span>/prop<span class="token operator">></span>                <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.format_sql"</span> <span class="token operator">></span>true<span class="token operator">&lt;</span>/prop<span class="token operator">></span>                <span class="token operator">&lt;</span>prop key<span class="token operator">=</span><span class="token string">"hibernate.hbm2ddl.auto"</span> <span class="token operator">></span>update<span class="token operator">&lt;</span>/prop<span class="token operator">></span>            <span class="token operator">&lt;</span>/props<span class="token operator">></span>        <span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 引入orm元数据,指定orm元数据所在的包路径,spring会自动读取包中的所有配置 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"mappingDirectoryLocations"</span> value<span class="token operator">=</span><span class="token string">"classpath:cn/itcast/domain"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- action --<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 注意:Action对象作用范围一定是多例的.这样才符合struts2架构 --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"userAction"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.web.action.UserAction"</span> scope<span class="token operator">=</span><span class="token string">"prototype"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"userService"</span> ref<span class="token operator">=</span><span class="token string">"userService"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token function">service</span> --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"userService"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.service.impl.UserServiceImpl"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"ud"</span> ref<span class="token operator">=</span><span class="token string">"userDao"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- dao --<span class="token operator">></span>    <span class="token operator">&lt;</span>bean name<span class="token operator">=</span><span class="token string">"userDao"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.dao.impl.UserDaoImpl"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 注入sessionFactory --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"sessionFactory"</span> ref<span class="token operator">=</span><span class="token string">"sessionFactory"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/bean<span class="token operator">></span><span class="token operator">&lt;</span>/beans<span class="token operator">></span></code></pre><h2 id="struts-xml"><a href="#struts-xml" class="headerlink" title="struts.xml"></a>struts.xml</h2><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE struts PUBLIC    <span class="token string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span>    <span class="token string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>struts<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token comment" spellcheck="true">#  struts.objectFactory = spring    将action的创建交给spring容器    </span>            struts.objectFactory.spring.autoWire <span class="token operator">=</span> name spring负责装配Action依赖属性            --<span class="token operator">></span>    <span class="token operator">&lt;</span>constant name<span class="token operator">=</span><span class="token string">"struts.objectFactory"</span> value<span class="token operator">=</span><span class="token string">"spring"</span><span class="token operator">></span><span class="token operator">&lt;</span>/constant<span class="token operator">></span>    <span class="token operator">&lt;</span>package name<span class="token operator">=</span><span class="token string">"crm"</span> namespace<span class="token operator">=</span><span class="token string">"/"</span> extends<span class="token operator">=</span><span class="token string">"struts-default"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>global-exception-mappings<span class="token operator">></span>            <span class="token operator">&lt;</span>exception-mapping result<span class="token operator">=</span><span class="token string">"error"</span> exception<span class="token operator">=</span><span class="token string">"java.lang.RuntimeException"</span><span class="token operator">></span><span class="token operator">&lt;</span>/exception-mapping<span class="token operator">></span>        <span class="token operator">&lt;</span>/global-exception-mappings<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 整合方案1:class属性上仍然配置action的完整类名                struts2仍然创建action,由spring负责组装Action中的依赖属性         --<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>--              整合方案2:class属性上填写spring中action对象的BeanName                 完全由spring管理action生命周期,包括Action的创建                 注意:需要手动组装依赖属性          --<span class="token operator">></span>        <span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"UserAction_*"</span> class<span class="token operator">=</span><span class="token string">"userAction"</span> method<span class="token operator">=</span><span class="token string">"{1}"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"toHome"</span> type<span class="token operator">=</span><span class="token string">"redirect"</span> <span class="token operator">></span>/index.htm<span class="token operator">&lt;</span>/result<span class="token operator">></span>            <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"error"</span> <span class="token operator">></span>/login.jsp<span class="token operator">&lt;</span>/result<span class="token operator">></span>        <span class="token operator">&lt;</span>/action<span class="token operator">></span>    <span class="token operator">&lt;</span>/package<span class="token operator">></span><span class="token operator">&lt;</span>/struts<span class="token operator">></span></code></pre><h2 id="db-properties-配置文件"><a href="#db-properties-配置文件" class="headerlink" title="db.properties 配置文件"></a>db.properties 配置文件</h2><pre class=" language-bash"><code class="language-bash"> jdbc.jdbcUrl<span class="token operator">=</span>jdbc:mysql:///crm_32jdbc.driverClass<span class="token operator">=</span>com.mysql.jdbc.Driverjdbc.user<span class="token operator">=</span>rootjdbc.password<span class="token operator">=</span>1234</code></pre><h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>web-app xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">=</span><span class="token string">"http://java.sun.com/xml/ns/javaee"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> id<span class="token operator">=</span><span class="token string">"WebApp_ID"</span> version<span class="token operator">=</span><span class="token string">"2.5"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>display-name<span class="token operator">></span>ssh_crm<span class="token operator">&lt;</span>/display-name<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>-- 让spring随web启动而创建的监听器 --<span class="token operator">></span>  <span class="token operator">&lt;</span>listener<span class="token operator">></span>      <span class="token operator">&lt;</span>listener-class<span class="token operator">></span>org.springframework.web.context.ContextLoaderListener<span class="token operator">&lt;</span>/listener-class<span class="token operator">></span>  <span class="token operator">&lt;</span>/listener<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置spring配置文件位置参数 --<span class="token operator">></span>  <span class="token operator">&lt;</span>context-param<span class="token operator">></span>      <span class="token operator">&lt;</span>param-name<span class="token operator">></span>contextConfigLocation<span class="token operator">&lt;</span>/param-name<span class="token operator">></span>      <span class="token operator">&lt;</span>param-value<span class="token operator">></span>classpath:applicationContext.xml<span class="token operator">&lt;</span>/param-value<span class="token operator">></span>  <span class="token operator">&lt;</span>/context-param<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>-- 扩大session作用范围      注意: 任何filter一定要在struts的filter之前调用   --<span class="token operator">></span>   <span class="token operator">&lt;</span>filter<span class="token operator">></span>      <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>openSessionInView<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>      <span class="token operator">&lt;</span>filter-class<span class="token operator">></span>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter<span class="token operator">&lt;</span>/filter-class<span class="token operator">></span>  <span class="token operator">&lt;</span>/filter<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>-- struts2核心过滤器 --<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">></span>      <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>struts2<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>      <span class="token operator">&lt;</span>filter-class<span class="token operator">></span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="token operator">&lt;</span>/filter-class<span class="token operator">></span>  <span class="token operator">&lt;</span>/filter<span class="token operator">></span>  <span class="token operator">&lt;</span>filter-mapping<span class="token operator">></span>      <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>openSessionInView<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>      <span class="token operator">&lt;</span>url-pattern<span class="token operator">></span>/*<span class="token operator">&lt;</span>/url-pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>/filter-mapping<span class="token operator">></span>  <span class="token operator">&lt;</span>filter-mapping<span class="token operator">></span>      <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>struts2<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>      <span class="token operator">&lt;</span>url-pattern<span class="token operator">></span>/*<span class="token operator">&lt;</span>/url-pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>/filter-mapping<span class="token operator">></span>  <span class="token operator">&lt;</span>welcome-file-list<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>index.html<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>index.htm<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>index.jsp<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>default.html<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>default.htm<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>default.jsp<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>  <span class="token operator">&lt;</span>/welcome-file-list<span class="token operator">></span><span class="token operator">&lt;</span>/web-app<span class="token operator">></span></code></pre><h2 id="UserDao-接口"><a href="#UserDao-接口" class="headerlink" title="UserDao 接口"></a>UserDao 接口</h2><pre class=" language-bash"><code class="language-bash">public interface UserDao <span class="token punctuation">{</span>    //根据登陆名称查询user对象    User getByUserCode<span class="token punctuation">(</span>String usercode<span class="token punctuation">)</span><span class="token punctuation">;</span>    //保存用户    void save<span class="token punctuation">(</span>User u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="UserDaoImpl"><a href="#UserDaoImpl" class="headerlink" title="UserDaoImpl"></a>UserDaoImpl</h2><pre class=" language-bash"><code class="language-bash">public class UserDaoImpl extends HibernateDaoSupport implements UserDao <span class="token punctuation">{</span>    @Override    public User getByUserCode<span class="token punctuation">(</span>final String usercode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        //HQL        <span class="token keyword">return</span> getHibernateTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.execute<span class="token punctuation">(</span>new HibernateCallback<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            @Override            public User doInHibernate<span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> throws HibernateException <span class="token punctuation">{</span>                    String hql <span class="token operator">=</span> <span class="token string">"from User where user_code = ? "</span><span class="token punctuation">;</span>                    Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql<span class="token punctuation">)</span><span class="token punctuation">;</span>                    query.setParameter<span class="token punctuation">(</span>0, usercode<span class="token punctuation">)</span><span class="token punctuation">;</span>                    User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> query.uniqueResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> user<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //Criteria        /*DetachedCriteria <span class="token function">dc</span> <span class="token operator">=</span> DetachedCriteria.forClass<span class="token punctuation">(</span>User.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        dc.add<span class="token punctuation">(</span>Restrictions.eq<span class="token punctuation">(</span><span class="token string">"user_code"</span>, usercode<span class="token punctuation">))</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">)</span> getHibernateTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.findByCriteria<span class="token punctuation">(</span>dc<span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>list <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> list.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>0<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> list.get<span class="token punctuation">(</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>else<span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>*/    <span class="token punctuation">}</span>    @Override    public void save<span class="token punctuation">(</span>User u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        getHibernateTemplate<span class="token punctuation">(</span><span class="token punctuation">)</span>.save<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="UserService-接口"><a href="#UserService-接口" class="headerlink" title="UserService 接口"></a>UserService 接口</h2><pre class=" language-bash"><code class="language-bash">public interface UserService <span class="token punctuation">{</span>    //登陆方法    User    getUserByCodePassword<span class="token punctuation">(</span>User u<span class="token punctuation">)</span><span class="token punctuation">;</span>    //注册用户    void saveUser<span class="token punctuation">(</span>User u<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h2><pre class=" language-bash"><code class="language-bash">package cn.itcast.service.impl<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.annotation.Isolation<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.annotation.Propagation<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.transaction.annotation.Transactional<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.dao.UserDao<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.domain.User<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.service.UserService<span class="token punctuation">;</span>@Transactional<span class="token punctuation">(</span>isolation<span class="token operator">=</span>Isolation.REPEATABLE_READ,propagation<span class="token operator">=</span>Propagation.REQUIRED,readOnly<span class="token operator">=</span>true<span class="token punctuation">)</span>public class UserServiceImpl implements UserService<span class="token punctuation">{</span>    private UserDao ud<span class="token punctuation">;</span>    @Override    public User getUserByCodePassword<span class="token punctuation">(</span>User u<span class="token punctuation">)</span> <span class="token punctuation">{</span>            //1 根据登陆名称查询登陆用户            User existU <span class="token operator">=</span> ud.getByUserCode<span class="token punctuation">(</span>u.getUser_code<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //2 判断用户是否存在.不存在<span class="token operator">=</span><span class="token operator">></span>抛出异常,提示用户名不存在            if<span class="token punctuation">(</span>existU<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                throw new RuntimeException<span class="token punctuation">(</span><span class="token string">"用户名不存在!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            //3 判断用户密码是否正确<span class="token operator">=</span><span class="token operator">></span>不正确<span class="token operator">=</span><span class="token operator">></span>抛出异常,提示密码错误            if<span class="token punctuation">(</span><span class="token operator">!</span>existU.getUser_password<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span>u.getUser_password<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                throw new RuntimeException<span class="token punctuation">(</span><span class="token string">"密码错误!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            //4 返回查询到的用户对象        <span class="token keyword">return</span> existU<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    @Transactional<span class="token punctuation">(</span>isolation<span class="token operator">=</span>Isolation.REPEATABLE_READ,propagation<span class="token operator">=</span>Propagation.REQUIRED,readOnly<span class="token operator">=</span>false<span class="token punctuation">)</span>    public void saveUser<span class="token punctuation">(</span>User u<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ud.save<span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUd<span class="token punctuation">(</span>UserDao ud<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.ud <span class="token operator">=</span> ud<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="UserAction"><a href="#UserAction" class="headerlink" title="UserAction"></a>UserAction</h2><pre class=" language-bash"><code class="language-bash">package cn.itcast.web.action<span class="token punctuation">;</span><span class="token function">import</span> com.opensymphony.xwork2.ActionContext<span class="token punctuation">;</span><span class="token function">import</span> com.opensymphony.xwork2.ActionSupport<span class="token punctuation">;</span><span class="token function">import</span> com.opensymphony.xwork2.ModelDriven<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.domain.User<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.service.UserService<span class="token punctuation">;</span>public class UserAction extends ActionSupport implements ModelDriven<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>    private User user <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    private UserService userService <span class="token punctuation">;</span>    public void setUserService<span class="token punctuation">(</span>UserService userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String login<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>            //1 调用Service执行登陆逻辑            User u <span class="token operator">=</span> userService.getUserByCodePassword<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            //2 将返回的User对象放入session域            ActionContext.getContext<span class="token punctuation">(</span><span class="token punctuation">)</span>.getSession<span class="token punctuation">(</span><span class="token punctuation">)</span>.put<span class="token punctuation">(</span><span class="token string">"user"</span>, u<span class="token punctuation">)</span><span class="token punctuation">;</span>            //3 重定向到项目首页        <span class="token keyword">return</span> <span class="token string">"toHome"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public User getModel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h2><h3 id="User"><a href="#User" class="headerlink" title="User"></a>User</h3><pre class=" language-bash"><code class="language-bash">package cn.itcast.domain<span class="token punctuation">;</span><span class="token function">import</span> java.util.HashSet<span class="token punctuation">;</span><span class="token function">import</span> java.util.Set<span class="token punctuation">;</span>public class User <span class="token punctuation">{</span>    private Long user_id<span class="token punctuation">;</span>    private String user_code<span class="token punctuation">;</span>    private String user_name<span class="token punctuation">;</span>    private String user_password<span class="token punctuation">;</span>    private Character user_state<span class="token punctuation">;</span>    public Long getUser_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_id<span class="token punctuation">(</span>Long user_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_id <span class="token operator">=</span> user_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getUser_code<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_code<span class="token punctuation">(</span>String user_code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_code <span class="token operator">=</span> user_code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getUser_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_name<span class="token punctuation">(</span>String user_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_name <span class="token operator">=</span> user_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getUser_password<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_password<span class="token punctuation">(</span>String user_password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_password <span class="token operator">=</span> user_password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Character getUser_state<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_state<span class="token punctuation">(</span>Character user_state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_state <span class="token operator">=</span> user_state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public String toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User [user_id="</span> + user_id + <span class="token string">", user_code="</span> + user_code + <span class="token string">", user_name="</span> + user_name + <span class="token string">", user_password="</span>                + user_password + <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Customer"><a href="#Customer" class="headerlink" title="Customer"></a>Customer</h3><pre class=" language-bash"><code class="language-bash">public class Customer <span class="token punctuation">{</span>    private Long cust_id<span class="token punctuation">;</span>    private String cust_name<span class="token punctuation">;</span>    private String cust_source<span class="token punctuation">;</span>    private String cust_industry<span class="token punctuation">;</span>    private String cust_level<span class="token punctuation">;</span>    private String cust_linkman<span class="token punctuation">;</span>    private String cust_phone<span class="token punctuation">;</span>    private String cust_mobile<span class="token punctuation">;</span>    public Long getCust_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_id<span class="token punctuation">(</span>Long cust_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_id <span class="token operator">=</span> cust_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_name<span class="token punctuation">(</span>String cust_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_name <span class="token operator">=</span> cust_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_source<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_source<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_source<span class="token punctuation">(</span>String cust_source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_source <span class="token operator">=</span> cust_source<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_industry<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_industry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_industry<span class="token punctuation">(</span>String cust_industry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_industry <span class="token operator">=</span> cust_industry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_level<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_level<span class="token punctuation">(</span>String cust_level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_level <span class="token operator">=</span> cust_level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_linkman<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_linkman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_linkman<span class="token punctuation">(</span>String cust_linkman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_linkman <span class="token operator">=</span> cust_linkman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_phone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_phone<span class="token punctuation">(</span>String cust_phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_phone <span class="token operator">=</span> cust_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_mobile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_mobile<span class="token punctuation">(</span>String cust_mobile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_mobile <span class="token operator">=</span> cust_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public String toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer [cust_id="</span> + cust_id + <span class="token string">", cust_name="</span> + cust_name + <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="LinkMan"><a href="#LinkMan" class="headerlink" title="LinkMan"></a>LinkMan</h3><pre class=" language-bash"><code class="language-bash">//联系人实体public class LinkMan <span class="token punctuation">{</span>    private Long lkm_id<span class="token punctuation">;</span>    private Character lkm_gender<span class="token punctuation">;</span>    private String lkm_name<span class="token punctuation">;</span>    private String lkm_phone<span class="token punctuation">;</span>    private String lkm_email<span class="token punctuation">;</span>    private String lkm_qq<span class="token punctuation">;</span>    private String lkm_mobile<span class="token punctuation">;</span>    private String lkm_memo<span class="token punctuation">;</span>    private String lkm_position<span class="token punctuation">;</span>    //表达多对一关系    private Customer customer <span class="token punctuation">;</span>    //----------------------------------------------    //不与数据库中的列对应,只为了接收表单参数    private Long cust_id<span class="token punctuation">;</span>    public Long getCust_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_id<span class="token punctuation">(</span>Long cust_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_id <span class="token operator">=</span> cust_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Customer getCustomer<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCustomer<span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.customer <span class="token operator">=</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Long getLkm_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_id<span class="token punctuation">(</span>Long lkm_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_id <span class="token operator">=</span> lkm_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Character getLkm_gender<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_gender<span class="token punctuation">(</span>Character lkm_gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_gender <span class="token operator">=</span> lkm_gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_name<span class="token punctuation">(</span>String lkm_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_name <span class="token operator">=</span> lkm_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_phone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_phone<span class="token punctuation">(</span>String lkm_phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_phone <span class="token operator">=</span> lkm_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_email<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_email<span class="token punctuation">(</span>String lkm_email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_email <span class="token operator">=</span> lkm_email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_qq<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_qq<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_qq<span class="token punctuation">(</span>String lkm_qq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_qq <span class="token operator">=</span> lkm_qq<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_mobile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_mobile<span class="token punctuation">(</span>String lkm_mobile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_mobile <span class="token operator">=</span> lkm_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_memo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_memo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_memo<span class="token punctuation">(</span>String lkm_memo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_memo <span class="token operator">=</span> lkm_memo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_position<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_position<span class="token punctuation">(</span>String lkm_position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_position <span class="token operator">=</span> lkm_position<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="模型层对应的hbm-xml"><a href="#模型层对应的hbm-xml" class="headerlink" title="模型层对应的hbm.xml"></a>模型层对应的hbm.xml</h2><h3 id="User-hbm-xml"><a href="#User-hbm-xml" class="headerlink" title="User.hbm.xml"></a>User.hbm.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE hibernate-mapping PUBLIC     <span class="token string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span>    <span class="token string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>hibernate-mapping package<span class="token operator">=</span><span class="token string">"cn.itcast.domain"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>class name<span class="token operator">=</span><span class="token string">"User"</span> table<span class="token operator">=</span><span class="token string">"sys_user"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>id name<span class="token operator">=</span><span class="token string">"user_id"</span>  <span class="token operator">></span>            <span class="token operator">&lt;</span>generator class<span class="token operator">=</span><span class="token string">"native"</span><span class="token operator">></span><span class="token operator">&lt;</span>/generator<span class="token operator">></span>        <span class="token operator">&lt;</span>/id<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user_code"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user_name"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user_password"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user_state"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/class<span class="token operator">></span><span class="token operator">&lt;</span>/hibernate-mapping<span class="token operator">></span></code></pre><h3 id="Customer-hbm-xml"><a href="#Customer-hbm-xml" class="headerlink" title="Customer.hbm.xml"></a>Customer.hbm.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE hibernate-mapping PUBLIC     <span class="token string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span>    <span class="token string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置表与实体对象的关系 --<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span>-- package属性:填写一个包名.在元素内部凡是需要书写完整类名的属性,可以直接写简答类名了. --<span class="token operator">></span><span class="token operator">&lt;</span>hibernate-mapping package<span class="token operator">=</span><span class="token string">"cn.itcast.domain"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--         class元素: 配置实体与表的对应关系的            name: 完整类名            table:数据库表名     --<span class="token operator">></span>    <span class="token operator">&lt;</span>class name<span class="token operator">=</span><span class="token string">"Customer"</span> table<span class="token operator">=</span><span class="token string">"cst_customer"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- id元素:配置主键映射的属性                name: 填写主键对应属性名                column<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>: 填写表中的主键列名.默认值:列名会默认使用属性名                type<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>:填写列<span class="token punctuation">(</span>属性<span class="token punctuation">)</span>的类型.hibernate会自动检测实体的属性类型.                        每个类型有三种填法: java类型<span class="token operator">|</span>hibernate类型<span class="token operator">|</span>数据库类型                not-null<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>:配置该属性<span class="token punctuation">(</span>列<span class="token punctuation">)</span>是否不能为空. 默认值:false                length<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>:配置数据库中列的长度. 默认值:使用数据库类型的最大长度         --<span class="token operator">></span>        <span class="token operator">&lt;</span>id name<span class="token operator">=</span><span class="token string">"cust_id"</span>  <span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- generator:主键生成策略<span class="token punctuation">(</span>明天讲<span class="token punctuation">)</span> --<span class="token operator">></span>            <span class="token operator">&lt;</span>generator class<span class="token operator">=</span><span class="token string">"native"</span><span class="token operator">></span><span class="token operator">&lt;</span>/generator<span class="token operator">></span>        <span class="token operator">&lt;</span>/id<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- property元素:除id之外的普通属性映射                name: 填写属性名                column<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>: 填写列名                type<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>:填写列<span class="token punctuation">(</span>属性<span class="token punctuation">)</span>的类型.hibernate会自动检测实体的属性类型.                        每个类型有三种填法: java类型<span class="token operator">|</span>hibernate类型<span class="token operator">|</span>数据库类型                not-null<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>:配置该属性<span class="token punctuation">(</span>列<span class="token punctuation">)</span>是否不能为空. 默认值:false                length<span class="token punctuation">(</span>可选<span class="token punctuation">)</span>:配置数据库中列的长度. 默认值:使用数据库类型的最大长度         --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_name"</span> column<span class="token operator">=</span><span class="token string">"cust_name"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>--  <span class="token operator">&lt;</span>column name<span class="token operator">=</span><span class="token string">"cust_name"</span> sql-type<span class="token operator">=</span><span class="token string">"varchar"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/column<span class="token operator">></span> --<span class="token operator">></span>        <span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_source"</span> column<span class="token operator">=</span><span class="token string">"cust_source"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_industry"</span> column<span class="token operator">=</span><span class="token string">"cust_industry"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_level"</span> column<span class="token operator">=</span><span class="token string">"cust_level"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_linkman"</span> column<span class="token operator">=</span><span class="token string">"cust_linkman"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_phone"</span> column<span class="token operator">=</span><span class="token string">"cust_phone"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_mobile"</span> column<span class="token operator">=</span><span class="token string">"cust_mobile"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/class<span class="token operator">></span><span class="token operator">&lt;</span>/hibernate-mapping<span class="token operator">></span></code></pre><h3 id="LinkMan-hbm-xml"><a href="#LinkMan-hbm-xml" class="headerlink" title="LinkMan.hbm.xml"></a>LinkMan.hbm.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE hibernate-mapping PUBLIC     <span class="token string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span>    <span class="token string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>hibernate-mapping package<span class="token operator">=</span><span class="token string">"cn.itcast.domain"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>class name<span class="token operator">=</span><span class="token string">"LinkMan"</span> table<span class="token operator">=</span><span class="token string">"cst_linkman"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>id name<span class="token operator">=</span><span class="token string">"lkm_id"</span>  <span class="token operator">></span>            <span class="token operator">&lt;</span>generator class<span class="token operator">=</span><span class="token string">"native"</span><span class="token operator">></span><span class="token operator">&lt;</span>/generator<span class="token operator">></span>        <span class="token operator">&lt;</span>/id<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_gender"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_name"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_phone"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_email"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_qq"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_mobile"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_memo"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_position"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 多对一 --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--             name属性:引用属性名            column属性: 外键列名            class属性: 与我关联的对象完整类名         --<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span>--              级联操作:    cascade                 save-update: 级联保存更新                 delete:级联删除                 all:save-update+delete             级联操作: 简化操作.目的就是为了少些两行代码.          --<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span>-- 多的一方: 不能放弃维护关系的.外键字段就在多的一方.  --<span class="token operator">></span>        <span class="token operator">&lt;</span>many-to-one name<span class="token operator">=</span><span class="token string">"customer"</span> column<span class="token operator">=</span><span class="token string">"lkm_cust_id"</span> class<span class="token operator">=</span><span class="token string">"Customer"</span>  <span class="token operator">></span>        <span class="token operator">&lt;</span>/many-to-one<span class="token operator">></span>    <span class="token operator">&lt;</span>/class<span class="token operator">></span><span class="token operator">&lt;</span>/hibernate-mapping<span class="token operator">></span></code></pre><p> github代码下载ssh_crm.rar：   <a href="https://github.com/zy20081/JAVA" target="_blank" rel="noopener">https://github.com/zy20081/JAVA</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Struts2 总结</title>
      <link href="/2018/11/25/struts2-zong-jie/"/>
      <url>/2018/11/25/struts2-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ol><li>三层架构：展示层  业务逻辑层   数据持久层</li><li>struts2框架:展示层框架，mvc框架</li><li>apache公司</li><li>并不是struts1的升级版，是webwork升级</li><li>核心：核心控制器  拦截器</li></ol><h2 id="配置环境搭建"><a href="#配置环境搭建" class="headerlink" title="配置环境搭建"></a>配置环境搭建</h2><p>1.直接下载导入<br><a href="http://struts.apache.org/download.cgi" target="_blank" rel="noopener">http://struts.apache.org/download.cgi</a>,<br>可根据需要选择 all min src 等包，如果仅仅是学习，选择 min 包就够了</p><pre class=" language-bash"><code class="language-bash"> web.xml<span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>web-app xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">=</span><span class="token string">"http://java.sun.com/xml/ns/javaee"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> id<span class="token operator">=</span><span class="token string">"WebApp_ID"</span> version<span class="token operator">=</span><span class="token string">"2.5"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>display-name<span class="token operator">></span>struts2_day01<span class="token operator">&lt;</span>/display-name<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>-- 配置常量   <span class="token operator">&lt;</span>context-param<span class="token operator">></span>      <span class="token operator">&lt;</span>param-name<span class="token operator">></span>struts.i18n.encoding<span class="token operator">&lt;</span>/param-name<span class="token operator">></span>      <span class="token operator">&lt;</span>param-value<span class="token operator">></span>UTF-8<span class="token operator">&lt;</span>/param-value<span class="token operator">></span>  <span class="token operator">&lt;</span>/context-param<span class="token operator">></span>  --<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>-- struts2核心过滤器 --<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">></span>      <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>struts2<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>      <span class="token operator">&lt;</span>filter-class<span class="token operator">></span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="token operator">&lt;</span>/filter-class<span class="token operator">></span>  <span class="token operator">&lt;</span>/filter<span class="token operator">></span>  <span class="token operator">&lt;</span>filter-mapping<span class="token operator">></span>      <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>struts2<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>      <span class="token operator">&lt;</span>url-pattern<span class="token operator">></span>/*<span class="token operator">&lt;</span>/url-pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>/filter-mapping<span class="token operator">></span>  <span class="token operator">&lt;</span>welcome-file-list<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>index.html<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>index.htm<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>index.jsp<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>default.html<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>default.htm<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>default.jsp<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>  <span class="token operator">&lt;</span>/welcome-file-list<span class="token operator">></span><span class="token operator">&lt;</span>/web-app<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">struts.xml<span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE struts PUBLIC    <span class="token string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span>    <span class="token string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>struts<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- i18n:国际化. 解决post提交乱码 --<span class="token operator">></span>    <span class="token operator">&lt;</span>constant name<span class="token operator">=</span><span class="token string">"struts.i18n.encoding"</span> value<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>/constant<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定反问action时的后缀名         http://localhost:8080/struts2_day01/hello/HelloAction.do    --<span class="token operator">></span>    <span class="token operator">&lt;</span>constant name<span class="token operator">=</span><span class="token string">"struts.action.extension"</span> value<span class="token operator">=</span><span class="token string">"action"</span><span class="token operator">></span><span class="token operator">&lt;</span>/constant<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定struts2是否以开发模式运行            1.热加载主配置.<span class="token punctuation">(</span>不需要重启即可生效<span class="token punctuation">)</span>            2.提供更多错误信息输出,方便开发时的调试     --<span class="token operator">></span>    <span class="token operator">&lt;</span>constant name<span class="token operator">=</span><span class="token string">"struts.devMode"</span> value<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span>/constant<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- package:将Action配置封装.就是可以在Package中配置很多action.            name属性: 给包起个名字,起到标识作用.随便起.不能其他包名重复.            namespace属性:给action的访问路径中定义一个命名空间            extends属性: 继承一个 指定包            abstract属性:包是否为抽象的<span class="token punctuation">;</span> 标识性属性.标识该包不能独立运行.专门被继承      --<span class="token operator">></span>    <span class="token operator">&lt;</span>package name<span class="token operator">=</span><span class="token string">"hello"</span> namespace<span class="token operator">=</span><span class="token string">"/hello"</span> extends<span class="token operator">=</span><span class="token string">"struts-default"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- action元素:配置action类                name属性: 决定了Action访问资源名.                class属性: action的完整类名                method属性: 指定调用Action中的哪个方法来处理请求         --<span class="token operator">></span>        <span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"HelloAction"</span> class<span class="token operator">=</span><span class="token string">"cn.itheima.a_hello.HelloAction"</span> method<span class="token operator">=</span><span class="token string">"hello"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- result元素:结果配置                     name属性: 标识结果处理的名称.与action方法的返回值对应.                    type属性: 指定调用哪一个result类来处理结果,默认使用转发.                    标签体:填写页面的相对路径            --<span class="token operator">></span>            <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"success"</span> type<span class="token operator">=</span><span class="token string">"dispatcher"</span> <span class="token operator">></span>/hello.jsp<span class="token operator">&lt;</span>/result<span class="token operator">></span>        <span class="token operator">&lt;</span>/action<span class="token operator">></span>    <span class="token operator">&lt;</span>/package<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 引入其他struts配置文件 --<span class="token operator">></span>    <span class="token operator">&lt;</span>include file<span class="token operator">=</span><span class="token string">"cn/itheima/b_dynamic/struts.xml"</span><span class="token operator">></span><span class="token operator">&lt;</span>/include<span class="token operator">></span>    <span class="token operator">&lt;</span>include file<span class="token operator">=</span><span class="token string">"cn/itheima/c_default/struts.xml"</span><span class="token operator">></span><span class="token operator">&lt;</span>/include<span class="token operator">></span><span class="token operator">&lt;</span>/struts<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"> public class HelloAction <span class="token punctuation">{</span>    public String hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="获取-Servlet-Api"><a href="#获取-Servlet-Api" class="headerlink" title="获取 Servlet Api"></a>获取 Servlet Api</h2><pre class=" language-bash"><code class="language-bash"> struts.xml<span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE struts PUBLIC    <span class="token string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span>    <span class="token string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>struts<span class="token operator">></span>    <span class="token operator">&lt;</span>package name<span class="token operator">=</span><span class="token string">"result"</span> namespace<span class="token operator">=</span><span class="token string">"/"</span> extends<span class="token operator">=</span><span class="token string">"struts-default"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>--  转发 --<span class="token operator">></span>        <span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"Demo1Action"</span> class<span class="token operator">=</span><span class="token string">"cn.itheima.a_result.Demo1Action"</span> method<span class="token operator">=</span><span class="token string">"execute"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"success"</span> type<span class="token operator">=</span><span class="token string">"dispatcher"</span> <span class="token operator">></span>/hello.jsp<span class="token operator">&lt;</span>/result<span class="token operator">></span>        <span class="token operator">&lt;</span>/action<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 重定向 --<span class="token operator">></span>        <span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"Demo2Action"</span> class<span class="token operator">=</span><span class="token string">"cn.itheima.a_result.Demo2Action"</span> method<span class="token operator">=</span><span class="token string">"execute"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"success"</span> type<span class="token operator">=</span><span class="token string">"redirect"</span> <span class="token operator">></span>/hello.jsp<span class="token operator">&lt;</span>/result<span class="token operator">></span>        <span class="token operator">&lt;</span>/action<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 转发到Action --<span class="token operator">></span>        <span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"Demo3Action"</span> class<span class="token operator">=</span><span class="token string">"cn.itheima.a_result.Demo3Action"</span> method<span class="token operator">=</span><span class="token string">"execute"</span> <span class="token operator">></span>             <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"success"</span> type<span class="token operator">=</span><span class="token string">"chain"</span><span class="token operator">></span>                     <span class="token operator">&lt;</span><span class="token operator">!</span>-- action的名字 --<span class="token operator">></span>                 <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"actionName"</span><span class="token operator">></span>Demo1Action<span class="token operator">&lt;</span>/param<span class="token operator">></span>                     <span class="token operator">&lt;</span><span class="token operator">!</span>-- action所在的命名空间 --<span class="token operator">></span>                 <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"namespace"</span><span class="token operator">></span>/<span class="token operator">&lt;</span>/param<span class="token operator">></span>             <span class="token operator">&lt;</span>/result<span class="token operator">></span>        <span class="token operator">&lt;</span>/action<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 重定向到Action --<span class="token operator">></span>        <span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"Demo4Action"</span> class<span class="token operator">=</span><span class="token string">"cn.itheima.a_result.Demo4Action"</span> method<span class="token operator">=</span><span class="token string">"execute"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>result  name<span class="token operator">=</span><span class="token string">"success"</span>  type<span class="token operator">=</span><span class="token string">"redirectAction"</span><span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">!</span>-- action的名字 --<span class="token operator">></span>                 <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"actionName"</span><span class="token operator">></span>Demo1Action<span class="token operator">&lt;</span>/param<span class="token operator">></span>                 <span class="token operator">&lt;</span><span class="token operator">!</span>-- action所在的命名空间 --<span class="token operator">></span>                 <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"namespace"</span><span class="token operator">></span>/<span class="token operator">&lt;</span>/param<span class="token operator">></span>            <span class="token operator">&lt;</span>/result<span class="token operator">></span>        <span class="token operator">&lt;</span>/action<span class="token operator">></span>    <span class="token operator">&lt;</span>/package<span class="token operator">></span>    <span class="token operator">&lt;</span>include file<span class="token operator">=</span><span class="token string">"cn/itheima/b_api/struts.xml"</span><span class="token operator">></span><span class="token operator">&lt;</span>/include<span class="token operator">></span>    <span class="token operator">&lt;</span>include file<span class="token operator">=</span><span class="token string">"cn/itheima/c_param/struts.xml"</span><span class="token operator">></span><span class="token operator">&lt;</span>/include<span class="token operator">></span><span class="token operator">&lt;</span>/struts<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">  //如何在action中获得原生ServletAPIpublic class Demo5Action extends ActionSupport <span class="token punctuation">{</span>    public String execute<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        //request域<span class="token operator">=</span><span class="token operator">></span> map <span class="token punctuation">(</span>struts2并不推荐使用原生request域<span class="token punctuation">)</span>        //不推荐        Map<span class="token operator">&lt;</span>String, Object<span class="token operator">></span> requestScope <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String, Object<span class="token operator">></span><span class="token punctuation">)</span> ActionContext.getContext<span class="token punctuation">(</span><span class="token punctuation">)</span>.get<span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //推荐        ActionContext.getContext<span class="token punctuation">(</span><span class="token punctuation">)</span>.put<span class="token punctuation">(</span><span class="token string">"name"</span>, <span class="token string">"requestTom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //session域 <span class="token operator">=</span><span class="token operator">></span> map        Map<span class="token operator">&lt;</span>String, Object<span class="token operator">></span> sessionScope <span class="token operator">=</span> ActionContext.getContext<span class="token punctuation">(</span><span class="token punctuation">)</span>.getSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionScope.put<span class="token punctuation">(</span><span class="token string">"name"</span>, <span class="token string">"sessionTom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //application域<span class="token operator">=</span><span class="token operator">></span>map        Map<span class="token operator">&lt;</span>String, Object<span class="token operator">></span> applicationScope <span class="token operator">=</span> ActionContext.getContext<span class="token punctuation">(</span><span class="token punctuation">)</span>.getApplication<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        applicationScope.put<span class="token punctuation">(</span><span class="token string">"name"</span>, <span class="token string">"applicationTom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//如何在action中获得原生ServletAPIpublic class Demo6Action extends ActionSupport <span class="token punctuation">{</span>    //并不推荐    public String execute<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        //原生request        HttpServletRequest request <span class="token operator">=</span> ServletActionContext.getRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //原生session        HttpSession session <span class="token operator">=</span> request.getSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //原生response        HttpServletResponse response <span class="token operator">=</span> ServletActionContext.getResponse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //原生servletContext        ServletContext servletContext <span class="token operator">=</span> ServletActionContext.getServletContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//如何在action中获得原生ServletAPIpublic class Demo7Action extends ActionSupport implements ServletRequestAware <span class="token punctuation">{</span>    private HttpServletRequest request<span class="token punctuation">;</span>    public String execute<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"原生request:"</span>+request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public void setServletRequest<span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.request <span class="token operator">=</span> request<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h2><p>在传统的servlet中我们采用request和response传递参数，但是struts2如果想用同样的方式传递参数，必须先：</p><pre class=" language-bash"><code class="language-bash">HttpServletRequest req <span class="token operator">=</span> ServletActionContext.getRequest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HttpServletResponse resp <span class="token operator">=</span> ServletActionContext.getResponse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取request和response</p><p>除了以上这种方式，struts2还带了3中传参方式：</p><ol><li>首先是最简单的get/set方式：只要在继承了ActionSupport父类的struts2类中定义私有成员变量（变量名和jsp页面中上传参数的name相同），并生成get/set方法，即可直接使用。</li></ol><pre class=" language-bash"><code class="language-bash">public class LoginAction extends ActionSupport<span class="token punctuation">{</span>private String username<span class="token punctuation">;</span>public String Login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System.out.println<span class="token punctuation">(</span><span class="token string">"loginaction:"</span>+username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public String getUsername<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span>public void setUsername<span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span> this.username <span class="token operator">=</span> username<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">jsp的form中：<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"login"</span> method<span class="token operator">=</span><span class="token string">"POST"</span> id<span class="token operator">=</span><span class="token string">"form"</span><span class="token operator">></span><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"inputText"</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>用户名： <span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> id<span class="token operator">=</span><span class="token string">"username"</span> class<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/form<span class="token operator">></span></code></pre><ol start="2"><li><p>在java中我们一般会设置bean类，比如这里：</p><pre class=" language-bash"><code class="language-bash">public class User<span class="token punctuation">{</span>private String username<span class="token punctuation">;</span>public String getUsername<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span>public void setUsername<span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>this.username <span class="token operator">=</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>那么我们再传参的时候也可以直接传递User类</p></li></ol><p>但是为了分清楚jsp传递过去的变量时给哪个类的（加入我们的Company类和User类中都有username变量），我们在jsp页面需要进行改动，在name的值中加上前缀（是在action类中声明的类变量），</p><pre class=" language-bash"><code class="language-bash">public class LoginAction extends ActionSupport<span class="token punctuation">{</span>private User user<span class="token punctuation">;</span>  //不需要实例化，只需要声明public String Login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>System.out.println<span class="token punctuation">(</span><span class="token string">"loginaction:"</span>+user.username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public String getUser<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  //也需要有get/set方法<span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span>public void setUser<span class="token punctuation">(</span>String user<span class="token punctuation">)</span> <span class="token punctuation">{</span>this.user <span class="token operator">=</span> user<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">jsp页面只改了name的值，注意是user不是User<span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"login"</span> method<span class="token operator">=</span><span class="token string">"POST"</span> id<span class="token operator">=</span><span class="token string">"form"</span><span class="token operator">></span><span class="token operator">&lt;</span>div class<span class="token operator">=</span><span class="token string">"inputText"</span><span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span>用户名： <span class="token operator">&lt;</span>/span<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"user.username"</span> id<span class="token operator">=</span><span class="token string">"username"</span> class<span class="token operator">=</span><span class="token string">"username"</span><span class="token operator">></span><span class="token operator">&lt;</span>/div<span class="token operator">></span><span class="token operator">&lt;</span>/form<span class="token operator">></span></code></pre><ol start="3"><li>比较推荐的第三种方法，后端和前端耦合较少。<br>这种方法action类需要继承ModelDriven<t>接口。<pre class=" language-bash"><code class="language-bash">public class LoginAction extends ActionSupport implements ModelDriven<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span> //这里需要把User加上去 private User user<span class="token operator">=</span>new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //和2中不同，需要实例化User public String Login<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> System.out.println<span class="token punctuation">(</span><span class="token string">"loginaction:"</span>+user.username<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> public User getModel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> //不再需要get/set方法，而是实现ModelDriven接口中的getMode方法，返回值是user。 // TODO Auto-generated method stub <span class="token keyword">return</span> user<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></t></li></ol><h2 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h2><p> <img src="/2018/11/25/struts2-zong-jie/1.jpg" alt="图1"></p><pre class=" language-bash"><code class="language-bash">package cn.a_ognl<span class="token punctuation">;</span><span class="token function">import</span> java.util.HashMap<span class="token punctuation">;</span><span class="token function">import</span> java.util.Map<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> cn.bean.User<span class="token punctuation">;</span><span class="token function">import</span> ognl.Ognl<span class="token punctuation">;</span><span class="token function">import</span> ognl.OgnlContext<span class="token punctuation">;</span><span class="token function">import</span> ognl.OgnlException<span class="token punctuation">;</span>//展示OGNL语法public class Demo <span class="token punctuation">{</span>    @Test    //准备工作    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        //准备ONGLContext            //准备Root            User rootUser <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token string">"tom"</span>,18<span class="token punctuation">)</span><span class="token punctuation">;</span>            //准备Context            Map<span class="token operator">&lt;</span>String,User<span class="token operator">></span> context <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>String,User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user1"</span>, new User<span class="token punctuation">(</span><span class="token string">"jack"</span>,18<span class="token punctuation">))</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user2"</span>, new User<span class="token punctuation">(</span><span class="token string">"rose"</span>,22<span class="token punctuation">))</span><span class="token punctuation">;</span>        OgnlContext oc <span class="token operator">=</span> new OgnlContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //将rootUser作为root部分        oc.setRoot<span class="token punctuation">(</span>rootUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        //将context这个Map作为Context部分        oc.setValues<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        //书写OGNL        Ognl.getValue<span class="token punctuation">(</span><span class="token string">""</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //基本语法演示    //取出root中的属性值    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        //准备ONGLContext            //准备Root            User rootUser <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token string">"tom"</span>,18<span class="token punctuation">)</span><span class="token punctuation">;</span>            //准备Context            Map<span class="token operator">&lt;</span>String,User<span class="token operator">></span> context <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>String,User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user1"</span>, new User<span class="token punctuation">(</span><span class="token string">"jack"</span>,18<span class="token punctuation">))</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user2"</span>, new User<span class="token punctuation">(</span><span class="token string">"rose"</span>,22<span class="token punctuation">))</span><span class="token punctuation">;</span>        OgnlContext oc <span class="token operator">=</span> new OgnlContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setRoot<span class="token punctuation">(</span>rootUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setValues<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        //书写OGNL        //取出root中user对象的name属性        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"name"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        Integer age <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"age"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //基本语法演示    //取出context中的属性值    public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        //准备ONGLContext            //准备Root            User rootUser <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token string">"tom"</span>,18<span class="token punctuation">)</span><span class="token punctuation">;</span>            //准备Context            Map<span class="token operator">&lt;</span>String,User<span class="token operator">></span> context <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>String,User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user1"</span>, new User<span class="token punctuation">(</span><span class="token string">"jack"</span>,18<span class="token punctuation">))</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user2"</span>, new User<span class="token punctuation">(</span><span class="token string">"rose"</span>,22<span class="token punctuation">))</span><span class="token punctuation">;</span>        OgnlContext oc <span class="token operator">=</span> new OgnlContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setRoot<span class="token punctuation">(</span>rootUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setValues<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        //书写OGNL        //取出context中键为user1对象的name属性        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"#user1.name"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        String name2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"#user2.name"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        Integer age <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"#user2.age"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //基本语法演示    //为属性赋值    public void fun4<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        //准备ONGLContext            //准备Root            User rootUser <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token string">"tom"</span>,18<span class="token punctuation">)</span><span class="token punctuation">;</span>            //准备Context            Map<span class="token operator">&lt;</span>String,User<span class="token operator">></span> context <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>String,User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user1"</span>, new User<span class="token punctuation">(</span><span class="token string">"jack"</span>,18<span class="token punctuation">))</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user2"</span>, new User<span class="token punctuation">(</span><span class="token string">"rose"</span>,22<span class="token punctuation">))</span><span class="token punctuation">;</span>        OgnlContext oc <span class="token operator">=</span> new OgnlContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setRoot<span class="token punctuation">(</span>rootUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setValues<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        //书写OGNL        //将root中的user对象的name属性赋值        Ognl.getValue<span class="token punctuation">(</span><span class="token string">"name='jerry'"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"name"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        String name2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span>"#user1.name<span class="token operator">=</span><span class="token string">'郝强勇'</span>,<span class="token comment" spellcheck="true">#user1.name", oc, oc.getRoot());</span>        System.out.println<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //基本语法演示    //调用方法    public void fun5<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        //准备ONGLContext            //准备Root            User rootUser <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token string">"tom"</span>,18<span class="token punctuation">)</span><span class="token punctuation">;</span>            //准备Context            Map<span class="token operator">&lt;</span>String,User<span class="token operator">></span> context <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>String,User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user1"</span>, new User<span class="token punctuation">(</span><span class="token string">"jack"</span>,18<span class="token punctuation">))</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user2"</span>, new User<span class="token punctuation">(</span><span class="token string">"rose"</span>,22<span class="token punctuation">))</span><span class="token punctuation">;</span>        OgnlContext oc <span class="token operator">=</span> new OgnlContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setRoot<span class="token punctuation">(</span>rootUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setValues<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        //书写OGNL        //调用root中user对象的setName方法        Ognl.getValue<span class="token punctuation">(</span><span class="token string">"setName('lilei')"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"getName()"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        String name2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span>"#user1.setName<span class="token punctuation">(</span><span class="token string">'lucy'</span><span class="token punctuation">)</span>,<span class="token comment" spellcheck="true">#user1.getName()", oc, oc.getRoot());</span>        System.out.println<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //基本语法演示    //调用静态方法    public void fun6<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        //准备ONGLContext            //准备Root            User rootUser <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token string">"tom"</span>,18<span class="token punctuation">)</span><span class="token punctuation">;</span>            //准备Context            Map<span class="token operator">&lt;</span>String,User<span class="token operator">></span> context <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>String,User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user1"</span>, new User<span class="token punctuation">(</span><span class="token string">"jack"</span>,18<span class="token punctuation">))</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user2"</span>, new User<span class="token punctuation">(</span><span class="token string">"rose"</span>,22<span class="token punctuation">))</span><span class="token punctuation">;</span>        OgnlContext oc <span class="token operator">=</span> new OgnlContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setRoot<span class="token punctuation">(</span>rootUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setValues<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        //书写OGNL        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"@cn.itheima.a_ognl.HahaUtils@echo('hello 强勇!')"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        //Double pi <span class="token operator">=</span> <span class="token punctuation">(</span>Double<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"@java.lang.Math@PI"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        Double pi <span class="token operator">=</span> <span class="token punctuation">(</span>Double<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"@@PI"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        @Test    //基本语法演示    //ognl创建对象-list<span class="token operator">|</span>map    public void fun7<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        //准备ONGLContext            //准备Root            User rootUser <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token string">"tom"</span>,18<span class="token punctuation">)</span><span class="token punctuation">;</span>            //准备Context            Map<span class="token operator">&lt;</span>String,User<span class="token operator">></span> context <span class="token operator">=</span> new HashMap<span class="token operator">&lt;</span>String,User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user1"</span>, new User<span class="token punctuation">(</span><span class="token string">"jack"</span>,18<span class="token punctuation">))</span><span class="token punctuation">;</span>            context.put<span class="token punctuation">(</span><span class="token string">"user2"</span>, new User<span class="token punctuation">(</span><span class="token string">"rose"</span>,22<span class="token punctuation">))</span><span class="token punctuation">;</span>        OgnlContext oc <span class="token operator">=</span> new OgnlContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setRoot<span class="token punctuation">(</span>rootUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        oc.setValues<span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        //书写OGNL        //创建list对象        Integer size <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"{'tom','jerry','jack','rose'}.size()"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"{'tom','jerry','jack','rose'}[0]"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        String name2 <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"{'tom','jerry','jack','rose'}.get(1)"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        /*System.out.println<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">;</span>*/        //创建Map对象        Integer size2 <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"#{'name':'tom','age':18}.size()"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        String name3  <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"#{'name':'tom','age':18}['name']"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        Integer age  <span class="token operator">=</span> <span class="token punctuation">(</span>Integer<span class="token punctuation">)</span> Ognl.getValue<span class="token punctuation">(</span><span class="token string">"#{'name':'tom','age':18}.get('age')"</span>, oc, oc.getRoot<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>size2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>name3<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 调试标签 --<span class="token operator">></span><span class="token operator">&lt;</span>s:debug<span class="token operator">></span><span class="token operator">&lt;</span>/s:debug<span class="token operator">></span></code></pre><p> 项目路劲</p><pre class=" language-bash"><code class="language-bash">     <span class="token operator">&lt;</span>form action<span class="token operator">=</span><span class="token string">"<span class="token variable">${pageContext.request.contextPath}</span>/Demo2Action"</span><span class="token operator">></span>        用户名:<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"name"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/form<span class="token operator">></span></code></pre><h2 id="Struts2标签"><a href="#Struts2标签" class="headerlink" title="Struts2标签"></a>Struts2标签</h2><h2 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h2><p>struts2 中使用的 properties 文件来做国际化<br>全局资源包</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--在struts.xml 中配置常量指定全局字符串包位置--<span class="token operator">></span><span class="token operator">&lt;</span>constant name<span class="token operator">=</span><span class="token string">"struts.custom.i18n.resources"</span> value<span class="token operator">=</span><span class="token string">"com.ittianyu.i18n.strings"</span> /<span class="token operator">></span></code></pre><ol><li>包范围的资源包：把 资源包放在某包下面，命名为：package_语言代码_国家代码.properties</li><li>局部消息资源包：把 资源包放在某动作类路径下，命名为：动作类名称<em>语言代码</em>国家代码.properties <br><br>资源包的使用顺序：局部 &gt; 包范围 &gt; 全局！</li></ol><h3 id="读取资源包"><a href="#读取资源包" class="headerlink" title="读取资源包"></a>读取资源包</h3><pre class=" language-bash"><code class="language-bash">Action public class I18nAction extends ActionSupport <span class="token punctuation">{</span> public String execute<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> String value <span class="token operator">=</span> getText<span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> jsp <span class="token operator">&lt;</span>s:text name<span class="token operator">=</span><span class="token string">"key"</span>/<span class="token operator">></span> </code></pre><h3 id="手动指定读取的资源包"><a href="#手动指定读取的资源包" class="headerlink" title="手动指定读取的资源包"></a>手动指定读取的资源包</h3><p>当注定的包下没有找到指定的值时，会按顺序搜索配置了的资源包</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>s:i18n name<span class="token operator">=</span><span class="token string">"com.xxxx.package"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>s:text name<span class="token operator">=</span><span class="token string">"key"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/s:i18n<span class="token operator">></span></code></pre><h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><pre class=" language-bash"><code class="language-bash"> html<span class="token operator">&lt;</span>s:form action<span class="token operator">=</span><span class="token string">"upload.action"</span> enctype<span class="token operator">=</span><span class="token string">"multipart/form-data"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>s:textfield name<span class="token operator">=</span><span class="token string">"username"</span> label<span class="token operator">=</span><span class="token string">"用户名"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>s:file name<span class="token operator">=</span><span class="token string">"photo"</span> label<span class="token operator">=</span><span class="token string">"照片"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>s:submit value<span class="token operator">=</span><span class="token string">"上传"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>/s:form<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash"> actionpublic class UploadAction extends ActionSupport<span class="token punctuation">{</span>    public String username<span class="token punctuation">;</span>    public File photo<span class="token punctuation">;</span>    public String photoFileName<span class="token punctuation">;</span>// 上传文件名。变量命名规格 字段名+FileName    public String photoContentType<span class="token punctuation">;</span>// 上传文件的MIME类型。变量命名规格 字段名+ContentType    public String upload<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        // 获取文件存储目录        ServletContext servletContext <span class="token operator">=</span> ServletActionContext.getServletContext<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path <span class="token operator">=</span> servletContext.getRealPath<span class="token punctuation">(</span><span class="token string">"/WEB-INF/files"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        File <span class="token function">file</span> <span class="token operator">=</span> new File<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file.exists<span class="token punctuation">(</span><span class="token punctuation">))</span>            file.mkdirs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 存储到目标路径        photo.renameTo<span class="token punctuation">(</span>new File<span class="token punctuation">(</span>file, photoFileName<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> NONE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash"> 修改上传文件大小限制<span class="token operator">&lt;</span><span class="token operator">!</span>--限制上传最大尺寸为 1048576 byte--<span class="token operator">></span>    <span class="token operator">&lt;</span>constant name<span class="token operator">=</span><span class="token string">"struts.multipart.maxSize"</span> value<span class="token operator">=</span><span class="token string">"1048576"</span>/<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">限制上传文件扩展名<span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"upload"</span> class<span class="token operator">=</span><span class="token string">"com.ittianyu.javaeetest.web.action.UploadAction"</span> method<span class="token operator">=</span><span class="token string">"upload"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>interceptor-ref name<span class="token operator">=</span><span class="token string">"defaultStack"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"fileUpload.allowedExtensions"</span><span class="token operator">></span>jpg,png<span class="token operator">&lt;</span>/param<span class="token operator">></span>    <span class="token operator">&lt;</span>/interceptor-ref<span class="token operator">></span>    <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"input"</span><span class="token operator">></span>upload.jsp<span class="token operator">&lt;</span>/result<span class="token operator">></span><span class="token operator">&lt;</span>/action<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">多文件上传需要把public File photo<span class="token punctuation">;</span>public String photoFileName<span class="token punctuation">;</span>// 上传文件名。变量命名规格 字段名+FileNamepublic String photoContentType<span class="token punctuation">;</span>// 上传文件的MIME类型。变量命名规格 字段名+ContentType改成，也就是改成数组public File<span class="token punctuation">[</span><span class="token punctuation">]</span> photo<span class="token punctuation">;</span>public String<span class="token punctuation">[</span><span class="token punctuation">]</span> photoFileName<span class="token punctuation">;</span>// 上传文件名。变量命名规格 字段名+FileNamepublic String<span class="token punctuation">[</span><span class="token punctuation">]</span> photoContentType<span class="token punctuation">;</span>// 上传文件的MIME类型。变量命名规格 字段名+ContentType</code></pre><pre class=" language-bash"><code class="language-bash">actionpublic class DownloadAction extends ActionSupport <span class="token punctuation">{</span>    public InputStream inputStream<span class="token punctuation">;</span>    public String filename<span class="token punctuation">;</span>    public String download<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception<span class="token punctuation">{</span>        // 找到文件路径        String path <span class="token operator">=</span> ServletActionContext.getServletContext<span class="token punctuation">(</span><span class="token punctuation">)</span>.getRealPath<span class="token punctuation">(</span><span class="token string">"/WEB-INF/files/1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 包装成流        inputStream <span class="token operator">=</span> new FileInputStream<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        // 设置浏览器接收时文件名        filename <span class="token operator">=</span> <span class="token string">"图片.jpg"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">配置<span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"download"</span> class<span class="token operator">=</span><span class="token string">"com.ittianyu.javaeetest.web.action.DownloadAction"</span> method<span class="token operator">=</span><span class="token string">"download"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"success"</span> type<span class="token operator">=</span><span class="token string">"stream"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--下载类型为 bin--<span class="token operator">></span>        <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"contentType"</span><span class="token operator">></span>application/octet-stream<span class="token operator">&lt;</span>/param<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--下载打开方式--<span class="token operator">></span>        <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"contentDisposition"</span><span class="token operator">></span>attachment<span class="token punctuation">;</span>filename<span class="token operator">=</span>$<span class="token punctuation">{</span>@java.net.URLEncoder@encode<span class="token punctuation">(</span>filename, <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>/param<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--流名称--<span class="token operator">></span>        <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"inputName"</span><span class="token operator">></span>inputStream<span class="token operator">&lt;</span>/param<span class="token operator">></span>    <span class="token operator">&lt;</span>/result<span class="token operator">></span><span class="token operator">&lt;</span>/action<span class="token operator">></span></code></pre><h2 id="Validator"><a href="#Validator" class="headerlink" title="Validator"></a>Validator</h2><p>struts2为我们共内置了16个验证器，且全部是基于字段的验证器</p><h3 id="required"><a href="#required" class="headerlink" title="required"></a>required</h3><p>验证字段的值是不是 null。注意，不是空字符串或空白字符串</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>    <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"required"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>message<span class="token operator">></span>The password field is required<span class="token operator">!</span><span class="token operator">&lt;</span>/message<span class="token operator">></span>        <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>    <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre><h3 id="requiredstring"><a href="#requiredstring" class="headerlink" title="requiredstring"></a>requiredstring</h3><p>验证字段的值既不是null、也不是空白。<br>参数： </p><ul><li>fieldName：要验证的字段名 </li><li>trim：是否去掉首尾空格<pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>  <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"userName"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"requiredstring"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>message<span class="token operator">></span>Please input the userName<span class="token operator">!</span><span class="token operator">&lt;</span>/message<span class="token operator">></span>      <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>  <span class="token operator">&lt;</span>/field<span class="token operator">></span>  <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"password"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"requiredstring"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"trim"</span><span class="token operator">></span>false<span class="token operator">&lt;</span>/param<span class="token operator">></span>          <span class="token operator">&lt;</span>message<span class="token operator">></span>Please input the password<span class="token operator">!</span><span class="token operator">&lt;</span>/message<span class="token operator">></span>      <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>  <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre></li></ul><h3 id="int-amp-long-short"><a href="#int-amp-long-short" class="headerlink" title="int&amp;long short"></a>int&amp;long short</h3><p>验证某个字段的值是否可以被转换为一个整数。还可以验证是否在允许的范围内。</p><p>参数： </p><ul><li>fieldName：要验证的字段名 </li><li>min：允许的最小值 </li><li>max：允许的最大值<br>基于字段的验证<pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>  <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"age"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"int"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"min"</span><span class="token operator">></span>18<span class="token operator">&lt;</span>/param<span class="token operator">></span>          <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"max"</span><span class="token operator">></span>60<span class="token operator">&lt;</span>/param<span class="token operator">></span>          <span class="token operator">&lt;</span>message<span class="token operator">></span>The age must be between <span class="token variable">${min}</span> and <span class="token variable">${max}</span><span class="token operator">&lt;</span>/message<span class="token operator">></span>      <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>  <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre>基于验证器的验证<pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>  <span class="token operator">&lt;</span>validator type<span class="token operator">=</span><span class="token string">"int"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"fieldName"</span><span class="token operator">></span>age<span class="token operator">&lt;</span>/param<span class="token operator">></span>      <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"min"</span><span class="token operator">></span>18<span class="token operator">&lt;</span>/param<span class="token operator">></span>      <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"max"</span><span class="token operator">></span>60<span class="token operator">&lt;</span>/param<span class="token operator">></span>      <span class="token operator">&lt;</span>message<span class="token operator">></span>The age must be between <span class="token variable">${min}</span> and <span class="token variable">${max}</span><span class="token operator">&lt;</span>/message<span class="token operator">></span>  <span class="token operator">&lt;</span>/validator<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre></li></ul><h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><p>用来验证某个字段的值是否可以被转换为一个双精度浮点数。还可验证是否在允许的范围内。</p><p>参数： </p><ul><li>fieldName：要验证的字段名 </li><li>minInclusive：允许的最小值，包含最小值 </li><li>maxInclusive：允许的最大值，包含最大值 </li><li>minExclusive：允许的最小值，不包含最小值 </li><li>maxExclusive：允许的最大值，不包含最大值</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>    <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"percentage1"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"double"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"minInclusive"</span><span class="token operator">></span>20.1<span class="token operator">&lt;</span>/param<span class="token operator">></span>            <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"maxInclusive"</span><span class="token operator">></span>50.1<span class="token operator">&lt;</span>/param<span class="token operator">></span>            <span class="token operator">&lt;</span>message<span class="token operator">></span> The age must be between <span class="token variable">${ minInclusive }</span> and <span class="token variable">${ maxInclusive }</span><span class="token punctuation">(</span>含<span class="token punctuation">)</span><span class="token operator">&lt;</span>/message<span class="token operator">></span>        <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>    <span class="token operator">&lt;</span>/field<span class="token operator">></span>    <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"percentage2"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"double"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"minExclusive"</span><span class="token operator">></span>0.345<span class="token operator">&lt;</span>/param<span class="token operator">></span>            <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"maxExclusive"</span><span class="token operator">></span>99.987<span class="token operator">&lt;</span>/param<span class="token operator">></span>            <span class="token operator">&lt;</span>message<span class="token operator">></span> The age must be between <span class="token variable">${ minExclusive }</span> and <span class="token variable">${ maxExclusive }</span><span class="token punctuation">(</span>不含<span class="token punctuation">)</span><span class="token operator">&lt;</span>/message<span class="token operator">></span>        <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>    <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre><h3 id="date"><a href="#date" class="headerlink" title="date"></a>date</h3><p>用来确保给定的日期字段的值在指定的范围内。</p><p>参数： </p><ul><li>fieldName：要验证的字段名 </li><li>min：允许的最小值，包含最小值 </li><li>max：允许的最大值，包含最大值</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>    <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"birthday"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"date"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"min"</span><span class="token operator">></span>2011-01-01<span class="token operator">&lt;</span>/param<span class="token operator">></span>            <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"max"</span><span class="token operator">></span>2011-12-31<span class="token operator">&lt;</span>/param<span class="token operator">></span>            <span class="token operator">&lt;</span>message<span class="token operator">></span>日期必须为2011年<span class="token operator">&lt;</span>/message<span class="token operator">></span>        <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>    <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre><h3 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h3><p>用于验证是否满足一个OGNL表达式。这是一个非字段的验证。只有给定的参数的返回值是true时才能验证通过。验证不通过时产生一个动作错误，因此要显示该错误，需要使用标签。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>    <span class="token operator">&lt;</span>validator type<span class="token operator">=</span><span class="token string">"expression"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"expression"</span><span class="token operator">></span>            maxNumber<span class="token operator">></span>minNumber        <span class="token operator">&lt;</span>/param<span class="token operator">></span>        <span class="token operator">&lt;</span>message<span class="token operator">></span>最大值必须大于最小值<span class="token operator">&lt;</span>/message<span class="token operator">></span>    <span class="token operator">&lt;</span>/validator<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre><h3 id="field-expression"><a href="#field-expression" class="headerlink" title="field expression"></a>field expression</h3><p>用于验证某个字段是否满足一个OGNL表达式。这是一个基于字段的验证。只有给定的参数的返回值是true时才能验证通过。验证不通过时产生一个字段错误。<br>参数： </p><ul><li>fieldName：要验证的字段名 </li><li>expression：OGNL表达式，只有该表达式为true才能验证通过</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>    <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"maxNumber"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"fieldexpression"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"expression"</span><span class="token operator">></span>            maxNumber<span class="token operator">></span>100        <span class="token operator">&lt;</span>/param<span class="token operator">></span>        <span class="token operator">&lt;</span>message<span class="token operator">></span>最大值必须大于最小值1<span class="token operator">&lt;</span>/message<span class="token operator">></span>        <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>    <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre><h3 id="email"><a href="#email" class="headerlink" title="email"></a>email</h3><p>用来验证给定的字段是否符合一个Email的规范。它的正则表达式为<br>\b(^<a href="\\.[_A-Za-z0-9-]">_A-Za-z0-9-</a>*@([A-Za-z0-9-])+((\.com)|(\.net)|(\.org)|(\.info)|(\.edu)|(\.mil)|(\.gov)|(\.biz)|(\.ws)|(\.us)|(\.tv)|(\.cc)|(\.aero)|(\.arpa)|(\.coop)|(\.int)|(\.jobs)|(\.museum)|(\.name)|(\.pro)|(\.travel)|(\.nato)|(\..{2,3})|(\..{2,3}\..{2,3}))$)\b</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>    <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>message<span class="token operator">></span>请输入正确的邮箱<span class="token operator">&lt;</span>/message<span class="token operator">></span>        <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>    <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><p>来验证给定的字段值是否是一个合法的URL地址</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>    <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"url"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>message<span class="token operator">></span>请输入正确的地址<span class="token operator">&lt;</span>/message<span class="token operator">></span>        <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>    <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre><h3 id="visitor"><a href="#visitor" class="headerlink" title="visitor"></a>visitor</h3><p>该验证程序可以提高代码的可重用性，你可以利用它把同一个验证程序配置文件用于多个动作</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>    <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"streetName"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"requiredstring"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>message<span class="token operator">></span>请输入正确街道地址<span class="token operator">&lt;</span>/message<span class="token operator">></span>        <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>    <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span><span class="token operator">&lt;</span>validators<span class="token operator">></span>    <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"address"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"visitor"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>message<span class="token operator">></span>Address:<span class="token operator">&lt;</span>/message<span class="token operator">></span>        <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>    <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre><h3 id="stringlength"><a href="#stringlength" class="headerlink" title="stringlength"></a>stringlength</h3><p>用来验证一个非空的字段值是不是有足够的长度。</p><h3 id="regex"><a href="#regex" class="headerlink" title="regex"></a>regex</h3><p>用来检查给定字段是否与给定的正则表达式相匹配。正则表达式的详细内容可以参考 JDK 的 java.util.regex.Pattern 类。</p><p>参数： </p><ul><li>fieldname：要验证的字段名 </li><li>expression：正则表达式 </li><li>caseSensitive：是否区分大小写的情况，默认 true </li><li>trim：是否去掉首尾空格，默认 true<pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>validators<span class="token operator">></span>  <span class="token operator">&lt;</span>field name<span class="token operator">=</span><span class="token string">"userName"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>field-validator type<span class="token operator">=</span><span class="token string">"regex"</span><span class="token operator">></span>          <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"expression"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token punctuation">[</span>CDATA<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">[</span>aAbBcCdD<span class="token punctuation">]</span><span class="token punctuation">[</span>123<span class="token punctuation">]</span><span class="token punctuation">[</span>eEfFgG<span class="token punctuation">]</span><span class="token punctuation">[</span>456<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>          <span class="token operator">&lt;</span>message<span class="token operator">></span> 用户名必须符合规范<span class="token operator">&lt;</span>/message<span class="token operator">></span>      <span class="token operator">&lt;</span>/field-validator<span class="token operator">></span>  <span class="token operator">&lt;</span>/field<span class="token operator">></span><span class="token operator">&lt;</span>/validators<span class="token operator">></span></code></pre><h2 id="拦截器Interceptor"><a href="#拦截器Interceptor" class="headerlink" title="拦截器Interceptor"></a>拦截器Interceptor</h2>Struts2 拦截器在访问某个 Action 方法之前或之后实施拦截, Struts2 拦截器是可插拔的, 拦截器是 AOP 的一种实现．</li></ul><h3 id="常用拦截器"><a href="#常用拦截器" class="headerlink" title="常用拦截器"></a>常用拦截器</h3><ol><li>conversionError：将错误从ActionContext中添加到Action的属性字段中</li><li>fileUpload：提供文件上传功能</li><li>i18n：记录用户选择的locale</li><li>model-driven：如果一个类实现了ModelDriven，将getModel得到的结果放在Value Stack中</li><li>params：将请求中的参数设置到Action中去</li><li>servletConfig：提供访问HttpServletRequest和HttpServletResponse的方法，以Map的方式访问</li><li>token：避免重复提交</li><li>validation：使用 action-validation.xml文件中定义的内容校验提交的数据</li><li>workflow：调用 Action 的 validate 方法，一旦有错误返回，重新定位到 INPUT 视图</li></ol><h3 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h3><pre class=" language-bash"><code class="language-bash">public class PermissionInterceptor implements Interceptor <span class="token punctuation">{</span> private static final long serialVersionUID <span class="token operator">=</span> -5178310397732210602L<span class="token punctuation">;</span> public void destroy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> public void init<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span> public String intercept<span class="token punctuation">(</span>ActionInvocation invocation<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span> System.out.println<span class="token punctuation">(</span><span class="token string">"进入拦截器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> if<span class="token punctuation">(</span>session里存在用户<span class="token punctuation">)</span><span class="token punctuation">{</span> String result <span class="token operator">=</span> invocation.invoke<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>else<span class="token punctuation">{</span> <span class="token keyword">return</span> “logon”<span class="token punctuation">;</span> <span class="token punctuation">}</span> //System.out.println<span class="token punctuation">(</span><span class="token string">"返回值:"</span>+ result<span class="token punctuation">)</span><span class="token punctuation">;</span> //return result<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre><p>在 struts.xml 文件中配置自定义的拦截器 </p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>package name<span class="token operator">=</span><span class="token string">"itcast"</span> namespace<span class="token operator">=</span><span class="token string">"/test"</span> extends<span class="token operator">=</span><span class="token string">"struts-default"</span><span class="token operator">></span> <span class="token operator">&lt;</span>interceptors<span class="token operator">></span> <span class="token operator">&lt;</span>interceptor name<span class="token operator">=</span>“permission<span class="token string">" class="</span>cn.itcast.aop.PermissionInterceptor<span class="token string">" /> &lt;interceptor-stack name="</span>permissionStack<span class="token string">"> &lt;interceptor-ref name="</span>defaultStack<span class="token string">" /> &lt;interceptor-ref name="</span> permission <span class="token string">" /> &lt;/interceptor-stack> &lt;/interceptors> &lt;action name="</span>helloworld_*<span class="token string">" class="</span>cn.itcast.action.HelloWorldAction<span class="token string">" method="</span><span class="token punctuation">{</span>1<span class="token punctuation">}</span><span class="token string">"> &lt;result name="</span>success<span class="token string">">/WEB-INF/page/hello.jsp&lt;/result> &lt;interceptor-ref name="</span>permissionStack"/<span class="token operator">></span> <span class="token operator">&lt;</span>/action<span class="token operator">></span> <span class="token operator">&lt;</span>/package<span class="token operator">></span> </code></pre><h2 id="Action响应ajax请求"><a href="#Action响应ajax请求" class="headerlink" title="Action响应ajax请求"></a>Action响应ajax请求</h2><h3 id="发送ajax请求使用stream进行响应"><a href="#发送ajax请求使用stream进行响应" class="headerlink" title="发送ajax请求使用stream进行响应"></a>发送ajax请求使用stream进行响应</h3><pre class=" language-bash"><code class="language-bash">定义Actionpublic class UserAction <span class="token punctuation">{</span>        private String <span class="token function">uname</span><span class="token punctuation">;</span>        //声明输入流对象     private InputStream inputStream<span class="token punctuation">;</span>     public InputStream getInputStream<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"-------------getInputStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> inputStream<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      public String getUname<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token function">uname</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      public void setUname<span class="token punctuation">(</span>String uname<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         this.uname <span class="token operator">=</span> <span class="token function">uname</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      //org.apache.struts2.dispatcher.StreamResult     /**验证用户名的唯一性***/     public String unameIsExists<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"----------unameIsExists"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list.add<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         list.add<span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         String msg<span class="token operator">=</span>null<span class="token punctuation">;</span>        if<span class="token punctuation">(</span>list.contains<span class="token punctuation">(</span>uname<span class="token punctuation">))</span>         <span class="token punctuation">{</span>             msg<span class="token operator">=</span><span class="token string">"用户名可用..."</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span>         <span class="token punctuation">{</span>             msg<span class="token operator">=</span><span class="token string">"用户名可用..."</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         //将msg响应到客户端,将msg中的数据封装到InputStream         try         <span class="token punctuation">{</span>             inputStream<span class="token operator">=</span>new ByteArrayInputStream<span class="token punctuation">(</span>msg.getBytes<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             // TODO Auto-generated catch block             e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token string">"ajax"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">配置UserAction <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE struts PUBLIC      <span class="token string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span>      <span class="token string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span><span class="token operator">></span> <span class="token operator">&lt;</span>struts<span class="token operator">></span>     <span class="token operator">&lt;</span>package name<span class="token operator">=</span><span class="token string">"user"</span> namespace<span class="token operator">=</span><span class="token string">"/"</span> extends<span class="token operator">=</span><span class="token string">"struts-default"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"userAction_*"</span> class<span class="token operator">=</span><span class="token string">"com.guangsoft.action.UserAction"</span>             method<span class="token operator">=</span><span class="token string">"{1}"</span><span class="token operator">></span>             <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"ajax"</span> type<span class="token operator">=</span><span class="token string">"stream"</span><span class="token operator">></span>                 <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"inputName"</span><span class="token operator">></span>inputStream<span class="token operator">&lt;</span>/param<span class="token operator">></span>             <span class="token operator">&lt;</span>/result<span class="token operator">></span>         <span class="token operator">&lt;</span>/action<span class="token operator">></span>     <span class="token operator">&lt;</span>/package<span class="token operator">></span> <span class="token operator">&lt;</span>/struts<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">实现UI页面<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"js/jquery-1.8.3.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span>/script<span class="token operator">></span> <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>     <span class="token keyword">function</span> sendReuqest<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>     var uname<span class="token operator">=</span><span class="token punctuation">$(</span><span class="token string">"#uname"</span><span class="token punctuation">)</span>.val<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     $.post<span class="token punctuation">(</span><span class="token string">"userAction_unameIsExists.action"</span>,<span class="token string">"uname="</span>+uname,function<span class="token punctuation">(</span>data<span class="token punctuation">)</span>     <span class="token punctuation">{</span>     <span class="token punctuation">$(</span><span class="token string">"#sp"</span><span class="token punctuation">)</span>.html<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span> <span class="token operator">&lt;</span>body<span class="token operator">></span>     <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"uname"</span> onblur<span class="token operator">=</span><span class="token string">"sendReuqest()"</span> /<span class="token operator">></span>     <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"sp"</span><span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span> <span class="token operator">&lt;</span>/body<span class="token operator">></span> 当请求发送到服务器上，先执行处理请求的方法，通过处理请求的方法的返回值，查找对应的result,如果result的type属性为stream,自动调用inputName属性对应的值对应的get方法，获得流对象。</code></pre><h3 id="发送ajax请求使用json响应"><a href="#发送ajax请求使用json响应" class="headerlink" title="发送ajax请求使用json响应"></a>发送ajax请求使用json响应</h3><pre class=" language-bash"><code class="language-bash">加入jar包struts2-json-plugin-2.3.16.1.jar建立Action public class UserAction2 <span class="token punctuation">{</span>      UsersDao dao <span class="token operator">=</span> new UsersDaoImpl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     private Users user<span class="token punctuation">;</span>     private List<span class="token operator">&lt;</span>Users<span class="token operator">></span> ulist<span class="token punctuation">;</span>     //将ulist集合作为json对象的集合响应到客户端     public List<span class="token operator">&lt;</span>Users<span class="token operator">></span> getUlist<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"-----------getUlist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> ulist<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     public Users getUser<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         <span class="token keyword">return</span> user<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     public void setUser<span class="token punctuation">(</span>Users user<span class="token punctuation">)</span>     <span class="token punctuation">{</span>         this.user <span class="token operator">=</span> user<span class="token punctuation">;</span>     <span class="token punctuation">}</span>        //org.apache.struts2.json.JSONInterceptor     /***验证用户名是否可以：将不可用的用户名全部响应到客户端**/     public String unameExistsList<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         System.out.println<span class="token punctuation">(</span><span class="token string">"-------------unameExistsList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         ulist<span class="token operator">=</span>dao.selectUanemByUname<span class="token punctuation">(</span>user.getUname<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>         //将ulist集合作为json对象的集合响应到客户端         <span class="token keyword">return</span> <span class="token string">"ajax"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><pre class=" language-bash"><code class="language-bash">建立UI页面  <span class="token operator">&lt;</span>head<span class="token operator">></span>     <span class="token operator">&lt;</span>script<span class="token operator">></span>         <span class="token keyword">function</span> sendReuqest<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             var uname<span class="token operator">=</span><span class="token punctuation">$(</span><span class="token string">"#uname"</span><span class="token punctuation">)</span>.val<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             $.post<span class="token punctuation">(</span><span class="token string">"userAction2_unameExistsList.action"</span>,<span class="token string">"user.uname="</span>+uname,function<span class="token punctuation">(</span>data<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 //alert<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                 var div<span class="token operator">=</span><span class="token punctuation">$(</span><span class="token string">"#div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 div.html<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //清空                 //对json集合进行遍历                 <span class="token variable"><span class="token variable">$(</span>data<span class="token variable">)</span></span>.each<span class="token punctuation">(</span>function<span class="token punctuation">(</span>index,item<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                     //alert<span class="token punctuation">(</span>index+<span class="token string">" "</span>+item<span class="token punctuation">)</span><span class="token punctuation">;</span>                     //div.html<span class="token punctuation">(</span>item.uname<span class="token punctuation">)</span><span class="token punctuation">;</span>                     div.append<span class="token punctuation">(</span><span class="token string">"                     &lt;div>"</span>+item.uname+<span class="token string">"&lt;/div>                     "</span><span class="token punctuation">)</span>                 <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token operator">&lt;</span>/script<span class="token operator">></span> <span class="token operator">&lt;</span>/head<span class="token operator">></span> <span class="token operator">&lt;</span>body<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"uname"</span> onblur<span class="token operator">=</span><span class="token string">"sendReuqest()"</span>/<span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"sp"</span><span class="token operator">></span><span class="token operator">&lt;</span>/span<span class="token operator">></span> --<span class="token operator">></span>     <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"uname"</span> onkeyup<span class="token operator">=</span><span class="token string">"sendReuqest()"</span> /<span class="token operator">></span>     <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">"border:  solid 1px red; width: 20%;margin-top: 5px"</span> id<span class="token operator">=</span><span class="token string">"div"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>/div<span class="token operator">></span> <span class="token operator">&lt;</span>/body<span class="token operator">></span></code></pre><p>将需要响应到客户端的数据封装为inputStream对象</p><p> 将msg的内容封装为InputStream对象</p><p> 结果的类型必须为stream，将流对象的名字赋值给inputName属性</p><p> 将需要使用json格式响应到客户端的数据封装到list集合</p><p> 给ulist属性赋值，自动调用ulist对应的get方法</p><h2 id="Struts2的零配置-注解"><a href="#Struts2的零配置-注解" class="headerlink" title="Struts2的零配置(注解)"></a>Struts2的零配置(注解)</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>1.struts2通过一个插件：struts2-convention-plugin-2.3.20.jar</p><ol start="2"><li>该插件可以完全抛弃struts2的xml配置文件，甚至连注解也不用写<br>在 Action 类上加上 @ParentPackage(“struts-default”)<br>在对应的方法上加上<pre class=" language-bash"><code class="language-bash">@Action<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span>, results <span class="token operator">=</span> <span class="token punctuation">{</span>        @Result<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"success"</span>, location<span class="token operator">=</span><span class="token string">"/hello.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-bash"><code class="language-bash">@ParentPackage<span class="token punctuation">(</span><span class="token string">"struts-default"</span><span class="token punctuation">)</span>public class HelloAction extends ActionSupport <span class="token punctuation">{</span> @Action<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"hello"</span>, results <span class="token operator">=</span> <span class="token punctuation">{</span>            @Result<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"success"</span>, location<span class="token operator">=</span><span class="token string">"/hello.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> public String hello<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>     System.out.println<span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h3 id="向-Action-传递参数"><a href="#向-Action-传递参数" class="headerlink" title="向 Action 传递参数"></a>向 Action 传递参数</h3><p>登录是很常见的 action，这个时候一般要向服务器传递 username, password 等。</p><pre class=" language-bash"><code class="language-bash">public class User <span class="token punctuation">{</span>    private String username<span class="token punctuation">;</span>    private String password<span class="token punctuation">;</span>    public String getUsername<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUsername<span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getPassword<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setPassword<span class="token punctuation">(</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>创建一个 UserAction 来处理请求，简单起见，使用注解方式配置</p><pre class=" language-bash"><code class="language-bash">@ParentPackage<span class="token punctuation">(</span><span class="token string">"struts-default"</span><span class="token punctuation">)</span>public class UserAction extends ActionSupport implements ModelDriven<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">{</span>    private User user <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @Action<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"login"</span>, results <span class="token operator">=</span> <span class="token punctuation">{</span>               @Result<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"success"</span>, location<span class="token operator">=</span><span class="token string">"/home.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    public String login<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span>user.getUsername<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>user.getPassword<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public User getModel<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实现 ModelDriven 方法，返回 user。<br>然后在执行 login 方法之前，ModelDriven 拦截器会给 user 设置请求提交的值。</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><pre class=" language-bash"><code class="language-bash">tag1.jsp<span class="token operator">&lt;</span>%@ page language<span class="token operator">=</span><span class="token string">"java"</span> contentType<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span>    pageEncoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>%<span class="token operator">></span>   <span class="token operator">&lt;</span>%@ taglib prefix<span class="token operator">=</span><span class="token string">"s"</span> uri<span class="token operator">=</span><span class="token string">"/struts-tags"</span> %<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html PUBLIC <span class="token string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="token string">"http://www.w3.org/TR/html4/loose.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span><span class="token operator">&lt;</span>meta http-equiv<span class="token operator">=</span><span class="token string">"Content-Type"</span> content<span class="token operator">=</span><span class="token string">"text/html; charset=UTF-8"</span><span class="token operator">></span><span class="token operator">&lt;</span>title<span class="token operator">></span>Insert title here<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 遍历标签 iterator --<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- ------------------------------------- --<span class="token operator">></span><span class="token operator">&lt;</span>s:iterator value<span class="token operator">=</span><span class="token string">"#list"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>s:property /<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>/s:iterator<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- ------------------------------------- --<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>s:iterator value<span class="token operator">=</span><span class="token string">"#list"</span> var<span class="token operator">=</span><span class="token string">"name"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>s:property value<span class="token operator">=</span><span class="token string">"#name"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>/s:iterator<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- ------------------------------------- --<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>s:iterator begin<span class="token operator">=</span><span class="token string">"1"</span> end<span class="token operator">=</span><span class="token string">"100"</span> step<span class="token operator">=</span><span class="token string">"1"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>s:property /<span class="token operator">></span><span class="token operator">|</span><span class="token operator">&lt;</span>/s:iterator<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- ------------------if <span class="token keyword">else</span> elseif------------------- --<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>s:if test<span class="token operator">=</span><span class="token string">"#list.size()==4"</span><span class="token operator">></span>    list长度为4<span class="token operator">!</span><span class="token operator">&lt;</span>/s:if<span class="token operator">></span><span class="token operator">&lt;</span>s:elseif test<span class="token operator">=</span><span class="token string">"#list.size()==3"</span><span class="token operator">></span>    list长度为3<span class="token operator">!</span><span class="token operator">&lt;</span>/s:elseif<span class="token operator">></span><span class="token operator">&lt;</span>s:else<span class="token operator">></span>    list不3不4<span class="token operator">!</span><span class="token operator">&lt;</span>/s:else<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- ------------------property 配合ognl表达式页面取值 ------------------- --<span class="token operator">></span><span class="token operator">&lt;</span>hr<span class="token operator">></span><span class="token operator">&lt;</span>s:property value<span class="token operator">=</span><span class="token string">"#list.size()"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>s:property value<span class="token operator">=</span><span class="token string">"#session.user.name"</span> /<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">package cn.itcast.b_tag<span class="token punctuation">;</span><span class="token function">import</span> java.util.ArrayList<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span><span class="token function">import</span> com.opensymphony.xwork2.ActionContext<span class="token punctuation">;</span><span class="token function">import</span> com.opensymphony.xwork2.ActionSupport<span class="token punctuation">;</span>public class Demo2Action extends ActionSupport <span class="token punctuation">{</span>    public String execute<span class="token punctuation">(</span><span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list.add<span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list.add<span class="token punctuation">(</span><span class="token string">"jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list.add<span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list.add<span class="token punctuation">(</span><span class="token string">"rose"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list.add<span class="token punctuation">(</span><span class="token string">"hqy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ActionContext.getContext<span class="token punctuation">(</span><span class="token punctuation">)</span>.put<span class="token punctuation">(</span><span class="token string">"list"</span>, list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SUCCESS<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE struts PUBLIC    <span class="token string">"-//Apache Software Foundation//DTD Struts Configuration 2.3//EN"</span>    <span class="token string">"http://struts.apache.org/dtds/struts-2.3.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>struts<span class="token operator">></span>    <span class="token operator">&lt;</span>package name<span class="token operator">=</span><span class="token string">"tag"</span> namespace<span class="token operator">=</span><span class="token string">"/"</span> extends<span class="token operator">=</span><span class="token string">"struts-default"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>action name<span class="token operator">=</span><span class="token string">"Demo2Action"</span> class<span class="token operator">=</span><span class="token string">"cn.itcast.b_tag.Demo2Action"</span>            method<span class="token operator">=</span><span class="token string">"execute"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>result name<span class="token operator">=</span><span class="token string">"success"</span> type<span class="token operator">=</span><span class="token string">"dispatcher"</span><span class="token operator">></span>/tag1.jsp<span class="token operator">&lt;</span>/result<span class="token operator">></span>        <span class="token operator">&lt;</span>/action<span class="token operator">></span>    <span class="token operator">&lt;</span>/package<span class="token operator">></span><span class="token operator">&lt;</span>/struts<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate 总结</title>
      <link href="/2018/10/25/hibernate-zong-jie/"/>
      <url>/2018/10/25/hibernate-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Hibernate基本使用"><a href="#Hibernate基本使用" class="headerlink" title="Hibernate基本使用"></a>Hibernate基本使用</h2><h3 id="主配置"><a href="#主配置" class="headerlink" title="主配置"></a>主配置</h3><p>1.导包，导入约束 <br><br>2.主配置文件hibernate.cfg.xml</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE hibernate-configuration PUBLIC    <span class="token string">"-//Hibernate/Hibernate Configuration DTD 3.0//EN"</span>    <span class="token string">"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>hibernate-configuration<span class="token operator">></span>    <span class="token operator">&lt;</span>session-factory<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--         <span class="token comment" spellcheck="true">#hibernate.dialect org.hibernate.dialect.MySQLDialect</span>        <span class="token comment" spellcheck="true">#hibernate.dialect org.hibernate.dialect.MySQLInnoDBDialect</span>        <span class="token comment" spellcheck="true">#hibernate.dialect org.hibernate.dialect.MySQLMyISAMDialect</span>        <span class="token comment" spellcheck="true">#hibernate.connection.driver_class com.mysql.jdbc.Driver</span>        <span class="token comment" spellcheck="true">#hibernate.connection.url jdbc:mysql:///test</span>        <span class="token comment" spellcheck="true">#hibernate.connection.username gavin</span>        <span class="token comment" spellcheck="true">#hibernate.connection.password</span>         --<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>-- 数据库驱动 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.connection.driver_class"</span><span class="token operator">></span>com.mysql.jdbc.Driver<span class="token operator">&lt;</span>/property<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>-- 数据库url --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.connection.url"</span><span class="token operator">></span>jdbc:mysql:///hibernate_32<span class="token operator">&lt;</span>/property<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>-- 数据库连接用户名 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.connection.username"</span><span class="token operator">></span>root<span class="token operator">&lt;</span>/property<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>-- 数据库连接密码 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.connection.password"</span><span class="token operator">></span>1234<span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 数据库方言            不同的数据库中,sql语法略有区别. 指定方言可以让hibernate框架在生成sql语句时.针对数据库的方言生成.            sql99标准: DDL 定义语言  库表的增删改查                      DCL 控制语言  事务 权限                      DML 操纵语言  增删改查            注意: MYSQL在选择方言时,请选择最短的方言.         --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.dialect"</span><span class="token operator">></span>org.hibernate.dialect.MySQLDialect<span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- <span class="token comment" spellcheck="true">#hibernate.show_sql true </span>             <span class="token comment" spellcheck="true">#hibernate.format_sql true</span>        --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 将hibernate生成的sql语句打印到控制台 --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.show_sql"</span><span class="token operator">></span>true<span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 将hibernate生成的sql语句格式化<span class="token punctuation">(</span>语法缩进<span class="token punctuation">)</span> --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.format_sql"</span><span class="token operator">></span>true<span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--         <span class="token comment" spellcheck="true">## auto schema export  自动导出表结构. 自动建表</span>        <span class="token comment" spellcheck="true">#hibernate.hbm2ddl.auto create        自动建表.每次框架运行都会创建新的表.以前表将会被覆盖,表数据会丢失.(开发环境中测试使用)</span>        <span class="token comment" spellcheck="true">#hibernate.hbm2ddl.auto create-drop 自动建表.每次框架运行结束都会将所有表删除.(开发环境中测试使用)</span>        <span class="token comment" spellcheck="true">#hibernate.hbm2ddl.auto update(推荐使用) 自动生成表.如果已经存在不会再生成.如果表有变动.自动更新表(不会删除任何数据).</span>        <span class="token comment" spellcheck="true">#hibernate.hbm2ddl.auto validate    校验.不自动生成表.每次启动会校验数据库中表是否正确.校验失败.</span>         --<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.hbm2ddl.auto"</span><span class="token operator">></span>update<span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 引入orm元数据            路径书写: 填写src下的路径         --<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定hibernate操作数据库时的隔离级别             <span class="token comment" spellcheck="true">#hibernate.connection.isolation 1|2|4|8        </span>            0001    1    读未提交            0010    2    读已提交            0100    4    可重复读            1000    8    串行化         --<span class="token operator">></span>         <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.connection.isolation"</span><span class="token operator">></span>4<span class="token operator">&lt;</span>/property<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>-- 指定session与当前线程绑定 --<span class="token operator">></span>         <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"hibernate.current_session_context_class"</span><span class="token operator">></span>thread<span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>mapping resource<span class="token operator">=</span><span class="token string">"cn/itheima/domain/Customer.hbm.xml"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>/session-factory<span class="token operator">></span><span class="token operator">&lt;</span>/hibernate-configuration<span class="token operator">></span></code></pre><h3 id="GenericEncodingFilter-java-乱码解决"><a href="#GenericEncodingFilter-java-乱码解决" class="headerlink" title="GenericEncodingFilter.java 乱码解决"></a>GenericEncodingFilter.java 乱码解决</h3><pre class=" language-bash"><code class="language-bash"> package cn.itheima.web<span class="token punctuation">;</span><span class="token function">import</span> java.io.IOException<span class="token punctuation">;</span><span class="token function">import</span> java.lang.reflect.InvocationTargetException<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.ServletException<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.http.HttpServlet<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.http.HttpServletRequest<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.http.HttpServletResponse<span class="token punctuation">;</span><span class="token function">import</span> org.apache.commons.beanutils.BeanUtils<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.domain.Customer<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.service.CustomerService<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.service.impl.CustomerServiceImpl<span class="token punctuation">;</span>/** * Servlet implementation class AddCustomerServlet */public class AddCustomerServlet extends HttpServlet <span class="token punctuation">{</span>    private static final long serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    private CustomerService customerService  <span class="token operator">=</span> new CustomerServiceImpl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    protected void doGet<span class="token punctuation">(</span>HttpServletRequest request, HttpServletResponse response<span class="token punctuation">)</span> throws ServletException, IOException <span class="token punctuation">{</span>        //1 获得参数并封装到Customer对象        Customer c <span class="token operator">=</span> new Customer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            BeanUtils.populate<span class="token punctuation">(</span>c, request.getParameterMap<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>IllegalAccessException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InvocationTargetException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //2 调用Service保存客户        customerService  .save<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 重定向到客户列表        response.sendRedirect<span class="token punctuation">(</span>request.getContextPath<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"/ListCustomerServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    protected void doPost<span class="token punctuation">(</span>HttpServletRequest request, HttpServletResponse response<span class="token punctuation">)</span> throws ServletException, IOException <span class="token punctuation">{</span>        doGet<span class="token punctuation">(</span>request, response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h3><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>web-app xmlns:xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span> xmlns<span class="token operator">=</span><span class="token string">"http://java.sun.com/xml/ns/javaee"</span> xsi:schemaLocation<span class="token operator">=</span><span class="token string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> id<span class="token operator">=</span><span class="token string">"WebApp_ID"</span> version<span class="token operator">=</span><span class="token string">"2.5"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>display-name<span class="token operator">></span>hibernate_crm<span class="token operator">&lt;</span>/display-name<span class="token operator">></span>  <span class="token operator">&lt;</span>welcome-file-list<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>index.html<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>index.htm<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>index.jsp<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>default.html<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>default.htm<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>    <span class="token operator">&lt;</span>welcome-file<span class="token operator">></span>default.jsp<span class="token operator">&lt;</span>/welcome-file<span class="token operator">></span>  <span class="token operator">&lt;</span>/welcome-file-list<span class="token operator">></span>   <span class="token operator">&lt;</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>encodeFilter<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>    <span class="token operator">&lt;</span>filter-class<span class="token operator">></span>cn.itheima.web.filter.GenericEncodingFilter<span class="token operator">&lt;</span>/filter-class<span class="token operator">></span>  <span class="token operator">&lt;</span>/filter<span class="token operator">></span>  <span class="token operator">&lt;</span>filter-mapping<span class="token operator">></span>    <span class="token operator">&lt;</span>filter-name<span class="token operator">></span>encodeFilter<span class="token operator">&lt;</span>/filter-name<span class="token operator">></span>    <span class="token operator">&lt;</span>url-pattern<span class="token operator">></span>/*<span class="token operator">&lt;</span>/url-pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>/filter-mapping<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">></span>    <span class="token operator">&lt;</span>description<span class="token operator">></span><span class="token operator">&lt;</span>/description<span class="token operator">></span>    <span class="token operator">&lt;</span>display-name<span class="token operator">></span>AddCustomerServlet<span class="token operator">&lt;</span>/display-name<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet-name<span class="token operator">></span>AddCustomerServlet<span class="token operator">&lt;</span>/servlet-name<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet-class<span class="token operator">></span>cn.itheima.web.AddCustomerServlet<span class="token operator">&lt;</span>/servlet-class<span class="token operator">></span>  <span class="token operator">&lt;</span>/servlet<span class="token operator">></span>  <span class="token operator">&lt;</span>servlet-mapping<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet-name<span class="token operator">></span>AddCustomerServlet<span class="token operator">&lt;</span>/servlet-name<span class="token operator">></span>    <span class="token operator">&lt;</span>url-pattern<span class="token operator">></span>/AddCustomerServlet<span class="token operator">&lt;</span>/url-pattern<span class="token operator">></span>  <span class="token operator">&lt;</span>/servlet-mapping<span class="token operator">></span><span class="token operator">&lt;</span>/web-app<span class="token operator">></span></code></pre><h3 id="Customer-java-模型"><a href="#Customer-java-模型" class="headerlink" title="Customer.java 模型"></a>Customer.java 模型</h3><pre class=" language-bash"><code class="language-bash">package cn.itheima.domain<span class="token punctuation">;</span>public class Customer <span class="token punctuation">{</span>    /*     * CREATE TABLE <span class="token variable"><span class="token variable">`</span>cst_customer<span class="token variable">`</span></span> <span class="token punctuation">(</span>      <span class="token variable"><span class="token variable">`</span>cust_id<span class="token variable">`</span></span> BIGINT<span class="token punctuation">(</span>32<span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class="token string">'客户编号(主键)'</span>,      <span class="token variable"><span class="token variable">`</span>cust_name<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>32<span class="token punctuation">)</span> NOT NULL COMMENT <span class="token string">'客户名称(公司名称)'</span>,      <span class="token variable"><span class="token variable">`</span>cust_source<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>32<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'客户信息来源'</span>,      <span class="token variable"><span class="token variable">`</span>cust_industry<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>32<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'客户所属行业'</span>,      <span class="token variable"><span class="token variable">`</span>cust_level<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>32<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'客户级别'</span>,      <span class="token variable"><span class="token variable">`</span>cust_linkman<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>64<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人'</span>,      <span class="token variable"><span class="token variable">`</span>cust_phone<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>64<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'固定电话'</span>,      <span class="token variable"><span class="token variable">`</span>cust_mobile<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>16<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'移动电话'</span>,      PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>cust_id<span class="token variable">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> ENGINE<span class="token operator">=</span>INNODB AUTO_INCREMENT<span class="token operator">=</span>1 DEFAULT CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>     */    private Long cust_id<span class="token punctuation">;</span>    private String cust_name<span class="token punctuation">;</span>    private String cust_source<span class="token punctuation">;</span>    private String cust_industry<span class="token punctuation">;</span>    private String cust_level<span class="token punctuation">;</span>    private String cust_linkman<span class="token punctuation">;</span>    private String cust_phone<span class="token punctuation">;</span>    private String cust_mobile<span class="token punctuation">;</span>    public Long getCust_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_id<span class="token punctuation">(</span>Long cust_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_id <span class="token operator">=</span> cust_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_name<span class="token punctuation">(</span>String cust_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_name <span class="token operator">=</span> cust_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_source<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_source<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_source<span class="token punctuation">(</span>String cust_source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_source <span class="token operator">=</span> cust_source<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_industry<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_industry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_industry<span class="token punctuation">(</span>String cust_industry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_industry <span class="token operator">=</span> cust_industry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_level<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_level<span class="token punctuation">(</span>String cust_level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_level <span class="token operator">=</span> cust_level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_linkman<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_linkman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_linkman<span class="token punctuation">(</span>String cust_linkman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_linkman <span class="token operator">=</span> cust_linkman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_phone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_phone<span class="token punctuation">(</span>String cust_phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_phone <span class="token operator">=</span> cust_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_mobile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_mobile<span class="token punctuation">(</span>String cust_mobile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_mobile <span class="token operator">=</span> cust_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public String toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer [cust_id="</span> + cust_id + <span class="token string">", cust_name="</span> + cust_name + <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Customer-hbm-xml"><a href="#Customer-hbm-xml" class="headerlink" title="Customer.hbm.xml"></a>Customer.hbm.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE hibernate-mapping PUBLIC     <span class="token string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span>    <span class="token string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>hibernate-mapping package<span class="token operator">=</span><span class="token string">"cn.itheima.domain"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>class name<span class="token operator">=</span><span class="token string">"Customer"</span> table<span class="token operator">=</span><span class="token string">"cst_customer"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>id name<span class="token operator">=</span><span class="token string">"cust_id"</span>  <span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span>-- generator:主键生成策略.就是每条记录录入时,主键的生成规则.<span class="token punctuation">(</span>7个<span class="token punctuation">)</span>                    identity <span class="token keyword">:</span> 主键自增.由数据库来维护主键值.录入时不需要指定主键.                    sequence: Oracle中的主键生成策略.                    increment<span class="token punctuation">(</span>了解<span class="token punctuation">)</span>: 主键自增.由hibernate来维护.每次插入前会先查询表中id最大值.+1作为新主键值.                                hilo<span class="token punctuation">(</span>了解<span class="token punctuation">)</span>: 高低位算法.主键自增.由hibernate来维护.开发时不使用.                    native:hilo+sequence+identity 自动三选一策略.                    uuid: 产生随机字符串作为主键. 主键类型必须为string 类型.                    assigned:自然主键生成策略. hibernate不会管理主键值.由开发人员自己录入.             --<span class="token operator">></span>            <span class="token operator">&lt;</span>generator class<span class="token operator">=</span><span class="token string">"increment"</span><span class="token operator">></span><span class="token operator">&lt;</span>/generator<span class="token operator">></span>        <span class="token operator">&lt;</span>/id<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_name"</span> column<span class="token operator">=</span><span class="token string">"cust_name"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_source"</span> column<span class="token operator">=</span><span class="token string">"cust_source"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_industry"</span> column<span class="token operator">=</span><span class="token string">"cust_industry"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_level"</span> column<span class="token operator">=</span><span class="token string">"cust_level"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_linkman"</span> column<span class="token operator">=</span><span class="token string">"cust_linkman"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_phone"</span> column<span class="token operator">=</span><span class="token string">"cust_phone"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_mobile"</span> column<span class="token operator">=</span><span class="token string">"cust_mobile"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span>/class<span class="token operator">></span><span class="token operator">&lt;</span>/hibernate-mapping<span class="token operator">></span></code></pre><h3 id="HibernateUtils统一获取Session"><a href="#HibernateUtils统一获取Session" class="headerlink" title="HibernateUtils统一获取Session"></a>HibernateUtils统一获取Session</h3><pre class=" language-bash"><code class="language-bash">package cn.itheima.utils<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Session<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.SessionFactory<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.cfg.Configuration<span class="token punctuation">;</span>public class HibernateUtils <span class="token punctuation">{</span>    private static SessionFactory sf<span class="token punctuation">;</span>    static<span class="token punctuation">{</span>        //1 创建,调用空参构造        Configuration conf <span class="token operator">=</span> new Configuration<span class="token punctuation">(</span><span class="token punctuation">)</span>.configure<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 根据配置信息,创建 SessionFactory对象         sf <span class="token operator">=</span> conf.buildSessionFactory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //获得session <span class="token operator">=</span><span class="token operator">></span> 获得全新session    public static Session openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                //3 获得session                Session session <span class="token operator">=</span> sf.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> session<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //获得session <span class="token operator">=</span><span class="token operator">></span> 获得与线程绑定的session    public static Session getCurrentSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //3 获得session        Session session <span class="token operator">=</span> sf.getCurrentSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> session<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span>HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="CustomerDao接口"><a href="#CustomerDao接口" class="headerlink" title="CustomerDao接口"></a>CustomerDao接口</h3><pre class=" language-bash"><code class="language-bash">public interface CustomerDao <span class="token punctuation">{</span>    //保存客户    void save<span class="token punctuation">(</span>Customer c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class=" language-bash"><code class="language-bash">public class CustomerDaoImpl implements CustomerDao <span class="token punctuation">{</span>    public void save<span class="token punctuation">(</span>Customer c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 打开事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 执行保存        session.save<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        //4 提交事务        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //5 关闭资源        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="AddCustomerServlet实现增加"><a href="#AddCustomerServlet实现增加" class="headerlink" title="AddCustomerServlet实现增加"></a>AddCustomerServlet实现增加</h3><pre class=" language-bash"><code class="language-bash">package cn.itheima.web<span class="token punctuation">;</span><span class="token function">import</span> java.io.IOException<span class="token punctuation">;</span><span class="token function">import</span> java.lang.reflect.InvocationTargetException<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.ServletException<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.http.HttpServlet<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.http.HttpServletRequest<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.http.HttpServletResponse<span class="token punctuation">;</span><span class="token function">import</span> org.apache.commons.beanutils.BeanUtils<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.domain.Customer<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.service.CustomerService<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.service.impl.CustomerServiceImpl<span class="token punctuation">;</span>/** * Servlet implementation class AddCustomerServlet */public class AddCustomerServlet extends HttpServlet <span class="token punctuation">{</span>    private static final long serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    private CustomerService customerService  <span class="token operator">=</span> new CustomerServiceImpl<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    protected void doGet<span class="token punctuation">(</span>HttpServletRequest request, HttpServletResponse response<span class="token punctuation">)</span> throws ServletException, IOException <span class="token punctuation">{</span>        //1 获得参数并封装到Customer对象        Customer c <span class="token operator">=</span> new Customer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            BeanUtils.populate<span class="token punctuation">(</span>c, request.getParameterMap<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>IllegalAccessException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>InvocationTargetException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //2 调用Service保存客户        customerService  .save<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 重定向到客户列表        response.sendRedirect<span class="token punctuation">(</span>request.getContextPath<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"/ListCustomerServlet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    protected void doPost<span class="token punctuation">(</span>HttpServletRequest request, HttpServletResponse response<span class="token punctuation">)</span> throws ServletException, IOException <span class="token punctuation">{</span>        doGet<span class="token punctuation">(</span>request, response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Hibernate三种查询"><a href="#Hibernate三种查询" class="headerlink" title="Hibernate三种查询"></a>Hibernate三种查询</h2><h3 id="hql"><a href="#hql" class="headerlink" title="hql"></a>hql</h3><pre class=" language-bash"><code class="language-bash">package cn.itheima.e_hql<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Query<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Session<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Transaction<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.domain.Customer<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.utils.HibernateUtils<span class="token punctuation">;</span>//测试HQL语句public class Demo <span class="token punctuation">{</span>    @Test    //基本查询    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //1<span class="token operator">></span> 书写HQL语句//        String hql <span class="token operator">=</span> <span class="token string">" from cn.itheima.domain.Customer "</span><span class="token punctuation">;</span>        String hql <span class="token operator">=</span> <span class="token string">" from Customer "</span><span class="token punctuation">;</span> // 查询所有Customer对象        //2<span class="token operator">></span> 根据HQL语句创建查询对象        Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3<span class="token operator">></span> 根据查询对象获得查询结果        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    // 返回list结果        //query.uniqueResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//接收唯一的查询结果        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span>    @Test    //条件查询    //HQL语句中,不可能出现任何数据库相关的信息的    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //1<span class="token operator">></span> 书写HQL语句        String hql <span class="token operator">=</span> <span class="token string">" from Customer where cust_id = 1 "</span><span class="token punctuation">;</span> // 查询所有Customer对象        //2<span class="token operator">></span> 根据HQL语句创建查询对象        Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3<span class="token operator">></span> 根据查询对象获得查询结果        Customer c <span class="token operator">=</span> <span class="token punctuation">(</span>Customer<span class="token punctuation">)</span> query.uniqueResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span>    @Test    //条件查询    public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        String hql1 <span class="token operator">=</span> <span class="token string">" from  cn.itcast.domain.Customer where cust_id =? "</span><span class="token punctuation">;</span>//完整写法        String hql2 <span class="token operator">=</span> <span class="token string">" from  cn.itcast.domain.Customer where cust_id = :id "</span><span class="token punctuation">;</span>//完整写法        Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql2<span class="token punctuation">)</span><span class="token punctuation">;</span>//        query.setParameter<span class="token punctuation">(</span>0, 2l<span class="token punctuation">)</span><span class="token punctuation">;</span>        query.setParameter<span class="token punctuation">(</span><span class="token string">"id"</span>, 2l<span class="token punctuation">)</span><span class="token punctuation">;</span>        List list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //统计查询    //count    计数    //sum     求和    //avg    平均数    //max    //min    public void fun5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        String hql1 <span class="token operator">=</span> <span class="token string">" select count(*) from  cn.itcast.domain.Customer  "</span><span class="token punctuation">;</span>//完整写法        String hql2 <span class="token operator">=</span> <span class="token string">" select sum(cust_id) from  cn.itcast.domain.Customer  "</span><span class="token punctuation">;</span>//完整写法        String hql3 <span class="token operator">=</span> <span class="token string">" select avg(cust_id) from  cn.itcast.domain.Customer  "</span><span class="token punctuation">;</span>//完整写法        String hql4 <span class="token operator">=</span> <span class="token string">" select max(cust_id) from  cn.itcast.domain.Customer  "</span><span class="token punctuation">;</span>//完整写法        String hql5 <span class="token operator">=</span> <span class="token string">" select min(cust_id) from  cn.itcast.domain.Customer  "</span><span class="token punctuation">;</span>//完整写法        Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql5<span class="token punctuation">)</span><span class="token punctuation">;</span>        Number number  <span class="token operator">=</span> <span class="token punctuation">(</span>Number<span class="token punctuation">)</span> query.uniqueResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //分页查询    public void fun6<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //1<span class="token operator">></span> 书写HQL语句        String hql <span class="token operator">=</span> <span class="token string">" from Customer  "</span><span class="token punctuation">;</span> // 查询所有Customer对象        //2<span class="token operator">></span> 根据HQL语句创建查询对象        Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql<span class="token punctuation">)</span><span class="token punctuation">;</span>        //设置分页信息 limit ?,?        query.setFirstResult<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>        query.setMaxResults<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3<span class="token operator">></span> 根据查询对象获得查询结果        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span>  query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span><span class="token punctuation">}</span>//回顾-原生SQL    // 交叉连接-笛卡尔积<span class="token punctuation">(</span>避免<span class="token punctuation">)</span>//        <span class="token keyword">select</span> * from A,B     // 内连接//        <span class="token operator">|</span>-隐式内连接//            <span class="token keyword">select</span> * from A,B  where b.aid <span class="token operator">=</span> a.id//        <span class="token operator">|</span>-显式内连接//            <span class="token keyword">select</span> * from A inner <span class="token function">join</span> B on b.aid <span class="token operator">=</span> a.id    // 外连接//        <span class="token operator">|</span>- 左外//            <span class="token keyword">select</span> * from A left <span class="token punctuation">[</span>outer<span class="token punctuation">]</span> <span class="token function">join</span> B on b.aid <span class="token operator">=</span> a.id//        <span class="token operator">|</span>- 右外//            <span class="token keyword">select</span> * from A right <span class="token punctuation">[</span>outer<span class="token punctuation">]</span> <span class="token function">join</span> B on b.aid <span class="token operator">=</span> a.id//HQL 内连接 <span class="token operator">=</span><span class="token operator">></span> 将连接的两端对象分别返回.放到数组中.    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        String hql <span class="token operator">=</span> <span class="token string">" from Customer c inner join c.linkMens "</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token keyword">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span>Arrays.toString<span class="token punctuation">(</span>arr<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //----------------------------------------------------        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //HQL 迫切内连接 <span class="token operator">=</span><span class="token operator">></span> 帮我们进行封装.返回值就是一个对象    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        String hql <span class="token operator">=</span> <span class="token string">" from Customer c inner join fetch c.linkMens "</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //HQL 左外连接 <span class="token operator">=</span><span class="token operator">></span> 将连接的两端对象分别返回.放到数组中.    public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        String hql <span class="token operator">=</span> <span class="token string">" from Customer c left join c.linkMens "</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token keyword">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span>Arrays.toString<span class="token punctuation">(</span>arr<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //----------------------------------------------------        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //HQL 右外连接 <span class="token operator">=</span><span class="token operator">></span> 将连接的两端对象分别返回.放到数组中.    public void fun4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        String hql <span class="token operator">=</span> <span class="token string">" from Customer c right join c.linkMens "</span><span class="token punctuation">;</span>        Query query <span class="token operator">=</span> session.createQuery<span class="token punctuation">(</span>hql<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token keyword">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span>Arrays.toString<span class="token punctuation">(</span>arr<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //----------------------------------------------------        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="Criteria"><a href="#Criteria" class="headerlink" title="Criteria"></a>Criteria</h3><pre class=" language-bash"><code class="language-bash"> package cn.itheima.f_criteria<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Criteria<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Query<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Session<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Transaction<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.criterion.Projections<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.criterion.Restrictions<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.domain.Customer<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.utils.HibernateUtils<span class="token punctuation">;</span>//测试Criteria查询public class Demo <span class="token punctuation">{</span>    @Test    //基本查询    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //查询所有的Customer对象        Criteria criteria <span class="token operator">=</span> session.createCriteria<span class="token punctuation">(</span>Customer.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> criteria.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>//        Customer c <span class="token operator">=</span> <span class="token punctuation">(</span>Customer<span class="token punctuation">)</span> criteria.uniqueResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span>    @Test    //条件查询    //HQL语句中,不可能出现任何数据库相关的信息的    // <span class="token operator">></span>                 gt    // <span class="token operator">>=</span>                ge    // <span class="token operator">&lt;</span>                lt    // <span class="token operator">&lt;=</span>                le    // <span class="token operator">==</span>                eq    // <span class="token operator">!=</span>                ne    // <span class="token keyword">in</span>                <span class="token keyword">in</span>    // between and        between    // like             like    // is not null         isNotNull    // is null            isNull    // or                or    // and                and    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //创建criteria查询对象        Criteria criteria <span class="token operator">=</span> session.createCriteria<span class="token punctuation">(</span>Customer.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        //添加查询参数 <span class="token operator">=</span><span class="token operator">></span> 查询cust_id为1的Customer对象        criteria.add<span class="token punctuation">(</span>Restrictions.eq<span class="token punctuation">(</span><span class="token string">"cust_id"</span>, 1l<span class="token punctuation">))</span><span class="token punctuation">;</span>        //执行查询获得结果        Customer c <span class="token operator">=</span> <span class="token punctuation">(</span>Customer<span class="token punctuation">)</span> criteria.uniqueResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span>    @Test    //分页查询    public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //创建criteria查询对象        Criteria criteria <span class="token operator">=</span> session.createCriteria<span class="token punctuation">(</span>Customer.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        //设置分页信息 limit ?,?        criteria.setFirstResult<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">;</span>        criteria.setMaxResults<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token punctuation">;</span>        //执行查询        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> criteria.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span>    @Test    //查询总记录数    public void fun4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //创建criteria查询对象        Criteria criteria <span class="token operator">=</span> session.createCriteria<span class="token punctuation">(</span>Customer.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        //设置查询的聚合函数 <span class="token operator">=</span><span class="token operator">></span> 总行数        criteria.setProjection<span class="token punctuation">(</span>Projections.rowCount<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        //执行查询        Long count <span class="token operator">=</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span> criteria.uniqueResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span>    @Test    // 离线    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //Service/web层        DetachedCriteria <span class="token function">dc</span>  <span class="token operator">=</span> DetachedCriteria.forClass<span class="token punctuation">(</span>Customer.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        dc.add<span class="token punctuation">(</span>Restrictions.idEq<span class="token punctuation">(</span>6l<span class="token punctuation">))</span><span class="token punctuation">;</span>//拼装条件<span class="token punctuation">(</span>全部与普通Criteria一致<span class="token punctuation">)</span>        //----------------------------------------------------        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        Criteria c <span class="token operator">=</span> dc.getExecutableCriteria<span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>        List list <span class="token operator">=</span> c.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><pre class=" language-bash"><code class="language-bash"> package cn.itheima.g_sql<span class="token punctuation">;</span><span class="token function">import</span> java.util.Arrays<span class="token punctuation">;</span><span class="token function">import</span> java.util.List<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Criteria<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.SQLQuery<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Session<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Transaction<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.criterion.Projections<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.criterion.Restrictions<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.domain.Customer<span class="token punctuation">;</span><span class="token function">import</span> cn.itheima.utils.HibernateUtils<span class="token punctuation">;</span>//测试原生SQL查询public class Demo <span class="token punctuation">{</span>    @Test    //基本查询    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //1 书写sql语句        String sql <span class="token operator">=</span> <span class="token string">"select * from cst_customer"</span><span class="token punctuation">;</span>        //2 创建sql查询对象        SQLQuery query <span class="token operator">=</span> session.createSQLQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 调用方法查询结果        List<span class="token operator">&lt;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //query.uniqueResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objs <span class="token keyword">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span>Arrays.toString<span class="token punctuation">(</span>objs<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span>    @Test    //基本查询    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //1 书写sql语句        String sql <span class="token operator">=</span> <span class="token string">"select * from cst_customer"</span><span class="token punctuation">;</span>        //2 创建sql查询对象        SQLQuery query <span class="token operator">=</span> session.createSQLQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        //指定将结果集封装到哪个对象中        query.addEntity<span class="token punctuation">(</span>Customer.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 调用方法查询结果        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span>    @Test    //条件查询    public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //1 书写sql语句        String sql <span class="token operator">=</span> <span class="token string">"select * from cst_customer where cust_id = ? "</span><span class="token punctuation">;</span>        //2 创建sql查询对象        SQLQuery query <span class="token operator">=</span> session.createSQLQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        query.setParameter<span class="token punctuation">(</span>0, 1l<span class="token punctuation">)</span><span class="token punctuation">;</span>        //指定将结果集封装到哪个对象中        query.addEntity<span class="token punctuation">(</span>Customer.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 调用方法查询结果        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span>    @Test    //分页查询    public void fun4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 控制事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3执行操作        //-------------------------------------------        //1 书写sql语句        String sql <span class="token operator">=</span> <span class="token string">"select * from cst_customer  limit ?,? "</span><span class="token punctuation">;</span>        //2 创建sql查询对象        SQLQuery query <span class="token operator">=</span> session.createSQLQuery<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        query.setParameter<span class="token punctuation">(</span>0, 0<span class="token punctuation">)</span><span class="token punctuation">;</span>        query.setParameter<span class="token punctuation">(</span>1, 1<span class="token punctuation">)</span><span class="token punctuation">;</span>        //指定将结果集封装到哪个对象中        query.addEntity<span class="token punctuation">(</span>Customer.class<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3 调用方法查询结果        List<span class="token operator">&lt;</span>Customer<span class="token operator">></span> list <span class="token operator">=</span> query.list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------        //4提交事务.关闭资源        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 游离<span class="token operator">|</span>托管 状态, 有id , 没有关联    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="加载策略"><a href="#加载策略" class="headerlink" title="加载策略"></a>加载策略</h3><pre class=" language-bash"><code class="language-bash">     @Test    // load方法<span class="token punctuation">(</span>默认<span class="token punctuation">)</span>:是在执行时,不发送任何sql语句.返回一个对象.使用该对象时,才执行查询.    // 延迟加载: 仅仅获得没有使用.不会查询.在使用时才进行查询.    // 是否对类进行延迟加载: 可以通过在class元素上配置lazy属性来控制.        //lazy:true  加载时,不查询.使用时才查询b        //lazy:false 加载时立即查询.    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        Customer c <span class="token operator">=</span> session.load<span class="token punctuation">(</span>Customer.class, 2l<span class="token punctuation">)</span><span class="token punctuation">;</span>        //----------------------------------------------------        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h2><p> <img src="/2018/10/25/hibernate-zong-jie/1.jpg" alt="图1"></p><h3 id="Customer-java"><a href="#Customer-java" class="headerlink" title="Customer.java"></a>Customer.java</h3><pre class=" language-bash"><code class="language-bash">public class Customer <span class="token punctuation">{</span>    /*     * CREATE TABLE <span class="token variable"><span class="token variable">`</span>cst_customer<span class="token variable">`</span></span> <span class="token punctuation">(</span>      <span class="token variable"><span class="token variable">`</span>cust_id<span class="token variable">`</span></span> BIGINT<span class="token punctuation">(</span>32<span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class="token string">'客户编号(主键)'</span>,      <span class="token variable"><span class="token variable">`</span>cust_name<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>32<span class="token punctuation">)</span> NOT NULL COMMENT <span class="token string">'客户名称(公司名称)'</span>,      <span class="token variable"><span class="token variable">`</span>cust_source<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>32<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'客户信息来源'</span>,      <span class="token variable"><span class="token variable">`</span>cust_industry<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>32<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'客户所属行业'</span>,      <span class="token variable"><span class="token variable">`</span>cust_level<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>32<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'客户级别'</span>,      <span class="token variable"><span class="token variable">`</span>cust_linkman<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>64<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人'</span>,      <span class="token variable"><span class="token variable">`</span>cust_phone<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>64<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'固定电话'</span>,      <span class="token variable"><span class="token variable">`</span>cust_mobile<span class="token variable">`</span></span> VARCHAR<span class="token punctuation">(</span>16<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'移动电话'</span>,      PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>cust_id<span class="token variable">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> ENGINE<span class="token operator">=</span>INNODB AUTO_INCREMENT<span class="token operator">=</span>1 DEFAULT CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>     */    private Long cust_id<span class="token punctuation">;</span>    private String cust_name<span class="token punctuation">;</span>    private String cust_source<span class="token punctuation">;</span>    private String cust_industry<span class="token punctuation">;</span>    private String cust_level<span class="token punctuation">;</span>    private String cust_linkman<span class="token punctuation">;</span>    private String cust_phone<span class="token punctuation">;</span>    private String cust_mobile<span class="token punctuation">;</span>    //使用set集合,表达一对多关系    private Set<span class="token operator">&lt;</span>LinkMan<span class="token operator">></span> linkMens <span class="token operator">=</span> new HashSet<span class="token operator">&lt;</span>LinkMan<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public Set<span class="token operator">&lt;</span>LinkMan<span class="token operator">></span> getLinkMens<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> linkMens<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLinkMens<span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>LinkMan<span class="token operator">></span> linkMens<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.linkMens <span class="token operator">=</span> linkMens<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Long getCust_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_id<span class="token punctuation">(</span>Long cust_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_id <span class="token operator">=</span> cust_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_name<span class="token punctuation">(</span>String cust_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_name <span class="token operator">=</span> cust_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_source<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_source<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_source<span class="token punctuation">(</span>String cust_source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_source <span class="token operator">=</span> cust_source<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_industry<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_industry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_industry<span class="token punctuation">(</span>String cust_industry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_industry <span class="token operator">=</span> cust_industry<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_level<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_level<span class="token punctuation">(</span>String cust_level<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_level <span class="token operator">=</span> cust_level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_linkman<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_linkman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_linkman<span class="token punctuation">(</span>String cust_linkman<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_linkman <span class="token operator">=</span> cust_linkman<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_phone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_phone<span class="token punctuation">(</span>String cust_phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_phone <span class="token operator">=</span> cust_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getCust_mobile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cust_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCust_mobile<span class="token punctuation">(</span>String cust_mobile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cust_mobile <span class="token operator">=</span> cust_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    public String toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Customer [cust_id="</span> + cust_id + <span class="token string">", cust_name="</span> + cust_name + <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="LinkMan-java"><a href="#LinkMan-java" class="headerlink" title="LinkMan.java"></a>LinkMan.java</h3><pre class=" language-bash"><code class="language-bash">//联系人实体public class LinkMan <span class="token punctuation">{</span>        /*         * CREATE TABLE <span class="token variable"><span class="token variable">`</span>cst_linkman<span class="token variable">`</span></span> <span class="token punctuation">(</span>          <span class="token variable"><span class="token variable">`</span>lkm_id<span class="token variable">`</span></span> bigint<span class="token punctuation">(</span>32<span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class="token string">'联系人编号(主键)'</span>,          <span class="token variable"><span class="token variable">`</span>lkm_name<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span>16<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人姓名'</span>,          <span class="token variable"><span class="token variable">`</span>lkm_cust_id<span class="token variable">`</span></span> bigint<span class="token punctuation">(</span>32<span class="token punctuation">)</span> NOT NULL COMMENT <span class="token string">'客户id'</span>,          <span class="token variable"><span class="token variable">`</span>lkm_gender<span class="token variable">`</span></span> char<span class="token punctuation">(</span>1<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人性别'</span>,          <span class="token variable"><span class="token variable">`</span>lkm_phone<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span>16<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人办公电话'</span>,          <span class="token variable"><span class="token variable">`</span>lkm_mobile<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span>16<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人手机'</span>,          <span class="token variable"><span class="token variable">`</span>lkm_email<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span>64<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人邮箱'</span>,          <span class="token variable"><span class="token variable">`</span>lkm_qq<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span>16<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人qq'</span>,          <span class="token variable"><span class="token variable">`</span>lkm_position<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span>16<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人职位'</span>,          <span class="token variable"><span class="token variable">`</span>lkm_memo<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span>512<span class="token punctuation">)</span> DEFAULT NULL COMMENT <span class="token string">'联系人备注'</span>,          PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>lkm_id<span class="token variable">`</span></span><span class="token punctuation">)</span>,          KEY <span class="token variable"><span class="token variable">`</span>FK_cst_linkman_lkm_cust_id<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>lkm_cust_id<span class="token variable">`</span></span><span class="token punctuation">)</span>,          CONSTRAINT <span class="token variable"><span class="token variable">`</span>FK_cst_linkman_lkm_cust_id<span class="token variable">`</span></span> FOREIGN KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>lkm_cust_id<span class="token variable">`</span></span><span class="token punctuation">)</span> REFERENCES <span class="token variable"><span class="token variable">`</span>cst_customer<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>cust_id<span class="token variable">`</span></span><span class="token punctuation">)</span> ON DELETE NO ACTION ON UPDATE NO ACTION        <span class="token punctuation">)</span> ENGINE<span class="token operator">=</span>InnoDB AUTO_INCREMENT<span class="token operator">=</span>3 DEFAULT CHARSET<span class="token operator">=</span>utf8<span class="token punctuation">;</span>         */    private Long lkm_id<span class="token punctuation">;</span>    private Character lkm_gender<span class="token punctuation">;</span>    private String lkm_name<span class="token punctuation">;</span>    private String lkm_phone<span class="token punctuation">;</span>    private String lkm_email<span class="token punctuation">;</span>    private String lkm_qq<span class="token punctuation">;</span>    private String lkm_mobile<span class="token punctuation">;</span>    private String lkm_memo<span class="token punctuation">;</span>    private String lkm_position<span class="token punctuation">;</span>    //表达多对一关系    private Customer customer <span class="token punctuation">;</span>    public Customer getCustomer<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCustomer<span class="token punctuation">(</span>Customer customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.customer <span class="token operator">=</span> customer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Long getLkm_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_id<span class="token punctuation">(</span>Long lkm_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_id <span class="token operator">=</span> lkm_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Character getLkm_gender<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_gender<span class="token punctuation">(</span>Character lkm_gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_gender <span class="token operator">=</span> lkm_gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_name<span class="token punctuation">(</span>String lkm_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_name <span class="token operator">=</span> lkm_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_phone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_phone<span class="token punctuation">(</span>String lkm_phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_phone <span class="token operator">=</span> lkm_phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_email<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_email<span class="token punctuation">(</span>String lkm_email<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_email <span class="token operator">=</span> lkm_email<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_qq<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_qq<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_qq<span class="token punctuation">(</span>String lkm_qq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_qq <span class="token operator">=</span> lkm_qq<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_mobile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_mobile<span class="token punctuation">(</span>String lkm_mobile<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_mobile <span class="token operator">=</span> lkm_mobile<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_memo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_memo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_memo<span class="token punctuation">(</span>String lkm_memo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_memo <span class="token operator">=</span> lkm_memo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getLkm_position<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> lkm_position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setLkm_position<span class="token punctuation">(</span>String lkm_position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.lkm_position <span class="token operator">=</span> lkm_position<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Customer-hbm-xml-1"><a href="#Customer-hbm-xml-1" class="headerlink" title="Customer.hbm.xml"></a>Customer.hbm.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE hibernate-mapping PUBLIC     <span class="token string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span>    <span class="token string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>hibernate-mapping package<span class="token operator">=</span><span class="token string">"cn.itcast.domain"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>class name<span class="token operator">=</span><span class="token string">"Customer"</span> table<span class="token operator">=</span><span class="token string">"cst_customer"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>id name<span class="token operator">=</span><span class="token string">"cust_id"</span>  <span class="token operator">></span>            <span class="token operator">&lt;</span>generator class<span class="token operator">=</span><span class="token string">"native"</span><span class="token operator">></span><span class="token operator">&lt;</span>/generator<span class="token operator">></span>        <span class="token operator">&lt;</span>/id<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_name"</span> column<span class="token operator">=</span><span class="token string">"cust_name"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_source"</span> column<span class="token operator">=</span><span class="token string">"cust_source"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_industry"</span> column<span class="token operator">=</span><span class="token string">"cust_industry"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_level"</span> column<span class="token operator">=</span><span class="token string">"cust_level"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_linkman"</span> column<span class="token operator">=</span><span class="token string">"cust_linkman"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_phone"</span> column<span class="token operator">=</span><span class="token string">"cust_phone"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"cust_mobile"</span> column<span class="token operator">=</span><span class="token string">"cust_mobile"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 集合,一对多关系,在配置文件中配置 --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--             name属性:集合属性名            column属性: 外键列名            class属性: 与我关联的对象完整类名         --<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>--              级联操作:    cascade                 save-update: 级联保存更新                 delete:级联删除                 all:save-update+delete             级联操作: 简化操作.目的就是为了少些两行代码.          --<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span>-- inverse属性: 配置关系是否维护.                   true: customer不维护关系                  false<span class="token punctuation">(</span>默认值<span class="token punctuation">)</span>: customer维护关系              inverse属性: 性能优化.提高关系维护的性能.              原则: 无论怎么放弃,总有一方必须要维护关系.              一对多关系中: 一的一方放弃.也只能一的一方放弃.多的一方不能放弃.          --<span class="token operator">></span>        <span class="token operator">&lt;</span>set name<span class="token operator">=</span><span class="token string">"linkMens"</span> inverse<span class="token operator">=</span><span class="token string">"true"</span> cascade<span class="token operator">=</span><span class="token string">"delete"</span>  <span class="token operator">></span>            <span class="token operator">&lt;</span>key column<span class="token operator">=</span><span class="token string">"lkm_cust_id"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/key<span class="token operator">></span>            <span class="token operator">&lt;</span>one-to-many class<span class="token operator">=</span><span class="token string">"LinkMan"</span> /<span class="token operator">></span>        <span class="token operator">&lt;</span>/set<span class="token operator">></span>    <span class="token operator">&lt;</span>/class<span class="token operator">></span><span class="token operator">&lt;</span>/hibernate-mapping<span class="token operator">></span></code></pre><h3 id="LinkMan-hbm-xml"><a href="#LinkMan-hbm-xml" class="headerlink" title="LinkMan.hbm.xml"></a>LinkMan.hbm.xml</h3><pre class=" language-bash"><code class="language-bash"> <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE hibernate-mapping PUBLIC     <span class="token string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span>    <span class="token string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>hibernate-mapping package<span class="token operator">=</span><span class="token string">"cn.itcast.domain"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>class name<span class="token operator">=</span><span class="token string">"LinkMan"</span> table<span class="token operator">=</span><span class="token string">"cst_linkman"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>id name<span class="token operator">=</span><span class="token string">"lkm_id"</span>  <span class="token operator">></span>            <span class="token operator">&lt;</span>generator class<span class="token operator">=</span><span class="token string">"native"</span><span class="token operator">></span><span class="token operator">&lt;</span>/generator<span class="token operator">></span>        <span class="token operator">&lt;</span>/id<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_gender"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_name"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_phone"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_email"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_qq"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_mobile"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_memo"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"lkm_position"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 多对一 --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--             name属性:引用属性名            column属性: 外键列名            class属性: 与我关联的对象完整类名         --<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span>--              级联操作:    cascade                 save-update: 级联保存更新                 delete:级联删除                 all:save-update+delete             级联操作: 简化操作.目的就是为了少些两行代码.          --<span class="token operator">></span>          <span class="token operator">&lt;</span><span class="token operator">!</span>-- 多的一方: 不能放弃维护关系的.外键字段就在多的一方.  --<span class="token operator">></span>        <span class="token operator">&lt;</span>many-to-one name<span class="token operator">=</span><span class="token string">"customer"</span> column<span class="token operator">=</span><span class="token string">"lkm_cust_id"</span> class<span class="token operator">=</span><span class="token string">"Customer"</span>  <span class="token operator">></span>        <span class="token operator">&lt;</span>/many-to-one<span class="token operator">></span>    <span class="token operator">&lt;</span>/class<span class="token operator">></span><span class="token operator">&lt;</span>/hibernate-mapping<span class="token operator">></span></code></pre><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><pre class=" language-bash"><code class="language-bash"> //测试级联操作public class Demo2 <span class="token punctuation">{</span>    @Test    //保存客户 以及客户 下的联系人    //cascade:save-update    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 开启事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //3操作        Customer c <span class="token operator">=</span> new Customer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c.setCust_name<span class="token punctuation">(</span><span class="token string">"客户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkMan lm1 <span class="token operator">=</span> new LinkMan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm1.setLkm_name<span class="token punctuation">(</span><span class="token string">"联系人1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkMan lm2 <span class="token operator">=</span> new LinkMan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm2.setLkm_name<span class="token punctuation">(</span><span class="token string">"联系人2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //表达一对多,客户下有多个联系人        c.getLinkMens<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>lm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        c.getLinkMens<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>lm2<span class="token punctuation">)</span><span class="token punctuation">;</span>        //表达对对对,联系人属于哪个客户        lm1.setCustomer<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        lm2.setCustomer<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        session.save<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>//        session.save<span class="token punctuation">(</span>lm1<span class="token punctuation">)</span><span class="token punctuation">;</span>//        session.save<span class="token punctuation">(</span>lm2<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //4提交事务        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //5关闭资源        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //测试删除客户时,级联删除客户下的联系人    //cascade:delete    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 开启事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //3操作        //1<span class="token operator">></span> 获得要操作的客户对象        Customer c <span class="token operator">=</span> session.get<span class="token punctuation">(</span>Customer.class,1l<span class="token punctuation">)</span><span class="token punctuation">;</span>        //2<span class="token operator">></span>调用delete删除客户        session.delete<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //4提交事务        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //5关闭资源        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //保存联系人以及联系人对应的客户    //cascade:save-update    public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 开启事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //3操作        Customer c <span class="token operator">=</span> new Customer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c.setCust_name<span class="token punctuation">(</span><span class="token string">"客户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkMan lm1 <span class="token operator">=</span> new LinkMan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm1.setLkm_name<span class="token punctuation">(</span><span class="token string">"刘总"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //表达一对多,客户下有多个联系人        c.getLinkMens<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>lm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        //表达对对对,联系人属于哪个客户        lm1.setCustomer<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        session.save<span class="token punctuation">(</span>lm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        //4提交事务        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //5关闭资源        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        @Test    //删除客户    public void fun2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 开启事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //3操作        Customer customer <span class="token operator">=</span> session.get<span class="token punctuation">(</span>Customer.class, 1l<span class="token punctuation">)</span><span class="token punctuation">;</span>        session.delete<span class="token punctuation">(</span>customer<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //4提交事务        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //5关闭资源        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 开启事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //3操作        Customer c <span class="token operator">=</span> new Customer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c.setCust_name<span class="token punctuation">(</span><span class="token string">"传智播客"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkMan lm1 <span class="token operator">=</span> new LinkMan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm1.setLkm_name<span class="token punctuation">(</span><span class="token string">"黎活明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LinkMan lm2 <span class="token operator">=</span> new LinkMan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lm2.setLkm_name<span class="token punctuation">(</span><span class="token string">"刘悦东"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //表达一对多,客户下有多个联系人.         // 如果客户放弃维护与联系人的关系. 维护关系的代码可以省略        //c.getLinkMens<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>lm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        //c.getLinkMens<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>lm2<span class="token punctuation">)</span><span class="token punctuation">;</span>        //表达对对对,联系人属于哪个客户        lm1.setCustomer<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        lm2.setCustomer<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        session.save<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        session.save<span class="token punctuation">(</span>lm1<span class="token punctuation">)</span><span class="token punctuation">;</span>        session.save<span class="token punctuation">(</span>lm2<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //4提交事务        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //5关闭资源        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><p>  <img src="/2018/10/25/hibernate-zong-jie/2.jpg" alt="图2"></p><h3 id="角色表的配置"><a href="#角色表的配置" class="headerlink" title="角色表的配置"></a>角色表的配置</h3><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE hibernate-mapping PUBLIC     <span class="token string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span>    <span class="token string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>hibernate-mapping package<span class="token operator">=</span><span class="token string">"cn.itcast.domain"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>class name<span class="token operator">=</span><span class="token string">"Role"</span> table<span class="token operator">=</span><span class="token string">"sys_role"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>id name<span class="token operator">=</span><span class="token string">"role_id"</span>  <span class="token operator">></span>            <span class="token operator">&lt;</span>generator class<span class="token operator">=</span><span class="token string">"native"</span><span class="token operator">></span><span class="token operator">&lt;</span>/generator<span class="token operator">></span>        <span class="token operator">&lt;</span>/id<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"role_name"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"role_memo"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span>-- 使用inverse属性            true: 放弃维护外键关系            false<span class="token punctuation">(</span>默认值<span class="token punctuation">)</span>:维护关系        结论: 将来在开发中,如果遇到多对多关系.一定要选择一方放弃维护关系.             一般谁来放弃要看业务方向. 例如录入员工时,需要为员工指定所属角色.             那么业务方向就是由员工维护角色. 角色不需要维护与员工关系.角色放弃维护         --<span class="token operator">></span>                <span class="token operator">&lt;</span>set name<span class="token operator">=</span><span class="token string">"users"</span> table<span class="token operator">=</span><span class="token string">"sys_user_role"</span> inverse<span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>key column<span class="token operator">=</span><span class="token string">"role_id"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/key<span class="token operator">></span>            <span class="token operator">&lt;</span>many-to-many class<span class="token operator">=</span><span class="token string">"User"</span> column<span class="token operator">=</span><span class="token string">"user_id"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/many-to-many<span class="token operator">></span>        <span class="token operator">&lt;</span>/set<span class="token operator">></span>    <span class="token operator">&lt;</span>/class<span class="token operator">></span><span class="token operator">&lt;</span>/hibernate-mapping<span class="token operator">></span></code></pre><h3 id="用户表的配置"><a href="#用户表的配置" class="headerlink" title="用户表的配置"></a>用户表的配置</h3><pre class=" language-bash"><code class="language-bash">  <span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span>?<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE hibernate-mapping PUBLIC     <span class="token string">"-//Hibernate/Hibernate Mapping DTD 3.0//EN"</span>    <span class="token string">"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"</span><span class="token operator">></span><span class="token operator">&lt;</span>hibernate-mapping package<span class="token operator">=</span><span class="token string">"cn.itcast.domain"</span> <span class="token operator">></span>    <span class="token operator">&lt;</span>class name<span class="token operator">=</span><span class="token string">"User"</span> table<span class="token operator">=</span><span class="token string">"sys_user"</span> <span class="token operator">></span>        <span class="token operator">&lt;</span>id name<span class="token operator">=</span><span class="token string">"user_id"</span>  <span class="token operator">></span>            <span class="token operator">&lt;</span>generator class<span class="token operator">=</span><span class="token string">"native"</span><span class="token operator">></span><span class="token operator">&lt;</span>/generator<span class="token operator">></span>        <span class="token operator">&lt;</span>/id<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user_code"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user_name"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user_password"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"user_state"</span>  <span class="token operator">></span><span class="token operator">&lt;</span>/property<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 多对多关系表达 --<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--             name: 集合属性名            table: 配置中间表名            key             <span class="token operator">|</span>-column:外键,别人引用<span class="token string">"我"</span>的外键列名             class: 我与哪个类是多对多关系             column:外键.我引用比人的外键列名         --<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">!</span>-- cascade级联操作:                     save-update: 级联保存更新                     delete:级联删除                     all:级联保存更新+级联删除             结论: cascade简化代码书写.该属性使不使用无所谓. 建议要用只用save-update.                  如果使用delete操作太过危险.尤其在多对多中.不建议使用.                      --<span class="token operator">></span>        <span class="token operator">&lt;</span>set name<span class="token operator">=</span><span class="token string">"roles"</span> table<span class="token operator">=</span><span class="token string">"sys_user_role"</span> cascade<span class="token operator">=</span><span class="token string">"save-update"</span> <span class="token operator">></span>            <span class="token operator">&lt;</span>key column<span class="token operator">=</span><span class="token string">"user_id"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/key<span class="token operator">></span>            <span class="token operator">&lt;</span>many-to-many class<span class="token operator">=</span><span class="token string">"Role"</span> column<span class="token operator">=</span><span class="token string">"role_id"</span> <span class="token operator">></span><span class="token operator">&lt;</span>/many-to-many<span class="token operator">></span>        <span class="token operator">&lt;</span>/set<span class="token operator">></span>    <span class="token operator">&lt;</span>/class<span class="token operator">></span><span class="token operator">&lt;</span>/hibernate-mapping<span class="token operator">></span></code></pre><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><pre class=" language-bash"><code class="language-bash">  package cn.itcast.b_many2many<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Session<span class="token punctuation">;</span><span class="token function">import</span> org.hibernate.Transaction<span class="token punctuation">;</span><span class="token function">import</span> org.junit.Test<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.domain.Role<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.domain.User<span class="token punctuation">;</span><span class="token function">import</span> cn.itcast.utils.HibernateUtils<span class="token punctuation">;</span>//多对多关系操作public class Demo <span class="token punctuation">{</span>    @Test    //保存员工以及角色    public void fun1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 开启事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //3操作        //1<span class="token operator">></span> 创建两个 User        User u1 <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1.setUser_name<span class="token punctuation">(</span><span class="token string">"小子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User u2 <span class="token operator">=</span> new User<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u2.setUser_name<span class="token punctuation">(</span><span class="token string">"金家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2<span class="token operator">></span> 创建两个 Role        Role r1 <span class="token operator">=</span> new Role<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r1.setRole_name<span class="token punctuation">(</span><span class="token string">"保洁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Role r2 <span class="token operator">=</span> new Role<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r2.setRole_name<span class="token punctuation">(</span><span class="token string">"保安"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3<span class="token operator">></span> 用户表达关系        u1.getRoles<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>        u1.getRoles<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>        u2.getRoles<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>        u2.getRoles<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>        //4<span class="token operator">></span> 角色表达关系        r1.getUsers<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span>        r1.getUsers<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">;</span>        r2.getUsers<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span>        r2.getUsers<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">;</span>        //5<span class="token operator">></span> 调用Save方法一次保存        session.save<span class="token punctuation">(</span>u1<span class="token punctuation">)</span><span class="token punctuation">;</span>        session.save<span class="token punctuation">(</span>u2<span class="token punctuation">)</span><span class="token punctuation">;</span>        session.save<span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>        session.save<span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //4提交事务        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //5关闭资源        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //为郝强勇新增一个角色    public void fun3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 开启事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //3操作        //1<span class="token operator">></span> 获得郝强勇用户        User user <span class="token operator">=</span> session.get<span class="token punctuation">(</span>User.class, 1l<span class="token punctuation">)</span><span class="token punctuation">;</span>        //2<span class="token operator">></span> 创建公关角色        Role r <span class="token operator">=</span> new Role<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r.setRole_name<span class="token punctuation">(</span><span class="token string">"男公关"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //3<span class="token operator">></span> 将角色添加到用户中        user.getRoles<span class="token punctuation">(</span><span class="token punctuation">)</span>.add<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        //4<span class="token operator">></span> 将角色转换为持久化        //session.save<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //4提交事务        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //5关闭资源        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Test    //为郝强勇解除一个角色    public void fun4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        //1 获得session        Session session <span class="token operator">=</span> HibernateUtils.openSession<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //2 开启事务        Transaction tx <span class="token operator">=</span> session.beginTransaction<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //3操作        //1<span class="token operator">></span> 获得郝强勇用户        User user <span class="token operator">=</span> session.get<span class="token punctuation">(</span>User.class, 1l<span class="token punctuation">)</span><span class="token punctuation">;</span>        //2<span class="token operator">></span> 获得要操作的角色对象<span class="token punctuation">(</span>保洁,保安<span class="token punctuation">)</span>        Role r1 <span class="token operator">=</span> session.get<span class="token punctuation">(</span>Role.class, 1l<span class="token punctuation">)</span><span class="token punctuation">;</span>        Role r2 <span class="token operator">=</span> session.get<span class="token punctuation">(</span>Role.class, 2l<span class="token punctuation">)</span><span class="token punctuation">;</span>        //3<span class="token operator">></span> 将角色从用户的角色集合中移除        user.getRoles<span class="token punctuation">(</span><span class="token punctuation">)</span>.remove<span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>        user.getRoles<span class="token punctuation">(</span><span class="token punctuation">)</span>.remove<span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token punctuation">;</span>        //-------------------------------------------------        //4提交事务        tx.commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //5关闭资源        session.close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><pre class=" language-bash"><code class="language-bash">  public class Role <span class="token punctuation">{</span>    private Long role_id<span class="token punctuation">;</span>    private String role_name<span class="token punctuation">;</span>    private String role_memo<span class="token punctuation">;</span>    //表达多对多    private Set<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">users</span> <span class="token operator">=</span> new HashSet<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public Long getRole_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> role_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setRole_id<span class="token punctuation">(</span>Long role_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.role_id <span class="token operator">=</span> role_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getRole_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> role_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setRole_name<span class="token punctuation">(</span>String role_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.role_name <span class="token operator">=</span> role_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getRole_memo<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> role_memo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setRole_memo<span class="token punctuation">(</span>String role_memo<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.role_memo <span class="token operator">=</span> role_memo<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Set<span class="token operator">&lt;</span>User<span class="token operator">></span> getUsers<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">users</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUsers<span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>User<span class="token operator">></span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.users <span class="token operator">=</span> <span class="token function">users</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>public class User <span class="token punctuation">{</span>    private Long user_id<span class="token punctuation">;</span>    private String user_code<span class="token punctuation">;</span>    private String user_name<span class="token punctuation">;</span>    private String user_password<span class="token punctuation">;</span>    private Character user_state<span class="token punctuation">;</span>    //表达多对多    private Set<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles <span class="token operator">=</span> new HashSet<span class="token operator">&lt;</span>Role<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    public Long getUser_id<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_id<span class="token punctuation">(</span>Long user_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_id <span class="token operator">=</span> user_id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getUser_code<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_code<span class="token punctuation">(</span>String user_code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_code <span class="token operator">=</span> user_code<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getUser_name<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_name<span class="token punctuation">(</span>String user_name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_name <span class="token operator">=</span> user_name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public String getUser_password<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_password<span class="token punctuation">(</span>String user_password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_password <span class="token operator">=</span> user_password<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Character getUser_state<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user_state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setUser_state<span class="token punctuation">(</span>Character user_state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.user_state <span class="token operator">=</span> user_state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Set<span class="token operator">&lt;</span>Role<span class="token operator">></span> getRoles<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roles<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setRoles<span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.roles <span class="token operator">=</span> roles<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
