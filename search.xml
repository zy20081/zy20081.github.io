<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>相册</title>
      <link href="/2019/01/11/xiang-ce/"/>
      <url>/2019/01/11/xiang-ce/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/11/xiang-ce/2.jpg" alt="图2"></p><h2 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h2><p>学C#的时候，第一个作业练习demo</p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>namespace picphoto<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private int photoNo <span class="token operator">=</span> 1<span class="token punctuation">;</span>//定义一个变量        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 首页        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btnfirst_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> 1<span class="token punctuation">;</span>            picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 上一张        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btngo_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> photoNo - 1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>photoNo <span class="token operator">&lt;</span> 1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                photoNo <span class="token operator">=</span> 1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 下一张        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btndown_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> photoNo +1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> photoNo<span class="token operator">></span> 8<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                photoNo <span class="token operator">=</span> 8<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 最后一张        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void btnlast_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> 8<span class="token punctuation">;</span>            picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 放大        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void pictureBox1_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation<span class="token operator">=</span>@<span class="token string">"..\..\images\2.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox2_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\3.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox3_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\4.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox4_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\5.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox5_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\6.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox6_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\7.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void pictureBox7_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            picphoto.ImageLocation <span class="token operator">=</span> @<span class="token string">"..\..\images\8.jpg"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void picphoto_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> photoNo+1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>photoNo<span class="token operator">></span>8<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                photoNo <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void timer1_Tick<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            photoNo <span class="token operator">=</span> photoNo + 1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>photoNo <span class="token operator">></span> 8<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                photoNo <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                picphoto.ImageLocation <span class="token operator">=</span> string.Format<span class="token punctuation">(</span>@<span class="token string">"..\..\images\{0}.jpg"</span>, photoNo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void ToolSOpen_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            timer1.Enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void 停止自动换片ToolStripMenuItem_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            timer1.Enabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C# Demo </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐播放器</title>
      <link href="/2019/01/10/yin-le-bo-fang-qi/"/>
      <url>/2019/01/10/yin-le-bo-fang-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/10/yin-le-bo-fang-qi/2.jpg" alt="图2"><br><img src="/2019/01/10/yin-le-bo-fang-qi/3.jpg" alt="图3"></p><h2 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h2><p>大学时期，蛮流行写音乐播放器，也写了个，蛮有意思的，这种就属于代码简单，但是有个成果，这都好多年了，把代码发大家看看</p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>using System.Runtime.Serialization.Formatters.Binary<span class="token punctuation">;</span>namespace MusicTV<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        PlayManager m_MP <span class="token operator">=</span> new PlayManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        SongInfo Songs<span class="token punctuation">;</span>        private void toolStripMenuItem1_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Songs <span class="token operator">=</span> new SongInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            openFile.FileName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            openFile.ShowDialog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Songs.FilePath <span class="token operator">=</span> openFile.FileName<span class="token punctuation">;</span>            Songs.name <span class="token operator">=</span> Path.GetFileName<span class="token punctuation">(</span>Songs.FilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>//Path方法，，存入名字            <span class="token keyword">if</span> <span class="token punctuation">(</span>m_MP.PlaySong.ContainsKey<span class="token punctuation">(</span>Songs.FilePath<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                MessageBox.Show<span class="token punctuation">(</span><span class="token string">"已经添加了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            m_MP.PlaySong.Add<span class="token punctuation">(</span>Songs.FilePath, Songs<span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode n <span class="token operator">=</span> null<span class="token punctuation">;</span>            rootNode.Nodes.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>SongInfo s <span class="token keyword">in</span> m_MP.PlaySong.Values<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                  n <span class="token operator">=</span> new TreeNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n.Text <span class="token operator">=</span> s.name<span class="token punctuation">;</span>                n.Tag <span class="token operator">=</span> s<span class="token punctuation">;</span>                rootNode.Nodes.Add<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rootNode.Expand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TreeNode rootNode <span class="token operator">=</span> null<span class="token punctuation">;</span>//树的根点        private void Form1_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rootNode <span class="token operator">=</span> new TreeNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rootNode.Text <span class="token operator">=</span> <span class="token string">"默认列表"</span><span class="token punctuation">;</span>            tvMenu.Nodes.Add<span class="token punctuation">(</span>rootNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            //FileStream <span class="token function">file</span> <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"12.dat"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileStream <span class="token function">file</span> <span class="token operator">=</span> File.OpenRead<span class="token punctuation">(</span><span class="token string">"12.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>///反序列化            <span class="token keyword">if</span> <span class="token punctuation">(</span>file.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                BinaryFormatter fs <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                m_MP <span class="token operator">=</span> fs.Deserialize<span class="token punctuation">(</span>file<span class="token punctuation">)</span> as PlayManager<span class="token punctuation">;</span>             <span class="token punctuation">}</span>            file.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> file.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode n <span class="token operator">=</span> null<span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>SongInfo s <span class="token keyword">in</span> m_MP.PlaySong.Values<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                n <span class="token operator">=</span> new TreeNode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                n.Text <span class="token operator">=</span> s.name<span class="token punctuation">;</span>                n.Tag <span class="token operator">=</span> s<span class="token punctuation">;</span>                rootNode.Nodes.Add<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            rootNode.Expand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 改变宽度        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sender"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"e"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private void Form1_SizeChanged<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            this.media.Width <span class="token operator">=</span> groupBox1.Width-10<span class="token punctuation">;</span>            this.media.Height <span class="token operator">=</span> groupBox1.Height-30<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //双击时播放歌曲        private void tvMenu_NodeMouseDoubleClick<span class="token punctuation">(</span>object sender, TreeNodeMouseClickEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tvMenu.SelectedNode.Tag <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                SongInfo sSel <span class="token operator">=</span> tvMenu.SelectedNode.Tag as SongInfo<span class="token punctuation">;</span>                media.URL <span class="token operator">=</span> sSel.FilePath<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            try            <span class="token punctuation">{</span>                Songs <span class="token operator">=</span> tvMenu.SelectedNode.Tag as SongInfo<span class="token punctuation">;</span>                string lyricpath <span class="token operator">=</span> @<span class="token string">"lyric\" + Songs.name + "</span>.txt<span class="token string">";                Songs.lyrics = File.ReadAllText(lyricpath, Encoding.Default);//选择时显示歌词            }            catch{}            if (e.Node.Tag == null)            {                return;            }            tblyric.Text = ((e.Node.Tag) as SongInfo).lyrics;        }        private void Form1_FormClosing(object sender, FormClosingEventArgs e)        {///序列化            //FileStream file = new FileStream("</span>12.dat<span class="token string">", FileMode.Create);            //BinaryFormatter fs = new BinaryFormatter();            //fs.Serialize(file, m_MP);            //file.Close(); file.Dispose();            using(Stream filestream=File.OpenWrite("</span>12.dat"<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                bf.Serialize<span class="token punctuation">(</span>filestream, m_MP<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="lyric-cs"><a href="#lyric-cs" class="headerlink" title="lyric.cs"></a>lyric.cs</h2><pre class=" language-bash"><code class="language-bash">   <span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>  public  class lyric    <span class="token punctuation">{</span>        public string lyricPath <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//歌词的路径    <span class="token punctuation">}</span></code></pre><h2 id="PlayManager-cs"><a href="#PlayManager-cs" class="headerlink" title="PlayManager.cs"></a>PlayManager.cs</h2><pre class=" language-bash"><code class="language-bash">  using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Xml<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>namespace MusicTV<span class="token punctuation">{</span>    <span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>   public class PlayManager    <span class="token punctuation">{</span>       public PlayManager<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>           m_PlaySong <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, SongInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           m_lyric <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, lyric<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       private Dictionary<span class="token operator">&lt;</span>string, SongInfo<span class="token operator">></span> m_PlaySong<span class="token punctuation">;</span>       /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>       /// 歌曲信息       /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>       public Dictionary<span class="token operator">&lt;</span>string, SongInfo<span class="token operator">></span> PlaySong       <span class="token punctuation">{</span>           get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_PlaySong<span class="token punctuation">;</span> <span class="token punctuation">}</span>           <span class="token keyword">set</span> <span class="token punctuation">{</span> m_PlaySong <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>       /// 存入歌词       /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>       private Dictionary<span class="token operator">&lt;</span>string, lyric<span class="token operator">></span> m_lyric<span class="token punctuation">;</span>       public Dictionary<span class="token operator">&lt;</span>string, lyric<span class="token operator">></span> Lyric       <span class="token punctuation">{</span>           get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_lyric<span class="token punctuation">;</span> <span class="token punctuation">}</span>           <span class="token keyword">set</span> <span class="token punctuation">{</span> m_lyric <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="SongInfo-cs"><a href="#SongInfo-cs" class="headerlink" title="SongInfo.cs"></a>SongInfo.cs</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>   public class SongInfo    <span class="token punctuation">{</span>       public string name <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>  //歌名       public string FilePath <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span> //歌曲地址       public string Singer <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>//歌手名       public lyric SongWord <span class="token punctuation">{</span> <span class="token keyword">set</span><span class="token punctuation">;</span> get<span class="token punctuation">;</span> <span class="token punctuation">}</span>//歌词       public string lyrics <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C# Demo </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算器小demo</title>
      <link href="/2019/01/10/ji-suan-qi-xiao-demo/"/>
      <url>/2019/01/10/ji-suan-qi-xiao-demo/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/10/ji-suan-qi-xiao-demo/1.jpg" alt="图1"></p><h2 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h2><p>这是我读书时期，刚学C#，入门写的第一个demo，感觉非常经典，分享给大家看看</p><pre class=" language-bash"><code class="language-bash">namespace 计算器<span class="token punctuation">{</span>    public partial class Form1 <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public Form1<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private bool ClearDisplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>//清空第一次        private string Operand<span class="token punctuation">;</span>//记录加.减，乘。除        private double Operand1<span class="token punctuation">;</span>//第一个数字        private double Operand2<span class="token punctuation">;</span>//第二个数字        private double reslult<span class="token punctuation">;</span>        private void btn1_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lblwindows.Text <span class="token operator">==</span> <span class="token string">"0"</span><span class="token operator">||</span>ClearDisplay<span class="token operator">==</span>true<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> <span class="token punctuation">((</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">)</span>.Text<span class="token punctuation">;</span>                ClearDisplay <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> lblwindows.Text + <span class="token punctuation">((</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">)</span>.Text<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void btnfu_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ClearDisplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            double i <span class="token operator">=</span> Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>//取负号            lblwindows.Text <span class="token operator">=</span> <span class="token punctuation">(</span>0 - i<span class="token punctuation">)</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        private void btnBack_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lblwindows.Text.Length <span class="token operator">></span> 13<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lblwindows.Text<span class="token operator">=</span>lblwindows.Text.Substring<span class="token punctuation">(</span>0, 14<span class="token punctuation">)</span><span class="token punctuation">;</span>//Backspace键设置                lblwindows.Text <span class="token operator">=</span> lblwindows.Text.Substring<span class="token punctuation">(</span>0, lblwindows.Text.Length - 1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            if<span class="token punctuation">(</span>lblwindows.Text.Length<span class="token operator">></span>1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> lblwindows.Text.Substring<span class="token punctuation">(</span>0, lblwindows.Text.Length-1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lblwindows.Text.Length<span class="token operator">==</span>1<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void btnPlus_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Operand <span class="token operator">=</span> <span class="token punctuation">((</span>Button<span class="token punctuation">)</span>sender<span class="token punctuation">)</span>.Text<span class="token punctuation">;</span>            ClearDisplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            Operand1 <span class="token operator">=</span> Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnclear_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnEXE_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                reslult <span class="token operator">=</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>                Operand2 <span class="token operator">=</span> Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>                switch <span class="token punctuation">(</span>Operand<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"+"</span><span class="token keyword">:</span> reslult <span class="token operator">=</span> Operand1 + Operand2<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"-"</span><span class="token keyword">:</span> reslult <span class="token operator">=</span> Operand1 - Operand2<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"*"</span><span class="token keyword">:</span> reslult <span class="token operator">=</span> Operand1 * Operand2<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"/"</span><span class="token keyword">:</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>Operand2 <span class="token operator">==</span> 0<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"除数不能为0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            reslult <span class="token operator">=</span> Operand1 / Operand2<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"%"</span><span class="token keyword">:</span> reslult <span class="token operator">=</span> Operand1 % Operand2<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                lblwindows.Text <span class="token operator">=</span> reslult.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ClearDisplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnDot_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lblwindows.Text.Contains<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                lblwindows.Text <span class="token operator">=</span> lblwindows.Text + <span class="token string">"."</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> lblwindows.Text <span class="token operator">=</span> lblwindows.Text<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void btnSqrt_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.Sqrt<span class="token punctuation">(</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnSin_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.Sin<span class="token punctuation">(</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnTan_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.Tan<span class="token punctuation">(</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnCos_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.Cos<span class="token punctuation">(</span>Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnCountdown_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> <span class="token punctuation">(</span>1 / Convert.ToDouble<span class="token punctuation">(</span>lblwindows.Text<span class="token punctuation">))</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnAdd_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            lblwindows.Text <span class="token operator">=</span> Math.PI.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void MenuOpen_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token punctuation">(</span>new Form1<span class="token punctuation">(</span><span class="token punctuation">))</span>.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void MenuClose_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Application.Exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C# Demo </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>截图工具</title>
      <link href="/2019/01/10/jie-tu-gong-ju/"/>
      <url>/2019/01/10/jie-tu-gong-ju/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/10/jie-tu-gong-ju/2.jpg" alt="图2"></p><h2 id="截图工具"><a href="#截图工具" class="headerlink" title="截图工具"></a>截图工具</h2><p>有段时间公司没网了，写文档要用截图，无法使用心爱的QQ截图了，就自己写了个截图工具，bug有点，没有修复，能用，类似QQ截图，差不多，还蛮好用的，有网以后，就没怎么用了，把代码共享出来</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Drawing.Drawing2D<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>using System.Drawing.Imaging<span class="token punctuation">;</span>namespace ScreenCapture<span class="token punctuation">{</span>    public partial class frmScreen <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public frmScreen<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private Point startPoint <span class="token operator">=</span> Point.Empty<span class="token punctuation">;</span>        private Point endPoint <span class="token operator">=</span> Point.Empty<span class="token punctuation">;</span>        public Rectangle rect <span class="token operator">=</span> Rectangle.Empty<span class="token punctuation">;</span>        private void frmScreen_MouseDown<span class="token punctuation">(</span>object sender, MouseEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e.Button <span class="token operator">==</span> MouseButtons.Left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                this.startPoint <span class="token operator">=</span> e.Location<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void frmScreen_MouseMove<span class="token punctuation">(</span>object sender, MouseEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e.Button <span class="token operator">==</span> MouseButtons.Left<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                this.endPoint <span class="token operator">=</span> e.Location<span class="token punctuation">;</span>                Graphics grp <span class="token operator">=</span> this.CreateGraphics<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rect <span class="token operator">=</span> new Rectangle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rect.X <span class="token operator">=</span> <span class="token punctuation">(</span>this.startPoint.X <span class="token operator">&lt;=</span> this.endPoint.X<span class="token punctuation">)</span> ? this.startPoint.X <span class="token keyword">:</span> this.endPoint.X<span class="token punctuation">;</span>                rect.Y <span class="token operator">=</span> <span class="token punctuation">(</span>this.startPoint.Y <span class="token operator">&lt;=</span> this.endPoint.Y<span class="token punctuation">)</span> ? this.startPoint.Y <span class="token keyword">:</span> this.endPoint.Y<span class="token punctuation">;</span>                rect.Width <span class="token operator">=</span> Math.Abs<span class="token punctuation">(</span>this.endPoint.X-this.startPoint.X<span class="token punctuation">)</span><span class="token punctuation">;</span>                rect.Height <span class="token operator">=</span> Math.Abs<span class="token punctuation">(</span>this.endPoint.Y - this.startPoint.Y<span class="token punctuation">)</span><span class="token punctuation">;</span>                grp.Clear<span class="token punctuation">(</span>this.BackColor<span class="token punctuation">)</span><span class="token punctuation">;</span>                Rectangle border <span class="token operator">=</span> new Rectangle<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //这个是边框矩形                border.X <span class="token operator">=</span> rect.X - 1<span class="token punctuation">;</span>                border.Y <span class="token operator">=</span> rect.Y - 1<span class="token punctuation">;</span>                border.Width <span class="token operator">=</span> rect.Width<span class="token punctuation">;</span>                border.Height <span class="token operator">=</span> rect.Height<span class="token punctuation">;</span>                grp.DrawRectangle<span class="token punctuation">(</span>Pens.Blue, border<span class="token punctuation">)</span><span class="token punctuation">;</span>                grp.FillRectangle<span class="token punctuation">(</span>Brushes.Red, rect<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void frmScreen_MouseUp<span class="token punctuation">(</span>object sender, MouseEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Bitmap bitmap <span class="token operator">=</span> new Bitmap<span class="token punctuation">(</span>this.rect.Width,this.rect.Height<span class="token punctuation">)</span><span class="token punctuation">;</span>            Graphics grp <span class="token operator">=</span> Graphics.FromImage<span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>            grp.SmoothingMode <span class="token operator">=</span> SmoothingMode.HighQuality<span class="token punctuation">;</span>            //从指定的区域中复制图形            grp.CopyFromScreen<span class="token punctuation">(</span>this.rect.X, this.rect.Y, 0, 0, this.rect.Size<span class="token punctuation">)</span><span class="token punctuation">;</span>           ImageFormat format<span class="token operator">=</span>ImageFormat.Jpeg<span class="token punctuation">;</span>           saveFile.Filter <span class="token operator">=</span> <span class="token string">"图片|*.jpg"</span><span class="token punctuation">;</span>           saveFile.ShowDialog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           string strfile <span class="token operator">=</span> saveFile.FileName<span class="token punctuation">;</span>           bitmap.Save<span class="token punctuation">(</span>strfile<span class="token punctuation">)</span><span class="token punctuation">;</span>            this.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MessageBox.Show<span class="token punctuation">(</span><span class="token string">"截图成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C# Demo </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码生成器</title>
      <link href="/2019/01/10/dai-ma-sheng-cheng-qi/"/>
      <url>/2019/01/10/dai-ma-sheng-cheng-qi/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/01/10/dai-ma-sheng-cheng-qi/1.jpg" alt="图1"></p><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p>这是我读书时期，学C#，每次写上机练习，都要写3层架构，练增删改查，那个时候还不流行动软生成器和CodeSmith,所以就根据自己的写代码方式，写了个自己常用的代码生成器生成3层架构，这个要配合我写的SqlHelper一起使用</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Data.SqlClient<span class="token punctuation">;</span>using System.IO<span class="token punctuation">;</span>namespace code<span class="token punctuation">{</span>    class CreateDaL    <span class="token punctuation">{</span> ///增加         private  SqlConnection conn<span class="token punctuation">;</span> //连接        public  SqlConnection Conn        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> null <span class="token operator">||</span> conn.State <span class="token operator">==</span> ConnectionState.Broken<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>model.constr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> conn<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>       public  DataTable ExecuteDataTable<span class="token punctuation">(</span>string sql, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span> //查询结果集比较少的sql        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sql, Conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            SqlDataAdapter adapter <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                adapter.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            catch             <span class="token punctuation">{</span> <span class="token punctuation">}</span>            <span class="token keyword">return</span> dt<span class="token punctuation">;</span>          <span class="token punctuation">}</span>       public static string toNetType<span class="token punctuation">(</span>string dataType<span class="token punctuation">)</span> //数据库类型和C<span class="token comment" spellcheck="true">#类型换下</span>       <span class="token punctuation">{</span>           switch <span class="token punctuation">(</span>dataType<span class="token punctuation">)</span>           <span class="token punctuation">{</span>               <span class="token keyword">case</span> <span class="token string">"int"</span><span class="token keyword">:</span> <span class="token keyword">return</span> <span class="token string">"int"</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token string">"nvarchar"</span><span class="token keyword">:</span>               <span class="token keyword">case</span> <span class="token string">"varchar"</span><span class="token keyword">:</span>               <span class="token keyword">case</span> <span class="token string">"nchar"</span><span class="token keyword">:</span>                   <span class="token keyword">return</span> <span class="token string">"string"</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token string">"bit"</span><span class="token keyword">:</span> <span class="token keyword">return</span> <span class="token string">"bool"</span><span class="token punctuation">;</span>               <span class="token keyword">case</span> <span class="token string">"datetime"</span><span class="token keyword">:</span> <span class="token keyword">return</span> <span class="token string">"DateTime"</span><span class="token punctuation">;</span>               default: <span class="token keyword">return</span> <span class="token string">"object"</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>       /// 创建model        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"tablename"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>       public StringBuilder createModel<span class="token punctuation">(</span>string tablename<span class="token punctuation">)</span>       <span class="token punctuation">{</span>           DataTable dtCols <span class="token operator">=</span> ExecuteDataTable<span class="token punctuation">(</span><span class="token string">"SELECT * FROM  INFORMATION_SCHEMA.COlUMNS where Table_name=@table"</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@table"</span>, tablename<span class="token punctuation">))</span><span class="token punctuation">;</span>           StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Text;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data.SqlClient;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Collections.Generic;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"namespace "</span> + model.RootNamespace + <span class="token string">".Model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"partial class"</span> + <span class="token string">"  "</span> + tablename + <span class="token string">"Model"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dtCols.Rows<span class="token punctuation">)</span>           <span class="token punctuation">{</span>               string colname <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"COLUMN_NAME"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               string dateType <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"DATA_TYPE"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               string netType <span class="token operator">=</span> toNetType<span class="token punctuation">(</span>dateType<span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public"</span> + <span class="token string">"  "</span> + netType + <span class="token string">"  "</span> + colname + <span class="token string">"  "</span> + <span class="token string">"{get;set;}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> sb<span class="token punctuation">;</span>       <span class="token punctuation">}</span>       /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>       /// 创建model       /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>       /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"tablename"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>       /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>       public StringBuilder creatDAL<span class="token punctuation">(</span>string tablename <span class="token punctuation">)</span>//创建DAL       <span class="token punctuation">{</span>           <span class="token punctuation">{</span>               DataTable dtCols <span class="token operator">=</span> ExecuteDataTable<span class="token punctuation">(</span><span class="token string">"SELECT * FROM  INFORMATION_SCHEMA.COlUMNS where Table_name=@table and  COLUMN_NAME&lt;>'ID' "</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@table"</span>, tablename<span class="token punctuation">))</span><span class="token punctuation">;</span>               string<span class="token punctuation">[</span><span class="token punctuation">]</span> colnames <span class="token operator">=</span> new string<span class="token punctuation">[</span>dtCols.Rows.Count<span class="token punctuation">]</span><span class="token punctuation">;</span>//定义列为数组下面好用jion逗号分开               <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dtCols.Rows.Count<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   DataRow row <span class="token operator">=</span> dtCols.Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                   string colname <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span>row<span class="token punctuation">[</span><span class="token string">"Column_Name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   colnames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> colname<span class="token punctuation">;</span>               <span class="token punctuation">}</span>               string<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> new string<span class="token punctuation">[</span>dtCols.Rows.Count<span class="token punctuation">]</span><span class="token punctuation">;</span>//values后面的参数               <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameters.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"@"</span> + colnames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Text;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data.SqlClient;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Collections.Generic;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using "</span> + model.RootNamespace + <span class="token string">".Model;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"namespace "</span> + model.RootNamespace + <span class="token string">".DAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"partial class"</span> + <span class="token string">"  "</span> + tablename + <span class="token string">"DAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">#region 字符串并接（增加） </span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int insert("</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  "</span> +<span class="token string">"model){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"object obj=sqlHelper.ExecuteNonQuery("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"\"insert into  "</span> + tablename + <span class="token string">"("</span> + string.Join<span class="token punctuation">(</span><span class="token string">","</span>, colnames<span class="token punctuation">)</span> + <span class="token string">")values("</span> + string.Join<span class="token punctuation">(</span><span class="token string">","</span>, parameters<span class="token punctuation">)</span> + <span class="token string">");select identity\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               foreach <span class="token punctuation">(</span>string colname <span class="token keyword">in</span> colnames<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   sb.AppendLine<span class="token punctuation">(</span><span class="token string">",new SqlParameter(\""</span> + colname + <span class="token string">"\",model."</span> + colname + <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return Convert.ToInt32(obj);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">#endregion</span>               <span class="token comment" spellcheck="true">#region 字符串并接（删）</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int Delete(int id){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"object obj=sqlHelper.ExecuteNonQuery("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"\"delete from  "</span> + tablename + <span class="token string">" where id=@id\","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"new SqlParameter(\"id\",id));"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return Convert.ToInt32(obj);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">#endregion</span>               <span class="token comment" spellcheck="true">#region 字符串并接（更新）</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int Update("</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  "</span> + <span class="token string">"model){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"object obj=sqlHelper.ExecuteNonQuery("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"\"update  "</span> + tablename + <span class="token string">" set "</span> + <span class="token string">"("</span> + string.Join<span class="token punctuation">(</span><span class="token string">","</span>, colnames<span class="token punctuation">)</span> + <span class="token string">")where id=@id\","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"new SqlParameter(\"id\",model."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span>colnames<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"));"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return Convert.ToInt32(obj);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">#endregion</span>               <span class="token comment" spellcheck="true">#region 字符串并接（查询多行数据）</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public "</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  selectMoreRows(int id){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"DataTable dt = sqlHelper.ExecuteDataTable(\"select * from "</span>                   + tablename + <span class="token string">"  where id=@id\","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"new SqlParameter(\"id\",id));"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"if (dt.Rows.Count &lt;= 0){return null;}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">" else if (dt.Rows.Count == 1){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span>tablename + <span class="token string">"Model"</span> + <span class="token string">"  model= new  "</span> + tablename + <span class="token string">"Model();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"DataRow row = dt.Rows[0];"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dtCols.Rows<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   string colname <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"COLUMN_NAME"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   string dateType <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"DATA_TYPE"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   string netType <span class="token operator">=</span> toNetType<span class="token punctuation">(</span>dateType<span class="token punctuation">)</span><span class="token punctuation">;</span>                   sb.AppendLine<span class="token punctuation">(</span><span class="token string">"model."</span> + colname + <span class="token string">"="</span> + <span class="token string">"("</span> + netType + <span class="token string">")"</span> + <span class="token string">"row[\""</span> + colname + <span class="token string">"\"];"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return  model;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"else{throw new Exception(\"出现多条数据\");}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">#endregion</span>               <span class="token comment" spellcheck="true">#region 查询所有值用到了IEumerable接口</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public IEnumerable&lt;"</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"> ListAll(){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"List&lt;"</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"> list = new List&lt;"</span> +                 tablename + <span class="token string">"Model"</span> + <span class="token string">">();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"DataTable dt = sqlHelper.ExecuteDataTable(\"select * from "</span> +               tablename + <span class="token string">"\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"foreach (DataRow row in dt.Rows){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span>tablename + <span class="token string">"Model"</span> + <span class="token string">"  model= new  "</span> + tablename + <span class="token string">"Model();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dtCols.Rows<span class="token punctuation">)</span>               <span class="token punctuation">{</span>                   string colname <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"COLUMN_NAME"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   string dateType <span class="token operator">=</span> dr<span class="token punctuation">[</span><span class="token string">"DATA_TYPE"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   string netType <span class="token operator">=</span> toNetType<span class="token punctuation">(</span>dateType<span class="token punctuation">)</span><span class="token punctuation">;</span>                   sb.AppendLine<span class="token punctuation">(</span><span class="token string">"model."</span> + colname + <span class="token string">"="</span> + <span class="token string">"("</span> + netType + <span class="token string">")"</span> + <span class="token string">"row[\""</span> + colname + <span class="token string">"\"];"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"list.Add(model);}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return list;}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">#endregion</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> sb<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>       public StringBuilder creatBLL<span class="token punctuation">(</span>string tablename<span class="token punctuation">)</span> //创建BLL       <span class="token punctuation">{</span>           DataTable dtCols <span class="token operator">=</span> ExecuteDataTable<span class="token punctuation">(</span><span class="token string">"SELECT * FROM  INFORMATION_SCHEMA.COlUMNS where Table_name=@table and  COLUMN_NAME&lt;>'ID' "</span>, new SqlParameter<span class="token punctuation">(</span><span class="token string">"@table"</span>, tablename<span class="token punctuation">))</span><span class="token punctuation">;</span>           StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Text;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Data.SqlClient;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using System.Collections.Generic;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using "</span> + model.RootNamespace + <span class="token string">".DAL;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"using "</span> + model.RootNamespace + <span class="token string">".Model;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"namespace "</span> + model.RootNamespace + <span class="token string">".BLL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"partial class"</span> + <span class="token string">"  "</span> + tablename + <span class="token string">"BLL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"{"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#region 字符串并接（增加）</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int insert("</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  "</span> + <span class="token string">"model){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span>+tablename+<span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"insert(model);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           <span class="token comment" spellcheck="true">#region 字符串并接（删）</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int Delete(int id){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span> + tablename + <span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"Delete(id);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           <span class="token comment" spellcheck="true">#region 字符串并接（更新）</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public int Update("</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  "</span> + <span class="token string">"model){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span> + tablename + <span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"Update(model);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           <span class="token comment" spellcheck="true">#region 字符串并接（查询多行数据）</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public "</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">"  selectMoreRows(int id){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span> + tablename + <span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"selectMoreRows(id);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           <span class="token comment" spellcheck="true">#region 查询所有值用到了IEumerable接口</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"public IEnumerable&lt;"</span> + tablename + <span class="token string">"Model"</span> + <span class="token string">">  ListAll(){"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"return new  "</span> + tablename + <span class="token string">"DAL()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"ListAll();"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">#endregion</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           sb.AppendLine<span class="token punctuation">(</span><span class="token string">"}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> sb<span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>//model文件namespace code<span class="token punctuation">{</span>    class model    <span class="token punctuation">{</span>       static public string FilePath <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> //路径       static public string constr <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//连接字符串       static public string BuilderDAL <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//DAL拼接数据       static public string BuilderModel <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//Model拼接数据       static public string BuilderBLL <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//BLL拼接数据       static public string RootNamespace <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//命名空间    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github代码下载：<a href="https://github.com/zy20081/practice.git" target="_blank" rel="noopener">https://github.com/zy20081/practice.git</a></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> C# Demo </tag>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#之Socket</title>
      <link href="/2019/01/09/c-zhi-socket/"/>
      <url>/2019/01/09/c-zhi-socket/</url>
      
        <content type="html"><![CDATA[<h2 id="C-中Socket的简单使用"><a href="#C-中Socket的简单使用" class="headerlink" title="C#中Socket的简单使用"></a>C#中Socket的简单使用</h2><ol><li>服务端监听某个端口</li><li>客户端向服务端地址和端口发起Socket连接请求</li><li>服务端收到连接请求后创建Socket连接，并维护这个连接队列。</li><li>客户端和服务端已经建立双工通信（即双向通信），客户端和服务端可以轻松方便的给彼此发送信息<br><img src="/2019/01/09/c-zhi-socket/1.jpg" alt="图1"><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2></li><li>动态端口 从49152-65535</li><li>机器通常从1024起分配动态端口</li><li>公认端口：0-1023，注册端口： 1024-49151<br>，SUN的RPC端口从 32768开始</li><li>查看端口方式： netstat -a -n<h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><img src="/2019/01/09/c-zhi-socket/2.jpg" alt="图2"><br><img src="/2019/01/09/c-zhi-socket/3.jpg" alt="图3"><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><img src="/2019/01/09/c-zhi-socket/4.jpg" alt="图4"><br><img src="/2019/01/09/c-zhi-socket/5.jpg" alt="图5"><br><img src="/2019/01/09/c-zhi-socket/6.jpg" alt="图6"></li></ol><p>服务端代码：</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Net.Sockets<span class="token punctuation">;</span>using System.Threading<span class="token punctuation">;</span>namespace ChatMain<span class="token punctuation">{</span>    public partial class ChatMain <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public ChatMain<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Control.CheckForIllegalCrossThreadCalls <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Socket<span class="token operator">></span> clientSocketList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Socket<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        private void btnStart_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string ip <span class="token operator">=</span> this.txtIP.Text<span class="token punctuation">;</span>            //创建IP            IPAddress ipAddress <span class="token operator">=</span> IPAddress.Parse<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建代表本机的节点对象：包含IP和端口            IPEndPoint endPoint<span class="token operator">=</span>new IPEndPoint<span class="token punctuation">(</span>ipAddress,int.Parse<span class="token punctuation">(</span>this.txtPort.Text<span class="token punctuation">))</span><span class="token punctuation">;</span>             //创建Socket：第一参数：寻址方式，第二个参数： socket传输方式Stream Tcp方式  Dgram:UDP  第三个参数：协议            Socket socket <span class="token operator">=</span> new Socket<span class="token punctuation">(</span>AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>            //绑定端口和IP            socket.Bind<span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>            //开启监听，请求连接的队列的长度            socket.Listen<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token punctuation">;</span>            //线程池开启 监听客户端连接            ThreadPool.QueueUserWorkItem<span class="token punctuation">(</span>new WaitCallback<span class="token punctuation">(</span>this.statAccept<span class="token punctuation">)</span>, socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            this.txtLog.Text +<span class="token operator">=</span> <span class="token string">"服务端开启监听客户端连接了..\r\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public void statAccept<span class="token punctuation">(</span>object obj<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    //接受客户端的一个连接                    Socket proxSocket <span class="token operator">=</span> socket.Accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    //客户端代理socket对象的队列里面去                    clientSocketList.Add<span class="token punctuation">(</span>proxSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    //拿到客户端的端口和ip                    this.txtLog.Text +<span class="token operator">=</span> proxSocket.RemoteEndPoint.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"\r\n"</span><span class="token punctuation">;</span>                    //跟客户端进行通信 通过：proxSocket                    //proxSocket.Send<span class="token punctuation">(</span><span class="token punctuation">)</span>                    //proxSocket.Receive<span class="token punctuation">(</span><span class="token punctuation">)</span>                    ThreadPool.QueueUserWorkItem<span class="token punctuation">(</span>new WaitCallback<span class="token punctuation">(</span>this.StartReciveClientData<span class="token punctuation">)</span>, proxSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception  ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                socket.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 接受连接过来的IP的数据        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public void StartReciveClientData<span class="token punctuation">(</span>object obj<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Socket sokcet <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> new byte<span class="token punctuation">[</span>1024 * 1024 * 1<span class="token punctuation">]</span><span class="token punctuation">;</span>                int  realLenth<span class="token operator">=</span> sokcet.Receive<span class="token punctuation">(</span>buffer,0,buffer.Length,SocketFlags.None<span class="token punctuation">)</span><span class="token punctuation">;</span>                string strResult <span class="token operator">=</span> Encoding.Default.GetString<span class="token punctuation">(</span>buffer, 0, realLenth<span class="token punctuation">)</span><span class="token punctuation">;</span>                this.txtLog.Text +<span class="token operator">=</span> sokcet.RemoteEndPoint.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">":"</span> + strResult + <span class="token string">"\r\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void btnStarClient_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ChatClient client <span class="token operator">=</span> new ChatClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnSend_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            foreach <span class="token punctuation">(</span>var socket <span class="token keyword">in</span> clientSocketList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                string strText <span class="token operator">=</span> this.txtMsg.Text<span class="token punctuation">;</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> Encoding.Default.GetBytes<span class="token punctuation">(</span>strText<span class="token punctuation">)</span><span class="token punctuation">;</span>                socket.Send<span class="token punctuation">(</span>data, 0, data.Length, SocketFlags.None<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端代码：</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.Net.Sockets<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Threading<span class="token punctuation">;</span>namespace ChatMain<span class="token punctuation">{</span>    public partial class ChatClient <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public Socket CurrentSocket <span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public ChatClient<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnConnect_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>            IPAddress ipAddress <span class="token operator">=</span> IPAddress.Parse<span class="token punctuation">(</span>this.txtIP.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            IPEndPoint endPoint<span class="token operator">=</span>new IPEndPoint<span class="token punctuation">(</span>ipAddress,int.Parse<span class="token punctuation">(</span>this.txtPort.Text<span class="token punctuation">))</span><span class="token punctuation">;</span>            //创建个Socket            socket <span class="token operator">=</span> new Socket<span class="token punctuation">(</span>AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket.Connect<span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>            ThreadPool.QueueUserWorkItem<span class="token punctuation">(</span>new WaitCallback<span class="token punctuation">(</span>Recive<span class="token punctuation">)</span>, socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            this.lbStatus.Text <span class="token operator">=</span> <span class="token string">"已连接"</span><span class="token punctuation">;</span>            CurrentSocket <span class="token operator">=</span> socket<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //接受        public void Recive<span class="token punctuation">(</span>object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> socket.Connected<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> new byte<span class="token punctuation">[</span>1024 * 1024<span class="token punctuation">]</span><span class="token punctuation">;</span>                int realLength <span class="token operator">=</span> socket.Receive<span class="token punctuation">(</span>buffer, 0, buffer.Length,SocketFlags.None<span class="token punctuation">)</span><span class="token punctuation">;</span>               //接受字符串                string txt <span class="token operator">=</span> Encoding.Default.GetString<span class="token punctuation">(</span>buffer, 0, realLength<span class="token punctuation">)</span><span class="token punctuation">;</span>                this.txtLog.Text +<span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"接受消息：{0}"</span>, txt<span class="token punctuation">)</span><span class="token punctuation">;</span>                this.txtLog.Text +<span class="token operator">=</span> <span class="token string">"\r\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        //发送        private void btnSend_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string strText <span class="token operator">=</span> this.txtMsg.Text<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>string.IsNullOrEmpty<span class="token punctuation">(</span>strText<span class="token punctuation">))</span> <span class="token punctuation">{</span>                this.txtLog.Text <span class="token operator">=</span> <span class="token string">"发送的消息不能为空"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>CurrentSocket <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox.Show<span class="token punctuation">(</span><span class="token string">"请先连接服务端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            byte<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> Encoding.Default.GetBytes<span class="token punctuation">(</span>strText<span class="token punctuation">)</span><span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                CurrentSocket.Send<span class="token punctuation">(</span>data, 0, data.Length, 0<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SqlServer总结</title>
      <link href="/2019/01/09/sqlserver-zong-jie/"/>
      <url>/2019/01/09/sqlserver-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>一下都是自己写的，总结的，不是照搬网上的，只是分享，其中也有些小案例分享</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre class=" language-bash"><code class="language-bash">create database schoolAon primary<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'MyschoolA'</span>, filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA.mdf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>500mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>,<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'MyschoolA_2'</span>,  filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA_2.ndf'</span>,  size<span class="token operator">=</span>3mb,  maxsize<span class="token operator">=</span>500mb,  filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span>   name <span class="token operator">=</span><span class="token string">'MyschoolA_log'</span>,   filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA_log.ldf'</span>,   size<span class="token operator">=</span>3mb,   maxsize<span class="token operator">=</span>500mb,   filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>约束： alter table Users add constraint uk_LoginID unique<span class="token punctuation">(</span>loginID<span class="token punctuation">)</span>唯一约束</code></pre><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><pre class=" language-bash"><code class="language-bash">--pageSize:一页有多少条--pageIndex:第几页--totalCount:总共有多少条CREATE PROC GetPageData    @pageSize int,    @pageIndex int,    @totalCount int outputas<span class="token keyword">select</span> * into <span class="token comment" spellcheck="true">#temp from </span><span class="token punctuation">(</span>    <span class="token keyword">select</span> * from T_Customer<span class="token punctuation">)</span> as T<span class="token keyword">declare</span> @str nvarchar<span class="token punctuation">(</span>500<span class="token punctuation">)</span><span class="token keyword">set</span> @str<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'select top('</span>+cast<span class="token punctuation">(</span>@pageSize as nvarchar<span class="token punctuation">(</span>32<span class="token punctuation">))</span>+<span class="token string">') * from #Temp where Id not in (select top('</span>+cast<span class="token variable"><span class="token punctuation">((</span>@pageIndex<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">*</span>@pageSize as nvarchar<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">))</span></span>+<span class="token string">') Id FROM #Temp order by Id)order by Id'</span><span class="token punctuation">)</span><span class="token function">exec</span> <span class="token punctuation">(</span>@str<span class="token punctuation">)</span><span class="token keyword">select</span> @totalCount<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>1<span class="token punctuation">)</span> from <span class="token comment" spellcheck="true">#Temp;</span>drop table <span class="token comment" spellcheck="true">#Temp</span><span class="token keyword">declare</span> @count int<span class="token function">exec</span> GetPageData 4,2,@count////////////////////////////////////ALTER proc <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span>.<span class="token punctuation">[</span>usp_UserInfo_LoadPageData<span class="token punctuation">]</span>@pageSize int,@pageIndex int,@totalCount int outputas--select * from <span class="token punctuation">(</span>--    <span class="token keyword">select</span> ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> over<span class="token punctuation">(</span>order by userinfoid<span class="token punctuation">)</span> num,* from UserInfo--<span class="token punctuation">)</span>as temp where temp.num<span class="token operator">></span><span class="token punctuation">(</span>@pageIndex-1<span class="token punctuation">)</span>*@pageSize and temp.num<span class="token operator">&lt;=</span>@pageIndex*@pageSize<span class="token keyword">select</span> top<span class="token punctuation">(</span>@pageSize<span class="token punctuation">)</span> * from UserInfo where UserInfoID not <span class="token keyword">in</span><span class="token punctuation">(</span>select top<span class="token punctuation">(</span>@pageSize*<span class="token punctuation">(</span>@pageIndex-1<span class="token punctuation">))</span>UserInfoID from UserInfo<span class="token punctuation">)</span><span class="token keyword">select</span> @totalCount<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>1<span class="token punctuation">)</span> from UserInfo------------------正序和到序SELECT * FROM <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">top</span> 10 * from ztrqzc where  num<span class="token operator">></span>all<span class="token punctuation">(</span>select <span class="token function">top</span> 20 num from ztrqzc  order by num <span class="token punctuation">)</span>   order by num  <span class="token punctuation">)</span> temp ORDER BY temp.createdate desc</code></pre><h2 id="事务扩展"><a href="#事务扩展" class="headerlink" title="事务扩展"></a>事务扩展</h2><pre class=" language-bash"><code class="language-bash"> begin transaction<span class="token keyword">declare</span> @errorSum int <span class="token keyword">set</span> @errorSum<span class="token operator">=</span>0--查询tbResults表中所有Y2学生的考试成绩，保存到新表HistoreResult中<span class="token keyword">select</span> tbResults.* into HistoreResult from tbResults <span class="token function">join</span> dbo.students on tbResults.stuID<span class="token operator">=</span>students.stuIDinner <span class="token function">join</span> dbo.GradeInfo on dbo.GradeInfo.gID<span class="token operator">=</span>students.stuGIDwhere GradeInfo.gName<span class="token operator">=</span><span class="token string">'Y2'</span><span class="token keyword">set</span> @errorSum<span class="token operator">=</span>@errorSum+@@ERROR--删除tbResults表所有Y2学生的考试成绩delete dbo.tbResults from  dbo.tbResults inner <span class="token function">join</span> students on  dbo.tbResults.stuID<span class="token operator">=</span>students.stuIDinner <span class="token function">join</span> dbo.GradeInfo on  dbo.GradeInfo.gID<span class="token operator">=</span>students.stuGIDwhere gName<span class="token operator">=</span><span class="token string">'Y2'</span><span class="token keyword">set</span> @errorSum<span class="token operator">=</span>@errorSum+@@ERROR--删除dbo.students表所有Y2学生的记录，保存到新表HistoreResult中--删除dbo.students表所有Y2学生的记录--根据是否有错误，确认事务是提交还是撤销</code></pre><h2 id="bank案例-触发器事务等"><a href="#bank案例-触发器事务等" class="headerlink" title="bank案例 触发器事务等"></a>bank案例 触发器事务等</h2><pre class=" language-bash"><code class="language-bash">Create Database Bankon primary<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'bank'</span>,filename<span class="token operator">=</span><span class="token string">'D:\database\bank.mdf'</span>,size<span class="token operator">=</span>3mb,maxsize<span class="token operator">=</span>500mb,filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'bank_log'</span>, filename<span class="token operator">=</span><span class="token string">'D:\database\bank_log.ldf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>500mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>use Bankgocreate table bank<span class="token punctuation">(</span>bankID  int identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span> not null,  customerName char<span class="token punctuation">(</span>10<span class="token punctuation">)</span> not null,--顾客姓名 currentMoney money not null --当前<span class="token punctuation">)</span>alter table bank drop column  currentMoeny --删字段alter table bank add currentMoney money not null--加字段alter table bank add constraint CK_currentMoney check<span class="token punctuation">(</span>currentMoney<span class="token operator">>=</span>1<span class="token punctuation">)</span> --检查约束<span class="token keyword">select</span> * from bankinsert into bank<span class="token punctuation">(</span>customerName,currentMoney<span class="token punctuation">)</span>values<span class="token punctuation">(</span><span class="token string">'小小'</span>,1000<span class="token punctuation">)</span>insert into bank<span class="token punctuation">(</span>customerName,currentMoney<span class="token punctuation">)</span>values<span class="token punctuation">(</span><span class="token string">'dada'</span>,1<span class="token punctuation">)</span>---事务begin transaction<span class="token keyword">declare</span> @errorNum int<span class="token keyword">set</span> @errorNum<span class="token operator">=</span>0update bank <span class="token keyword">set</span> currentMoney<span class="token operator">=</span>currentMoney-200 where customerName<span class="token operator">=</span><span class="token string">'小小'</span><span class="token keyword">set</span> @errorNum <span class="token operator">=</span>@errorNum+@@ERRORupdate bank <span class="token keyword">set</span> currentMoney<span class="token operator">=</span>currentMoney+800 where customerName<span class="token operator">=</span><span class="token string">'dada'</span><span class="token keyword">set</span> @errorNum <span class="token operator">=</span>@errorNum+@@ERROR<span class="token keyword">if</span> @errorNum<span class="token operator">&lt;</span><span class="token operator">></span>0beginprint <span class="token string">'转账失败'</span>rollback --回滚end<span class="token keyword">else</span>beginprint <span class="token string">'转账成功'</span>commit --提交print<span class="token string">'转账之后的信息'</span><span class="token keyword">select</span> * from bankenduse master<span class="token keyword">select</span> * from sysdatabases<span class="token function">exec</span> sp_databases--存储过程use Bankgocreate proc getBank@cateId int as begin<span class="token keyword">select</span> * from bank where bankID<span class="token operator">=</span>@cateIdendgoalter proc getBank--修改as begin<span class="token keyword">select</span> * from dbo.bankend<span class="token function">exec</span> getBank use Bank--存储过程分页goalter proc getBank@pageSize int <span class="token operator">=</span>1,@pageindex int <span class="token operator">=</span>5,@rowCount int  output ,@pageCount int outputas begin<span class="token keyword">select</span> * from<span class="token punctuation">(</span>select ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span>over<span class="token punctuation">(</span>order by bankID<span class="token punctuation">)</span> as R, * from bank<span class="token punctuation">)</span> as b where b.R<span class="token operator">></span><span class="token punctuation">(</span>@pageSize-1<span class="token punctuation">)</span>*@pageindex and b.R <span class="token operator">&lt;=</span>@pageSize*@pageindex<span class="token keyword">select</span> @rowCount<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from bank<span class="token keyword">set</span> @pageCount<span class="token operator">=</span>ceiling<span class="token punctuation">(</span>convert<span class="token punctuation">(</span>float,<span class="token punctuation">(</span>@rowCount/@pageindex<span class="token punctuation">))</span><span class="token punctuation">)</span>end<span class="token keyword">declare</span> @pi int, @ps int, @rc int, @pc int<span class="token keyword">set</span> @pi<span class="token operator">=</span>2  --保存页码<span class="token keyword">set</span> @ps<span class="token operator">=</span>5  -- 保存页容量<span class="token punctuation">(</span>每页显示多少行<span class="token punctuation">)</span><span class="token keyword">set</span> @rc<span class="token operator">=</span>0  --总行数 <span class="token keyword">set</span> @pc<span class="token operator">=</span>0  --总页数<span class="token function">exec</span> getBank @pi,@ps,@rc output,@pc output<span class="token keyword">select</span> @pi 页码,@ps 页容量, @rc 总共行数,@pc 总页数--触发器insert into bank<span class="token punctuation">(</span>customerName,currentMoney<span class="token punctuation">)</span>values<span class="token punctuation">(</span><span class="token string">'小周'</span>,2600<span class="token punctuation">)</span>gocreate Trigger chubank on bank<span class="token keyword">for</span> insertas begin<span class="token keyword">select</span> * from bankenddrop Trigger chubank  --alter--视图 不同权限的人看到的不同的视图不一样，其实都是一个表中,当成虚拟表，就是查询语句use Bankgoalter  view vw_customer_currentMoneyas <span class="token keyword">select</span> 姓名<span class="token operator">=</span>customerName,余额<span class="token operator">=</span>currentMoney from bank where bankID<span class="token operator">=</span>1go--查询视图<span class="token keyword">select</span> * from vw_customer_currentMoney---索引 index create <span class="token punctuation">[</span>unique<span class="token punctuation">]</span>唯一， 主键 ，<span class="token punctuation">[</span>clustered<span class="token punctuation">]</span>聚集 <span class="token punctuation">[</span>nonclustered<span class="token punctuation">]</span>非聚集--drop index 表名.索引名 放在sysindexes,索引是建在没个表中的create index index_bank on bank<span class="token punctuation">(</span>bankID<span class="token punctuation">)</span>with fillfactor<span class="token operator">=</span>30<span class="token keyword">select</span> name from sysindexes where name <span class="token operator">=</span><span class="token string">'index_bank'</span><span class="token function">exec</span> sp_helpindex bank--存储过程中的一个系统存储过程go <span class="token function">exec</span> sp_columns bank<span class="token function">exec</span> sp_help bank<span class="token function">exec</span> sp_helpconstraint bank</code></pre><h2 id="汽车案例创建信息表"><a href="#汽车案例创建信息表" class="headerlink" title="汽车案例创建信息表"></a>汽车案例创建信息表</h2><pre class=" language-bash"><code class="language-bash"> --汽车租赁系统create database dbTrafficson<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'dbTraffics'</span>, filename<span class="token operator">=</span><span class="token string">'E:\sql\dbTraffics.mdf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>1024mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>,<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'dbTraffics_ndf'</span>, filename<span class="token operator">=</span><span class="token string">'E:\sql\dbTraffics_ndf.ndf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>1024mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'dbTraffics_log'</span>, filename<span class="token operator">=</span><span class="token string">'E:\sql\dbTraffics.ldf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>1024mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>gouse dbTrafficsgo--类型create table tbType<span class="token punctuation">(</span>  tID int primary key not null,  tName nvarchar<span class="token punctuation">(</span>50<span class="token punctuation">)</span>,  Remarks nvarchar<span class="token punctuation">(</span>200<span class="token punctuation">)</span> null<span class="token punctuation">)</span>--创建tbTraffics表保存汽车信息：create table tbTraffics<span class="token punctuation">(</span> RID bigint, Number  nvarchar<span class="token punctuation">(</span>50<span class="token punctuation">)</span> not null primary key, Type int foreign key references tbType<span class="token punctuation">(</span>tID<span class="token punctuation">)</span>, Name   nvarchar<span class="token punctuation">(</span>20<span class="token punctuation">)</span> not null, color nvarchar<span class="token punctuation">(</span>20<span class="token punctuation">)</span> not null, DailyRent float default<span class="token punctuation">(</span>0.0<span class="token punctuation">)</span>,--日租金 YearsOfservice int default<span class="token punctuation">(</span>12<span class="token punctuation">)</span>,--使用年限 Load nvarchar<span class="token punctuation">(</span>20<span class="token punctuation">)</span><span class="token punctuation">)</span>go</code></pre><h2 id="项目里存储过程分享"><a href="#项目里存储过程分享" class="headerlink" title="项目里存储过程分享"></a>项目里存储过程分享</h2><pre class=" language-bash"><code class="language-bash"> USE <span class="token punctuation">[</span>GSSMS<span class="token punctuation">]</span>GO/****** Object:  StoredProcedure <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span>.<span class="token punctuation">[</span>getprdouceStudents<span class="token punctuation">]</span>    Script Date: 03/17/2013 16:48:05 ******/SET ANSI_NULLS ONGOSET QUOTED_IDENTIFIER ONGOALTER proc <span class="token punctuation">[</span>dbo<span class="token punctuation">]</span>.<span class="token punctuation">[</span>getprdouceStudents<span class="token punctuation">]</span>@pageSize int <span class="token operator">=</span>5,--每页行数,页的容量@pageindex int <span class="token operator">=</span>1, --页的索引@rowCount int output, --总行数（传出参数）@pageCount int output --总页数（传出参数）asbegin<span class="token keyword">select</span> * from<span class="token punctuation">(</span>select ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span>over<span class="token punctuation">(</span>order by SID<span class="token punctuation">)</span> as 序号,* from dbo.Students<span class="token punctuation">)</span>as b whereb.序号<span class="token operator">></span><span class="token punctuation">(</span>@pageindex-1<span class="token punctuation">)</span>*@pageSize and b.序号<span class="token operator">&lt;=</span>@pageindex*@pageSize<span class="token keyword">select</span> @rowCount<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from dbo.Students<span class="token keyword">set</span> @pageCount<span class="token operator">=</span>CEILING<span class="token punctuation">(</span>Convert<span class="token punctuation">(</span>float,@rowCount<span class="token punctuation">)</span>/Convert<span class="token punctuation">(</span>float,@pageSize<span class="token punctuation">))</span>end<span class="token keyword">declare</span> @ps int,@pi int,@rc int,@pc int<span class="token keyword">set</span> @ps<span class="token operator">=</span>5 --保存页面行数<span class="token keyword">set</span> @pi<span class="token operator">=</span>1 --保存页面索引<span class="token keyword">set</span> @rc<span class="token operator">=</span>0 --总行数<span class="token keyword">set</span> @pc<span class="token operator">=</span>0 --总页面<span class="token function">exec</span> getprdouceStudents @ps,@pi,@rc output,@pc output<span class="token keyword">select</span> @ps 页面数,@pi 页面行数,@rc 总共行数,@pc 总页面</code></pre><h2 id="金额自增"><a href="#金额自增" class="headerlink" title="金额自增"></a>金额自增</h2><pre class=" language-bash"><code class="language-bash"> <span class="token keyword">select</span> * from Books update Books <span class="token keyword">set</span> UnitPrice<span class="token operator">=</span>88go<span class="token keyword">declare</span> @position int,@price int<span class="token punctuation">;</span>    <span class="token keyword">set</span> @position<span class="token operator">=</span>17    <span class="token keyword">set</span> @price<span class="token operator">=</span>90while<span class="token punctuation">(</span>1<span class="token operator">=</span>1<span class="token punctuation">)</span>begin    update Books <span class="token keyword">set</span> UnitPrice<span class="token operator">=</span>@price where Id<span class="token operator">=</span>@position    <span class="token keyword">select</span> @position<span class="token operator">=</span>@position+1    <span class="token keyword">select</span> @price<span class="token operator">=</span>@price+2    if<span class="token punctuation">(</span>@position<span class="token operator">></span>35<span class="token punctuation">)</span>    begin    <span class="token keyword">break</span><span class="token punctuation">;</span>     endend</code></pre><h2 id="代码分享myTestBase"><a href="#代码分享myTestBase" class="headerlink" title="代码分享myTestBase"></a>代码分享myTestBase</h2><pre class=" language-bash"><code class="language-bash"> use myTestBasego<span class="token keyword">select</span> * from dbo.GradeInfo<span class="token keyword">select</span> * from dbo.students<span class="token keyword">select</span> * from dbo.tbCourses<span class="token keyword">select</span> * from dbo.tbResults----case .when<span class="token keyword">select</span> tbResults.stuID, students.stuName, tRscore 分数,成绩<span class="token operator">=</span>case                  when tRscore between 90 and 100 <span class="token keyword">then</span> <span class="token string">'A'</span>                 when  tRscore between 80 and 90 <span class="token keyword">then</span> <span class="token string">'B'</span>                 when  tRscore between 70 and 80 <span class="token keyword">then</span> <span class="token string">'C'</span>                 when  tRscore between 60 and 70 <span class="token keyword">then</span> <span class="token string">'D'</span>                 <span class="token keyword">else</span> <span class="token string">'E'</span>                 end from tbResults,students where tbResults.stuID<span class="token operator">=</span>students.stuID go ---if -else print--select *  from tbResults <span class="token keyword">declare</span> @score int  <span class="token keyword">select</span> @score<span class="token operator">=</span>avg<span class="token punctuation">(</span>tRscore<span class="token punctuation">)</span> from tbResults if<span class="token punctuation">(</span>@score<span class="token operator">></span>70<span class="token punctuation">)</span> begin print  <span class="token string">'优秀'</span> +convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>max<span class="token punctuation">)</span>,@score<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token function">top</span> 3 * from tbResults order by tRscore asc end <span class="token keyword">else</span> begin print<span class="token string">'一般'</span> <span class="token keyword">select</span> <span class="token function">top</span> 3 * from tbResults order by tRscore desc end go---while <span class="token keyword">break</span>  方法一Declare @n int while<span class="token punctuation">(</span>1<span class="token operator">=</span>1<span class="token punctuation">)</span>begin<span class="token keyword">select</span> @n<span class="token operator">=</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from tbResults r where r.tRscore <span class="token operator">&lt;</span>81<span class="token keyword">if</span> <span class="token punctuation">(</span>@n<span class="token operator">></span>0<span class="token punctuation">)</span>update tbResults <span class="token keyword">set</span> tRscore<span class="token operator">=</span>tRscore+2 where tRscore<span class="token operator">&lt;</span>98<span class="token keyword">else</span> <span class="token keyword">break</span>endprint <span class="token string">'加分后成绩如下'</span><span class="token keyword">select</span> * from tbResults--- 方法二while<span class="token punctuation">(</span>exists<span class="token punctuation">(</span>select * from tbResults r where r.tRscore <span class="token operator">&lt;</span>83<span class="token punctuation">))</span>beginupdate tbResults <span class="token keyword">set</span> tRscore<span class="token operator">=</span>tRscore+2 where tRscore<span class="token operator">&lt;</span>98end<span class="token keyword">select</span> * from tbResults---内查询 <span class="token function">join</span><span class="token keyword">select</span> s.stuName 姓名,TR.tRscore 成绩,TC.tCName from students as s <span class="token function">join</span> tbResults as TR on <span class="token punctuation">(</span>s.stuID<span class="token operator">=</span>TR.stuID<span class="token punctuation">)</span> <span class="token function">join</span> dbo.tbCourses as TC on<span class="token punctuation">(</span>TR.tCID<span class="token operator">=</span>TC.tCID<span class="token punctuation">)</span>--where综合查询<span class="token keyword">select</span> s.stuName 姓名,TR.tRscore 成绩,TC.tCName from students as s,tbResults as TR,tbCourses as TC where s.stuID<span class="token operator">=</span>TR.stuID and TR.tCID<span class="token operator">=</span>TC.tCID--左连接,左边全部要显示,右边没有的为null<span class="token keyword">select</span> * from tbCourses as c left <span class="token function">join</span> tbResults as r on c.tCID<span class="token operator">=</span>r.tCID --右连接,右边全部要显示<span class="token keyword">select</span> * from tbCourses as c right <span class="token function">join</span> tbResults as r on c.tCID<span class="token operator">=</span>r.tCID --in，not <span class="token keyword">in</span><span class="token keyword">select</span> * from tbCourses where tCName in<span class="token punctuation">(</span><span class="token string">'程序逻辑'</span>,<span class="token string">'C#基础'</span><span class="token punctuation">)</span>--link<span class="token keyword">select</span> * from tbCourses where tCName like <span class="token string">'[^C#]%'</span>--不包含<span class="token keyword">select</span> * from tbCourses where tCName like <span class="token string">'C#%'</span>--包含print <span class="token string">'服务器'</span>+@@SERVERNAMEprint <span class="token string">'SQL的版本:'</span>+ @@VERSION<span class="token keyword">select</span> s.stuName,c.tCID,r.tRtime,r.tRscore,c.tCName from students as s,tbCourses as c,tbResults as r where s.stuID<span class="token operator">=</span>r.stuID and c.tCID<span class="token operator">=</span>r.tCID and r.tRtime<span class="token operator">=</span><span class="token string">'2012-12-24'</span>--子查询<span class="token keyword">select</span> * from students<span class="token keyword">select</span> * from tbCourses<span class="token keyword">select</span> * from tbResultsgoinsert into students<span class="token punctuation">(</span>stuName,stuSex,stuCardID,stuGID,BornDate<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'小肖'</span>,<span class="token string">'女'</span>,<span class="token string">'420108989099999999'</span>,1,1992-06-09<span class="token punctuation">)</span><span class="token keyword">declare</span> @birthday datetime<span class="token keyword">select</span> @birthday<span class="token operator">=</span>BornDate from students  where stuName<span class="token operator">=</span><span class="token string">'张三'</span><span class="token keyword">select</span> * from students where BornDate<span class="token operator">></span>@birthday<span class="token keyword">select</span> * from students where BornDate<span class="token operator">></span><span class="token punctuation">(</span>select BornDate from students  where stuName<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">)</span>--索引create index index_students on students<span class="token punctuation">(</span>stuID<span class="token punctuation">)</span>with fillfactor<span class="token operator">=</span>30<span class="token keyword">select</span> name from sysindexes where name<span class="token operator">=</span><span class="token string">'index_students_students_stuID'</span>drop index students.index_studentscreate unique index index_students_students_stuID on students<span class="token punctuation">(</span>stuID<span class="token punctuation">)</span>with fillfactor<span class="token operator">=</span>30<span class="token keyword">select</span> * from  students with <span class="token punctuation">(</span>index<span class="token operator">=</span>index_students_students_stuID<span class="token punctuation">)</span>where stuID<span class="token operator">=</span>3<span class="token function">exec</span> sp_helpindex students --存储过程中的一个系统存储过程--存储过程 编程基础没有达到90分名单goalter proc my_getResult@ucnt int outputas begin<span class="token keyword">select</span> R.tRscore,R.tCID,R.stuID,s.stuName,c.tCName from dbo.tbResults as R,dbo.students as s,tbCourses as c where R.stuID<span class="token operator">=</span>s.stuID  and R.tRscore<span class="token operator">&lt;</span>90 and c.tCID<span class="token operator">=</span>R.tCID<span class="token keyword">select</span> @ucnt<span class="token operator">=</span>count<span class="token punctuation">(</span>R.tRscore<span class="token punctuation">)</span> from dbo.tbResults as R,dbo.students as s,tbCourses as c where R.stuID<span class="token operator">=</span>s.stuID  and R.tRscore<span class="token operator">&lt;</span>90 and c.tCID<span class="token operator">=</span>R.tCIDend<span class="token keyword">declare</span> @ucn int<span class="token keyword">set</span>  @ucn<span class="token operator">=</span>0<span class="token function">exec</span> my_getResult @ucn output<span class="token keyword">select</span> @ucn 没到90分人数/////////////use mastergo--创建数据库<span class="token keyword">if</span> exists<span class="token punctuation">(</span>select * from sysdatabases where name<span class="token operator">=</span><span class="token string">'myTestBase'</span><span class="token punctuation">)</span>--所有数据库begindrop database myTestBaseendcreate database myTestBaseon<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'myTestBase'</span>,  filename<span class="token operator">=</span><span class="token string">'C:\Program Files\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\myTestBase.mdf'</span>,  size<span class="token operator">=</span>5mb,  maxsize<span class="token operator">=</span>100mb,  filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'myTestBase_log'</span>,  filename<span class="token operator">=</span><span class="token string">'C:\Program Files\Microsoft SQL Server\MSSQL10.MSSQLSERVER\MSSQL\DATA\myTestBase_log.ldf'</span>,  size<span class="token operator">=</span>5mb,  maxsize<span class="token operator">=</span>100mb,  filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>use myTestBase<span class="token keyword">if</span> exists<span class="token punctuation">(</span>select * from sysobjects where name<span class="token operator">=</span><span class="token string">'students'</span> <span class="token punctuation">)</span>begindrop table students --删除end go--创建表create table students <span class="token punctuation">(</span>  stuID int identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span> not null primary key, --标识列，设置主键  stuName nvarchar<span class="token punctuation">(</span>50<span class="token punctuation">)</span> not null,  stuSex char<span class="token punctuation">(</span>2<span class="token punctuation">)</span> default<span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">)</span>,  stuCardID char<span class="token punctuation">(</span>18<span class="token punctuation">)</span> null check<span class="token punctuation">(</span>len<span class="token punctuation">(</span>stuCardID<span class="token punctuation">)</span><span class="token operator">=</span>18<span class="token punctuation">)</span>,--约束  stuGID int null<span class="token punctuation">)</span>go create table GradeInfo <span class="token punctuation">(</span>   gID int  identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span> not null primary key, --标识列，设置主键   gName nvarchar<span class="token punctuation">(</span>50<span class="token punctuation">)</span> not null <span class="token punctuation">)</span> go --加外键约束 alter table students  add constraint FK_students_stuGID_GradeInfo foreign key<span class="token punctuation">(</span>stuID<span class="token punctuation">)</span> references GradeInfo<span class="token punctuation">(</span>gID<span class="token punctuation">)</span> go  --删约束 alter table 表名 drop constraint 约束名                            <span class="token keyword">select</span> * from students,GradeInfo---插入数据insert into GradeInfo<span class="token punctuation">(</span>gName<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'一年级'</span><span class="token punctuation">)</span>insert into GradeInfo<span class="token punctuation">(</span>gName<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'二年级'</span><span class="token punctuation">)</span>insert into GradeInfo<span class="token punctuation">(</span>gName<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'三年级'</span><span class="token punctuation">)</span>insert into students<span class="token punctuation">(</span>stuName,stuCardID,stuGID<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'张三'</span>,<span class="token string">'430111199909092075'</span>,1<span class="token punctuation">)</span>create table tbCourses --课程信息表<span class="token punctuation">(</span>  tCID int identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span>, tCName nvarchar<span class="token punctuation">(</span>30<span class="token punctuation">)</span>, tCClass int, gID int, tCRmark nvarchar<span class="token punctuation">(</span>max<span class="token punctuation">)</span>  <span class="token punctuation">)</span>create table tbResults --考试成绩表<span class="token punctuation">(</span>  tRID int ,tCID int, stuID int ,tRtime date, tRscore int ,tRRmark nvarchar<span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">select</span> * from students --学生表<span class="token keyword">select</span> * from GradeInfo --年纪表<span class="token keyword">select</span> * from tbCourses<span class="token keyword">select</span> * from tbResultstruncate table tbCourses --清除数据、还原标识列insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'程序逻辑'</span>,30,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'编程基础'</span>,30,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'面向对象设计'</span>,30,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'C#基础'</span>,123,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbCourses<span class="token punctuation">(</span>tCName,tCClass,gID,tCRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'C#基础'</span>,235,1,<span class="token string">'课程'</span><span class="token punctuation">)</span>insert into tbResults<span class="token punctuation">(</span>tCID,stuID,tRtime,tRscore,tRRmark<span class="token punctuation">)</span> values<span class="token punctuation">(</span>1,1,<span class="token string">'2012-12-24'</span>,88,<span class="token string">'语文'</span><span class="token punctuation">)</span>insert into students<span class="token punctuation">(</span>stuName,stuSex,stuCardID,stuGID<span class="token punctuation">)</span> values<span class="token punctuation">(</span><span class="token string">'小小'</span>,<span class="token string">'女'</span>,<span class="token string">'4201023001230120'</span>,2<span class="token punctuation">)</span><span class="token keyword">select</span> * from tbCourses where tCClass Like<span class="token string">'3%'</span><span class="token keyword">select</span> * from tbCourses where tCClass Like<span class="token string">'_3%'</span> delete  from tbCourses where tCID<span class="token operator">=</span>7--删 <span class="token keyword">select</span> * from tbCourses order by tCID ASCuse mastergo <span class="token keyword">select</span> * from sysdatabases  --查询所有数据库use myTestBasego<span class="token keyword">select</span> * from sys.objects where name<span class="token operator">=</span><span class="token string">'students'</span>create database schoolA --创建数据库on primary<span class="token punctuation">(</span> name<span class="token operator">=</span><span class="token string">'MyschoolA'</span>, filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA.mdf'</span>, size<span class="token operator">=</span>3mb, maxsize<span class="token operator">=</span>500mb, filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>,<span class="token punctuation">(</span>  name<span class="token operator">=</span><span class="token string">'MyschoolA_2'</span>,  filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA_2.ndf'</span>,  size<span class="token operator">=</span>3mb,  maxsize<span class="token operator">=</span>500mb,  filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>log on<span class="token punctuation">(</span>   name <span class="token operator">=</span><span class="token string">'MyschoolA_log'</span>,   filename<span class="token operator">=</span><span class="token string">'D:\database\MyschoolA_log.ldf'</span>,   size<span class="token operator">=</span>3mb,   maxsize<span class="token operator">=</span>500mb,   filegrowth<span class="token operator">=</span>10%<span class="token punctuation">)</span>--alter table tastduents 删除表示列--drop colum ssid--go---在加进去-- alter table tastduents -- ADD ssid int identity<span class="token punctuation">(</span>1,1<span class="token punctuation">)</span> not null  primary key-- go---内连接---- <span class="token keyword">select</span> Book.* from Book inner jion Catefory on Book.id<span class="token operator">=</span> Catefory.id---联合查询---select Book.* from Book,Catrfory where Book.id<span class="token operator">=</span>catefory.id-- case-when<span class="token keyword">select</span> tCClass ,<span class="token keyword">case</span> tCClasswhen 30 <span class="token keyword">then</span> <span class="token string">'正常课时'</span><span class="token keyword">else</span> <span class="token string">'正常+课时'</span>endfrom tbCourses</code></pre><h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><pre class=" language-bash"><code class="language-bash">  SELECT InforSource FROM dbo.viewShopAllInfo   ORDER BY CHARINDEX<span class="token punctuation">(</span>InforSource,<span class="token string">'1,0,2,3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Split函数"><a href="#Split函数" class="headerlink" title="Split函数"></a>Split函数</h2><pre class=" language-bash"><code class="language-bash"> CREATE FUNCTION dbo.SplitString<span class="token punctuation">(</span>          @Expression NVARCHAR<span class="token punctuation">(</span>4000<span class="token punctuation">)</span>, --要拆分的字符串          @Delimiter NVARCHAR<span class="token punctuation">(</span>100<span class="token punctuation">)</span>, --拆分符号          @n INT --要得到已拆分的返回字符串位置<span class="token punctuation">)</span>RETURNS NVARCHAR<span class="token punctuation">(</span>4000<span class="token punctuation">)</span>ASBEGINDECLARE @p INTSET @p <span class="token operator">=</span> CharIndex<span class="token punctuation">(</span>@Delimiter,@Expression<span class="token punctuation">)</span>  --获得第一个拆分符号所在的首位置IF @p <span class="token operator">></span> 0          BEGIN          SET @p <span class="token operator">=</span> @p + Len<span class="token punctuation">(</span>@Delimiter<span class="token punctuation">)</span> - 1          ENDDECLARE @i INTSET @i <span class="token operator">=</span> 1WHILE @i <span class="token operator">&lt;</span> @n          BEGIN          SET @i <span class="token operator">=</span> @i + 1          SET @Expression <span class="token operator">=</span> SubString<span class="token punctuation">(</span>@Expression, @p + 1,Len<span class="token punctuation">(</span>@Expression<span class="token punctuation">)</span> - @p <span class="token punctuation">)</span>          SET @p <span class="token operator">=</span> CharIndex<span class="token punctuation">(</span>@Delimiter,@Expression<span class="token punctuation">)</span>          IF @p <span class="token operator">></span> 0                    BEGIN                    SET @p <span class="token operator">=</span> @p + Len<span class="token punctuation">(</span>@Delimiter<span class="token punctuation">)</span> - 1                    END          ELSE                    BEGIN                    BREAK                    ENDENDDECLARE @s NVARCHAR<span class="token punctuation">(</span>1000<span class="token punctuation">)</span>IF @p <span class="token operator">=</span> 0 AND @i <span class="token operator">=</span> @n          BEGIN          SET @s <span class="token operator">=</span> @Expression          ENDELSE          IF @i <span class="token operator">=</span> @n          BEGIN          SET @s <span class="token operator">=</span> SubString<span class="token punctuation">(</span>@Expression, 1,@p - Len<span class="token punctuation">(</span>@Delimiter<span class="token punctuation">))</span>          ENDRETURN @sEND</code></pre><h2 id="substring用法"><a href="#substring用法" class="headerlink" title="substring用法"></a>substring用法</h2><pre class=" language-bash"><code class="language-bash"> SELECT keywords,substring<span class="token punctuation">(</span>substring<span class="token punctuation">(</span>keywords, CHARINDEX<span class="token punctuation">(</span><span class="token string">'$'</span>,keywords,CONVERT<span class="token punctuation">(</span>INT,CHARINDEX <span class="token punctuation">(</span><span class="token string">'$'</span>,keywords<span class="token punctuation">))</span>+1<span class="token punctuation">)</span>+1,100<span class="token punctuation">)</span>,  CHARINDEX<span class="token punctuation">(</span><span class="token string">'$'</span>,keywords,CONVERT<span class="token punctuation">(</span>INT,CHARINDEX <span class="token punctuation">(</span><span class="token string">'$'</span>,keywords<span class="token punctuation">))</span><span class="token punctuation">)</span>,100<span class="token punctuation">)</span>FROM dbo.house_searchs</code></pre><h2 id="增加字段"><a href="#增加字段" class="headerlink" title="增加字段"></a>增加字段</h2><pre class=" language-bash"><code class="language-bash"> --修改二手房查询的表结构ALTER TABLE house_searchs ADD sortdate datetime DEFAULT getdate<span class="token punctuation">(</span><span class="token punctuation">)</span>update house_searchs <span class="token keyword">set</span> sortdate <span class="token operator">=</span> convert<span class="token punctuation">(</span>datetime,left<span class="token punctuation">(</span>cast<span class="token punctuation">(</span>publicdate as varchar<span class="token punctuation">)</span>,4<span class="token punctuation">)</span> + <span class="token string">'-'</span> + substring<span class="token punctuation">(</span>cast<span class="token punctuation">(</span>publicdate as varchar<span class="token punctuation">)</span>,5,2<span class="token punctuation">)</span> +<span class="token string">'-'</span> + right<span class="token punctuation">(</span>cast<span class="token punctuation">(</span>publicdate as varchar<span class="token punctuation">)</span>,2<span class="token punctuation">)</span> + <span class="token string">' 00:00:00'</span><span class="token punctuation">)</span> </code></pre><h2 id="分组按照时间汇总"><a href="#分组按照时间汇总" class="headerlink" title="分组按照时间汇总"></a>分组按照时间汇总</h2><pre class=" language-bash"><code class="language-bash"> ---以部门,时间汇总 时间字段OIS_Date--这是取到所有的总和,我想要时间之间的总和<span class="token keyword">select</span> DeptID,    in_price <span class="token operator">=</span>sum<span class="token punctuation">(</span>CASE OIS_Type when <span class="token string">'4'</span>  <span class="token keyword">then</span> OIS_Price*OIS_Count END<span class="token punctuation">)</span>,    out_price <span class="token operator">=</span> sum<span class="token punctuation">(</span>CASE OIS_Type when <span class="token string">'7'</span>  <span class="token keyword">then</span> OIS_Price*OIS_Count END<span class="token punctuation">)</span>from Oper_OutInStockStreamWHERE  <span class="token punctuation">(</span>OIS_Date<span class="token operator">>=</span><span class="token string">'2015-01-27 00:00:01'</span> AND OIS_Date<span class="token operator">&lt;=</span><span class="token string">'2015-05-01 23:59:59'</span><span class="token punctuation">)</span>group by  DeptID</code></pre><h2 id="更新加行号"><a href="#更新加行号" class="headerlink" title="更新加行号"></a>更新加行号</h2><pre class=" language-bash"><code class="language-bash"> UPDATE His_Cart SET IsShopping<span class="token operator">=</span><span class="token string">'0'</span>,DETAIL_ID<span class="token operator">=</span>temp.ridFROM His_Cart,<span class="token punctuation">(</span>SELECT ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> OVER <span class="token punctuation">(</span>ORDER BY id<span class="token punctuation">)</span> rid,id FROM dbo.His_CartWHERE CreatedBy<span class="token operator">=</span><span class="token string">'jzt'</span><span class="token punctuation">)</span> temp WHERE His_Cart.ID<span class="token operator">=</span>temp.id</code></pre><h2 id="根据时间查询"><a href="#根据时间查询" class="headerlink" title="根据时间查询"></a>根据时间查询</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">select</span> * from info where DateDiff<span class="token punctuation">(</span>dd,datetime,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0 --查询24小时内的: <span class="token keyword">select</span> * from info where DateDiff<span class="token punctuation">(</span>hh,datetime,getDate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">&lt;=</span>24 --info为表名,datetime为数据库中的字段值--查询当天：<span class="token keyword">select</span> * from info where DateDiff<span class="token punctuation">(</span>dd,datetime,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0--查询24小时内的:<span class="token keyword">select</span> * from info where DateDiff<span class="token punctuation">(</span>hh,datetime,getDate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">&lt;=</span>24--info为表名,datetime为数据库中的字段值Sql代码--查询当天记录另类的方法 SELECT * FROM j_GradeShop WHERE <span class="token punctuation">(</span>GAddTime BETWEEN CONVERT<span class="token punctuation">(</span>datetime, LEFT<span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>, 10<span class="token punctuation">)</span> + ’ 00:00:00.000’<span class="token punctuation">)</span> AND CONVERT<span class="token punctuation">(</span>datetime, LEFT<span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>, 10<span class="token punctuation">)</span> + ’ 00:00:00.000’<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span> ORDER BY GAddTime DESC--查询当天记录另类的方法SELECT *FROM j_GradeShopWHERE <span class="token punctuation">(</span>GAddTime BETWEEN CONVERT<span class="token punctuation">(</span>datetime, LEFT<span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>, 10<span class="token punctuation">)</span> + ’ 00:00:00.000’<span class="token punctuation">)</span>AND CONVERT<span class="token punctuation">(</span>datetime, LEFT<span class="token punctuation">(</span>GETDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>, 10<span class="token punctuation">)</span> + ’ 00:00:00.000’<span class="token punctuation">)</span> + 1<span class="token punctuation">)</span>ORDER BY GAddTime DESCDATEDIFF 函数:语法:DATEDIFF <span class="token punctuation">(</span> datepart , startdate , enddate <span class="token punctuation">)</span>备注:enddate 减去 startdate。如果 startdate 晚于 enddate，则返回负值。如果结果超出整数值范围，则 DATEDIFF 将产生错误。对于毫秒，最大数是 24 天 20 小时 31 分钟零 23.647 秒。对于秒，最大数是 68 年。跨分钟、秒和毫秒等边界计算的方法使得 DATEDIFF 指定的结果在所有数据类型中均一致。结果是带正负号的整数值，它等于跨第一个和第二个日期间的 datepart 边界数。例如，在 1 月 4 日（星期日）和 1 月 11 日（星期日）之间的星期数是 1。可以再MSSQL中测试:Sql代码--两个时间差刚好是24 --打印的方式 print dateDiff<span class="token punctuation">(</span>hh,’2009-1-1 0:0:0’,’2009-1-2 0:0:0’<span class="token punctuation">)</span> --查询的方式 print dateDiff<span class="token punctuation">(</span>hh,’2009-1-1 0:0:0’,’2009-1-2 0:0:0’<span class="token punctuation">)</span>--两个时间差刚好是24--打印的方式print dateDiff<span class="token punctuation">(</span>hh,’2009-1-1 0:0:0’,’2009-1-2 0:0:0’<span class="token punctuation">)</span>--查询的方式print dateDiff<span class="token punctuation">(</span>hh,’2009-1-1 0:0:0’,’2009-1-2 0:0:0’<span class="token punctuation">)</span>Sql代码--本月记录 SELECT * FROM 表 WHERE datediff<span class="token punctuation">(</span>month,<span class="token punctuation">[</span>dateadd<span class="token punctuation">]</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0 --本周记录 SELECT * FROM 表 WHERE datediff<span class="token punctuation">(</span>week,<span class="token punctuation">[</span>dateadd<span class="token punctuation">]</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0 --包括本年这些查询方式是一样的--本月记录SELECT * FROM 表 WHERE datediff<span class="token punctuation">(</span>month,<span class="token punctuation">[</span>dateadd<span class="token punctuation">]</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0--本周记录SELECT * FROM 表 WHERE datediff<span class="token punctuation">(</span>week,<span class="token punctuation">[</span>dateadd<span class="token punctuation">]</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token operator">=</span>0sql server中的时间函数1. 当前系统日期、时间<span class="token keyword">select</span> getdate<span class="token punctuation">(</span><span class="token punctuation">)</span>2. dateadd 在向指定日期加上一段时间的基础上，返回新的 datetime 值例如：向日期加上2天<span class="token keyword">select</span> dateadd<span class="token punctuation">(</span>day,2,’2004-10-15’<span class="token punctuation">)</span> --返回：2004-10-17 00:00:00.0003. datediff 返回跨两个指定日期的日期和时间边界数。<span class="token keyword">select</span> datediff<span class="token punctuation">(</span>day,’2004-09-01’,’2004-09-18’<span class="token punctuation">)</span> --返回：174. datepart 返回代表指定日期的指定日期部分的整数。SELECT DATEPART<span class="token punctuation">(</span>month, ’2004-10-15’<span class="token punctuation">)</span> --返回 105. datename 返回代表指定日期的指定日期部分的字符串SELECT datename<span class="token punctuation">(</span>weekday, ’2004-10-15’<span class="token punctuation">)</span> --返回：星期五6. day<span class="token punctuation">(</span><span class="token punctuation">)</span>, month<span class="token punctuation">(</span><span class="token punctuation">)</span>,year<span class="token punctuation">(</span><span class="token punctuation">)</span> --可以与datepart对照一下<span class="token keyword">select</span> 当前日期<span class="token operator">=</span>convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">)</span>,120<span class="token punctuation">)</span>,当前时间<span class="token operator">=</span>convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>8<span class="token punctuation">)</span>,getdate<span class="token punctuation">(</span><span class="token punctuation">)</span>,114<span class="token punctuation">)</span><span class="token keyword">select</span> datename<span class="token punctuation">(</span>dw,’2004-10-15’<span class="token punctuation">)</span><span class="token keyword">select</span> 本年第多少周<span class="token operator">=</span>datename<span class="token punctuation">(</span>week,’2004-10-15’<span class="token punctuation">)</span>,今天是周几<span class="token operator">=</span>datename<span class="token punctuation">(</span>weekday,’2004-10-15’<span class="token punctuation">)</span>函数 参数/功能GetDate<span class="token punctuation">(</span> <span class="token punctuation">)</span> 返回系统目前的日期与时间DateDiff <span class="token punctuation">(</span>interval,date1,date2<span class="token punctuation">)</span> 以interval 指定的方式，返回date2 与date1两个日期之间的差值 date2-date1DateAdd <span class="token punctuation">(</span>interval,number,date<span class="token punctuation">)</span> 以interval指定的方式，加上number之后的日期DatePart <span class="token punctuation">(</span>interval,date<span class="token punctuation">)</span> 返回日期date中，interval指定部分所对应的整数值DateName <span class="token punctuation">(</span>interval,date<span class="token punctuation">)</span> 返回日期date中，interval指定部分所对应的字符串名称参数 interval的设定值如下：值 缩 写（Sql Server） Access 和 ASP 说明Year Yy yyyy 年 1753 ~ 9999Quarter Qq q 季 1 ~ 4Month Mm m 月1 ~ 12Day of year Dy y 一年的日数,一年中的第几日 1-366Day Dd d 日，1-31Weekday Dw w 一周的日数，一周中的第几日 1-7Week Wk ww 周，一年中的第几周 0 ~ 51Hour Hh h 时0 ~ 23Minute Mi n 分钟0 ~ 59Second Ss s 秒 0 ~ 59Millisecond Ms - 毫秒 0 ~ 999access 和 asp 中用date<span class="token punctuation">(</span><span class="token punctuation">)</span>和now<span class="token punctuation">(</span><span class="token punctuation">)</span>取得系统日期时间；其中DateDiff,DateAdd,DatePart也同是能用于Access和asp中，这些函数的用法也类似举例：1.GetDate<span class="token punctuation">(</span><span class="token punctuation">)</span> 用于sql server :select GetDate<span class="token punctuation">(</span><span class="token punctuation">)</span>2.DateDiff<span class="token punctuation">(</span>’s’,’2005-07-20’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 514592 秒DateDiff<span class="token punctuation">(</span>’d’,’2005-07-20’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 5 天3.DatePart<span class="token punctuation">(</span>’w’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 2 即星期一<span class="token punctuation">(</span>周日为1，周六为7<span class="token punctuation">)</span>DatePart<span class="token punctuation">(</span>’d’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 25即25号DatePart<span class="token punctuation">(</span>’y’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 206即这一年中第206天DatePart<span class="token punctuation">(</span>’yyyy’,’2005-7-25 22:56:32’<span class="token punctuation">)</span>返回值为 2005即2005年</code></pre><h2 id="表横向展示"><a href="#表横向展示" class="headerlink" title="表横向展示"></a>表横向展示</h2><pre class=" language-bash"><code class="language-bash"> SELECT PDNAME as 设备类别,  max<span class="token punctuation">(</span>case ftName when <span class="token string">'临床功能'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 临床功能,  max<span class="token punctuation">(</span>case ftName when <span class="token string">'有形风险'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 有形风险,  max<span class="token punctuation">(</span>case ftName when <span class="token string">'问题避免概率'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 问题避免概率,   max<span class="token punctuation">(</span>case ftName when <span class="token string">'事故历史'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 事故历史,  max<span class="token punctuation">(</span>case ftName when <span class="token string">'管理部门的特殊要求'</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> 0 end<span class="token punctuation">)</span> 管理部门的特殊要求  FROM<span class="token punctuation">(</span>SELECT  fs.PDCode ,        fdt.PDNAME PDNAME ,        ft.Name ftName ,        SUM<span class="token punctuation">(</span>CONVERT<span class="token punctuation">(</span>INT, fps.score<span class="token punctuation">))</span> scoreFROM    FixeaAssetsPMConS fs        LEFT JOIN FixeaAssetsPMScore fps ON fps.id <span class="token operator">=</span> fs.PMScoreID        LEFT JOIN dbo.FixeaAssetsPMScoreType ft ON ft.ID <span class="token operator">=</span> fps.NameTypeID        LEFT JOIN FixeaPreventiveDeviceType fdt ON fdt.PDCode <span class="token operator">=</span> fs.PDCodeGROUP BY ft.Name ,        fs.PDCode ,        fdt.PDNAMEHAVING fs.PDCode <span class="token operator">!=</span><span class="token string">''</span><span class="token punctuation">)</span> tbgroup by PDNAME     </code></pre><h2 id="无联系2个表拼接"><a href="#无联系2个表拼接" class="headerlink" title="无联系2个表拼接"></a>无联系2个表拼接</h2><pre class=" language-bash"><code class="language-bash"> SELECT  BuyDate,BaseID,sum<span class="token punctuation">(</span>IsBuycount<span class="token punctuation">)</span> IsBuycount,sum<span class="token punctuation">(</span>IsNollBuycount<span class="token punctuation">)</span> IsNollBuycount,sum<span class="token punctuation">(</span>HousePartner<span class="token punctuation">)</span> HousePartner FROM <span class="token punctuation">(</span>SELECT * FROM --购买者<span class="token punctuation">(</span>select convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span> BuyDate,BaseID, count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> IsBuycount,<span class="token string">''</span> AS IsNollBuycount,<span class="token string">''</span> AS HousePartnerfrom  dbo.RecCustomer WHERE IsBuy<span class="token operator">=</span>1  group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> a  UNION  SELECT * FROM  --没购买 <span class="token punctuation">(</span>select convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span> BuyDate,BaseID,<span class="token string">''</span> AS IsBuycount , count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> IsNollBuycount,<span class="token string">''</span> AS HousePartnerfrom  dbo.RecCustomer WHERE IsBuy<span class="token operator">=</span>0group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> b   UNION   --合伙人 SELECT * FROM <span class="token punctuation">(</span> <span class="token keyword">select</span> convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,CreateDate,120<span class="token punctuation">)</span> BuyDate,BaseID, <span class="token string">''</span> AS IsBuycount , <span class="token string">''</span> AS IsNollBuycount,count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> HousePartnerfrom  dbo.Partner_CommsionHouse WHERE IsDeleted<span class="token operator">=</span>0group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,CreateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> c <span class="token punctuation">)</span> temp WHERE temp.BaseID<span class="token operator">=</span><span class="token string">'A6F4C7A7-D308-4DA6-BD0F-B1F50E27783D'</span> AND temp.BuyDate BETWEEN <span class="token string">'2014-10-01'</span> and <span class="token string">'2014-10-21'</span> GROUP BY temp.BuyDate,temp.BaseID</code></pre><h2 id="有联系2个表拼接"><a href="#有联系2个表拼接" class="headerlink" title="有联系2个表拼接"></a>有联系2个表拼接</h2><pre class=" language-bash"><code class="language-bash">SELECT * FROM <span class="token punctuation">(</span> SELECT a.BaseID aBaseID,b.BaseID bBaseID,c.BaseID cBaseID, ISNULL<span class="token punctuation">(</span>BuyDate,ISNULL<span class="token punctuation">(</span>NullBuyDate,Date<span class="token punctuation">))</span> BuyDate,ISNULL<span class="token punctuation">(</span>Date,ISNULL<span class="token punctuation">(</span>BuyDate,NullBuyDate<span class="token punctuation">))</span> Date,ISNULL<span class="token punctuation">(</span>NullBuyDate,ISNULL<span class="token punctuation">(</span>BuyDate,Date<span class="token punctuation">))</span> NullBuyDate, ISNULL<span class="token punctuation">(</span>IsBuycount,0<span class="token punctuation">)</span> IsBuycount, ISNULL<span class="token punctuation">(</span>IsNollBuycount,0<span class="token punctuation">)</span> IsNollBuycount, ISNULL<span class="token punctuation">(</span>HousePartner,0<span class="token punctuation">)</span> HousePartner FROM <span class="token punctuation">(</span> <span class="token keyword">select</span> convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span> BuyDate,BaseID, count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> IsBuycountfrom  dbo.RecCustomer WHERE IsBuy<span class="token operator">=</span>1  group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> a RIGHT <span class="token function">join</span> <span class="token punctuation">(</span>select convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span> NullBuyDate,BaseID, count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> IsNollBuycountfrom  dbo.RecCustomer WHERE IsBuy<span class="token operator">=</span>0group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,UpdateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> b  ON  a.BuyDate<span class="token operator">=</span>b.NullBuyDate LEFT JOIN <span class="token punctuation">(</span>select convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,CreateDate,120<span class="token punctuation">)</span> Date,BaseID, count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> HousePartnerfrom  dbo.Partner_CommsionHouse WHERE IsDeleted<span class="token operator">=</span>0group by  convert<span class="token punctuation">(</span>varchar<span class="token punctuation">(</span>10<span class="token punctuation">)</span>,CreateDate,120<span class="token punctuation">)</span>,BaseID<span class="token punctuation">)</span> cON b.NullBuyDate<span class="token operator">=</span>c.Date<span class="token punctuation">)</span> temp WHERE temp.aBaseID<span class="token operator">=</span>temp.bBaseID AND  temp.aBaseID<span class="token operator">=</span><span class="token string">'A6F4C7A7-D308-4DA6-BD0F-B1F50E27783D'</span>AND temp.BuyDate BETWEEN   <span class="token string">'2014-10-16'</span>    AND  <span class="token string">'2014-10-22'</span></code></pre><h2 id="2个数据库表互相导数据"><a href="#2个数据库表互相导数据" class="headerlink" title="2个数据库表互相导数据"></a>2个数据库表互相导数据</h2><pre class=" language-bash"><code class="language-bash">服务器数据库之间互相导入数据insert into <span class="token punctuation">[</span>HPD2.0<span class="token punctuation">]</span>.dbo.SysMenu <span class="token keyword">select</span> * from <span class="token punctuation">[</span>10.3.1.27<span class="token punctuation">]</span>.<span class="token punctuation">[</span>HPD2.0<span class="token punctuation">]</span>.dbo.SysMenu要是找不到服务器--添加服务器EXEC sp_addlinkedserver@server<span class="token operator">=</span><span class="token string">'10.3.1.27'</span>,--被访问的服务器别名（习惯上直接使用目标服务器IP，或取个别名如：JOY）@srvproduct<span class="token operator">=</span><span class="token string">''</span>,@provider<span class="token operator">=</span><span class="token string">'SQLOLEDB'</span>,@datasrc<span class="token operator">=</span><span class="token string">'10.3.1.27'</span> --要访问的服务器--设置账号和密码EXEC sp_addlinkedsrvlogin<span class="token string">'10.3.1.27'</span>, <span class="token string">'false'</span>,NULL,<span class="token string">'sa'</span>, --帐号<span class="token string">'JZTeya0!'</span> --密码insert into <span class="token punctuation">[</span>shenzhengHPD2.0<span class="token punctuation">]</span>.dbo.BaseSupplierInfo <span class="token keyword">select</span> * from <span class="token punctuation">[</span>qingdaoHPD2.0<span class="token punctuation">]</span>.dbo.BaseSupplierInfo/////////////////////////列名不一定要相同，只要你在HH中列出要插入列的列表跟select from mm表中的选择的列的列表一一对应就可以了，当然两边的数据类型应该是兼容的。 insert into hh <span class="token punctuation">(</span>fielda,fieldb,fieldc<span class="token punctuation">)</span> <span class="token keyword">select</span> fieldx,fieldy,fieldz from mm 复制代码 代码如下:---更新计量点中不存在的数据,将台帐中的信息转移到计量点中 insert into MetricPoints <span class="token punctuation">(</span>MeterID,MetricPointName,<span class="token punctuation">[</span>Description<span class="token punctuation">]</span>,DepartmentID,MediumID<span class="token punctuation">)</span> <span class="token punctuation">(</span>SELECT m.MeterID,m.MetricItems+m.InstallPlace as m_MetricPointName,m.MetricItems,m.DepartmentID,m.MediumID FROM Meters m WHERE NOT EXISTS <span class="token punctuation">(</span>SELECT 1 FROM MetricPoints WHERE MetricPoints.MeterID <span class="token operator">=</span> m.MeterID <span class="token punctuation">)</span> and m.MediumID <span class="token operator">=</span>2<span class="token punctuation">)</span> 声名：a,b ,都是表 复制代码 代码如下:--b表存在（两表结构一样） insert into b <span class="token keyword">select</span> * from a 若两表只是有部分（字段）相同，则 复制代码 代码如下:insert into b<span class="token punctuation">(</span>col1,col2,col3,col4,<span class="token punctuation">..</span>.<span class="token punctuation">)</span> <span class="token keyword">select</span> col1,col2,col3,col4,<span class="token punctuation">..</span>. from a where<span class="token punctuation">..</span>. 把表a插入到表b中去。 复制代码 代码如下:--b表不存在 <span class="token keyword">select</span> * into b from a // <span class="token keyword">select</span> <span class="token punctuation">(</span>字段1，字段2，<span class="token punctuation">..</span>.<span class="token punctuation">)</span> into b from a </code></pre><h2 id="页总数"><a href="#页总数" class="headerlink" title="页总数"></a>页总数</h2><pre class=" language-bash"><code class="language-bash"> SELECT  CEILING<span class="token punctuation">((</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> *2+0.0<span class="token punctuation">)</span>/10<span class="token punctuation">)</span> TotalPageCount,COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> TotalCountFROM    <span class="token punctuation">(</span> SELECT    ROW_NUMBER<span class="token punctuation">(</span><span class="token punctuation">)</span> OVER <span class="token punctuation">(</span> ORDER BY customer DESC <span class="token punctuation">)</span> AS rowIndex ,                    SUM<span class="token punctuation">(</span>OutStockCount * Price<span class="token punctuation">)</span> totalPrice ,                    SUM<span class="token punctuation">(</span>OutStockCount<span class="token punctuation">)</span> totalStock ,                    COUNT<span class="token punctuation">(</span>GoodsName<span class="token punctuation">)</span> GoodsNumber ,                    COUNT<span class="token punctuation">(</span>VoucherCode<span class="token punctuation">)</span> VoucherNumber ,                    customer,OrderWay,                    Owner OwnerID          FROM      dbo.V_getOutStockVoucher          WHERE     Status <span class="token operator">=</span> <span class="token string">'已复核'</span>           GROUP BY  customer ,                    Owner,OrderWay        <span class="token punctuation">)</span> temp</code></pre><h2 id="查询重复的数据"><a href="#查询重复的数据" class="headerlink" title="查询重复的数据"></a>查询重复的数据</h2><pre class=" language-bash"><code class="language-bash"><span class="token keyword">select</span> id, name, memo from A where <span class="token function">id</span> <span class="token keyword">in</span> <span class="token punctuation">(</span>select <span class="token function">id</span> from A group by <span class="token function">id</span> having count<span class="token punctuation">(</span>1<span class="token punctuation">)</span> <span class="token operator">>=</span> 2<span class="token punctuation">)</span></code></pre><h2 id="去除重复的数据"><a href="#去除重复的数据" class="headerlink" title="去除重复的数据"></a>去除重复的数据</h2><pre class=" language-bash"><code class="language-bash">Distinct 或select * from table1 as a  where not exists<span class="token punctuation">(</span>select 1 from table1 where logID<span class="token operator">=</span>a.LogID and ID<span class="token operator">></span>a.ID<span class="token punctuation">)</span>   <span class="token keyword">select</span> Distinct 列名 from 表名</code></pre><h2 id="检查重复数据情况"><a href="#检查重复数据情况" class="headerlink" title="检查重复数据情况"></a>检查重复数据情况</h2><pre class=" language-bash"><code class="language-bash">SELECT Userid, Res_ID FROM ahuser_app_rec GROUP BY Userid, Res_ID HAVING <span class="token punctuation">(</span>COUNT<span class="token punctuation">(</span>*<span class="token punctuation">)</span> <span class="token operator">></span> 1<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SqlServer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.net总结</title>
      <link href="/2019/01/09/asp.net-zhi-shi-dian-zong-jie/"/>
      <url>/2019/01/09/asp.net-zhi-shi-dian-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="Asp-NET-知识点总结-一"><a href="#Asp-NET-知识点总结-一" class="headerlink" title="Asp.NET 知识点总结(一)"></a>Asp.NET 知识点总结(一)</h2><p>1.简述 private、 protected、 public、 internal 修饰符的访问权限。</p><p>答 . private : 私有类，私有成员, 在类的内部才可以访问。</p><p>protected : 保护成员，该类内部和继承类中可以访问。</p><p>public : 公共成员，完全公开，没有访问限制。</p><p>internal: 内部访问类，只限于本项目内访问，其他不能访问。</p><p>2.列举ASP.NET 页面之间传递值的几种方式。</p><p>QueryString, 如….?id=1; response. Redirect()….Request.QueryString[“name”];</p><p>优点：使用简单，传递数字和文本值非常有效; 缺点：安全性不高，不能传递对象。</p><p>使用Session变量 ;<br>优点：使用简单，不仅能传递简单数据类型，还能传递对象。<br>缺点：数据量大小是不限制的。在Session变量存储大量的数据会消耗较多的服务器资源，容易丢失。</p><p>使用cookie用于浏览器上存储小块的信息，保存用户的相关信息，方便下次检索，必须字符串<br>优点：使用简单，是保护用户状态常用方法<br>缺点：安全不高，收集用户信息<br>使用：HttpCookie objCookie = new HttpCookie(“myCookie”,”Hello,Cookie!”);Response.Cookies.Add(cookie);</p><p>Application<br>Application对象的作用范围是整个全局，也就是说对所有用户都有效。它在整个应用程序生命周期中都是有效的，它和Session变量的区别在于，前者是所有的用户共用的全局变量，后者是各个用户独有的全局变量。</p><p>优点：使用简单，消耗较少的服务器资源。缺点：1.作为全局变量容易被误操作。</p><p>使用Server.Transfer<br>Server.Transfer方法把流程从当前页面引导到另一个页面中，新的页面使用前一个页面的应答流，所以这个方法是完全面象对象的，简洁有效;</p><p>3.C#中的委托是什么？事件是不是一种委托？</p><p>委托可以把一个方法或多个方法作为参数代入另一个方法。</p><p>委托可以理解为指向一个函数的引用，是引用类型。</p><p>是，是一种特殊的委托。在NET事件模型，建立在委托机制上，它实现了对委托的封装。</p><p>4.override（重写）与重载（overload）的区别</p><p>override 与重载的区别。</p><p>重载是方法的名称相同。参数或参数类型不同，进行多次重载以适应不同的需要</p><p>Override 是进行基类中函数的重写。为了适应需要面向对象的多态性。</p><p>5.描述一下C#中索引器的实现过程，是否只能根据数字进行索引？</p><p>答：不是。可以用任意类型。</p><p>6.用.net做B/S结构的系统，您是用几层结构来开发，每一层之间的关系以及为什么要这样分层？</p><p>答：一般为3层</p><p>数据访问层，业务层，表示层。</p><p>数据访问层对数据库进行增删查改。</p><p>业务层一般分为二层，业务表观层实现与表示层的沟通，业务规则层实现用户密码的安全等。</p><p>表示层为了与用户交互例如用户添加表单。</p><p>优点： 分工明确，条理清晰，易于调试，而且具有可扩展性。</p><p>缺点： 增加成本</p><p>7.什么叫应用程序域？</p><p>答：应用程序域可以理解为一种轻量级进程。起到安全的作用。占用资源小。</p><p>8.CTS、CLS、CLR分别作何解释？</p><p>答：CTS：通用语言系统;CLS：通用语言规范;CLR：公共语言运行库;</p><p>9.什么是装箱和拆箱？</p><p>答：从值类型接口转换到引用类型装箱。从引用类型转换到值类型拆箱。</p><p>10.什么是受管制的代码？</p><p>答：unsafe：非托管代码。不经过CLR运行。</p><p>11.什么是强类型系统？</p><p>答：RTTI：类型识别系统。</p><p>12.net中读写数据库需要用到那些类？他们的作用？</p><p>答：DataSet:数据存储器。用来存储表的数据，并包含各表之间的联系。</p><p>DataCommand:执行语句命令。</p><p>DataAdapter:数据的集合，用语填充。用来将数据填充到dataset或datatable</p><p>datatable:用来存储一个表的数据；</p><p>sqlconnection:用来创建一个到数据库的连接。</p><p>dataReader:用来顺序读取数据；</p><p>13.ASP.net的身份验证方式有哪些？分别是什么原理？</p><p>答：Windows: 使用IIS验证方式。;IIS根据应用程序的设置执行身份验证。要使用这种验证方式，在IIS中必须禁用匿名访问。</p><p>Forms: 使用基于窗体的验证方式.用Cookie来保存用户凭证，并将未经身份验证的用户重定向到自定义的登录页。</p><p>Passport: 采用Passport cookie验证模式..通过Microsoft的集中身份验证服务执行的，为成员站点提供单独登录和核心配置文件服务; None: 不采用任何验证方式</p><p>14.什么是Code-Behind技术？</p><p>答：ASPX,RESX和CS三个后缀的文件，这个就是代码分离.实现了HTML代码和服务器代码分离.方便代码编写和整理.</p><p>15.在.net中，配件的意思是？</p><p>答：程序集。（中间语言，源数据，资源，装配清单）</p><p>16.常用的调用WebService的方法有哪些？</p><p>答：1.使用WSDL.exe命令行工具。</p><p>2.使用VS.NET中的Add Web Reference菜单选项</p><p>17.net Remoting 的工作原理是什么？</p><p>答：服务器端向客户端发送一个进程编号，一个程序域编号，以确定对象的位置。</p><p>18.在C＃中，string str = null 与 string str = “” 请尽量使用文字或图象说明其中的区别。</p><p>答：string str = null 是不给他分配内存空间,而string str = “” 给它分配长度为空字符串的内存空间。</p><p>19.请详述在dot.net中类(class)与结构(struct)的异同？</p><p>答：Class可以被实例化,属于引用类型,是分配在内存的堆上的,</p><pre><code>  Struct属于值类型,是分配在内存的栈上的.</code></pre><p>20.分析以下代码，完成填空</p><p>string strTmp = “abcdefg某某某”;</p><p>int i= System.Text.Encoding.Default.GetBytes(strTmp).Length;</p><p>int j= strTmp.Length;</p><p>以上代码执行完后，i= j=  </p><p>答：i=13,j=10</p><p>21.简要谈一下您对微软.NET 构架下remoting和webservice两项技术的理解以及实际中的应用。</p><p>答：WS主要是可利用HTTP，穿透防火墙。而Remoting可以利用TCP/IP，二进制传送提高效率。</p><p>22.面向对象的语言具有<strong>____</strong>性、<strong><strong>_</strong></strong>性、<strong>____</strong>性</p><p>答：封装、继承、多态。</p><p>23.能用foreach遍历访问的对象需要实现 <strong><strong><strong>____</strong></strong></strong>接口或声明<strong><strong><strong>____</strong></strong></strong>方法的类型。</p><p>答：IEnumerable 、 GetEnumerator。</p><p>其实IEnumerable接口是非常的简单，只包含一个抽象的方法GetEnumerator()，它返回一个可用于循环访问集合的IEnumerator对象。IEnumerator对象有什么呢？它是一个真正的集合访问器，没有它，就不能使用foreach语句遍历集合或数组，因为只有IEnumerator对象才能访问集合中的项.GetEnumerator方法返回对另一个接口System.Collections.IEnumerator的引用。这个接口提供了基础设施，调用方可以用来移动IEnumerable兼容容器包含的内部对象。</p><p>24.GC是什么? 为什么要有GC?</p><p>答：GC是垃圾收集器。程序员不用担心内存管理，因为垃圾收集器会自动进行管理。要请求垃圾收集，可以调用下面的方法之一：</p><p>System.gc()</p><p>Runtime.getRuntime().gc()</p><p>25.String s = new String(“xyz”);创建了几个String Object?</p><p>答：两个对象，一个是“xyx”,一个是指向“xyx”的引用对象s。</p><p>26.abstract class和interface有什么区别?</p><p>答：声明方法的存在而不去实现它的类被叫做抽象类（abstract class），它用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况，不能创建abstract 类的实例。</p><p>接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的，接口中的所有方法都是抽象的，没有一个有程序体。引用可以转换到接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口。</p><p>相同点：</p><p>都可以被继承；都不能被实例化；都可以包含方法，声明；派生类必须实现未实现的方法；</p><p>不同点：</p><p>A.接口是抽象类的实体，接口中所有的方法必须是抽象的，抽象类是声明相同方法的存在而不去实现他的类；</p><p>B.接口可以多继承，而抽象类不行；</p><p>C.接口可定义方法不能实现，而抽象类可实现部分</p><p>27.启动一个线程是用run()还是start()?</p><p>启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行。这并不意味着线程就会立即运行。</p><p> run()方法可以产生必须退出的标志来停止一个线程。</p><p>28.接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承实体类(concrete class)?</p><p>答：接口可以继承接口。抽象类可以实现(implements)接口，抽象类是否可继承实体类，但前提是实体类必须有明确的构造函数。</p><p>29.构造器Constructor是否可被override?</p><p>答：构造器Constructor不能被继承，因此不能重写Overriding，但可以被重载Overloading。</p><p>30.是否可以继承String类?</p><p>答：String类是final类故不可以继承。</p><h2 id="Asp-NET-知识点总结-二"><a href="#Asp-NET-知识点总结-二" class="headerlink" title="Asp.NET 知识点总结(二)"></a>Asp.NET 知识点总结(二)</h2><p>1.两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?</p><p>答：不对，有相同的 hash code 编码格式。</p><p>2.swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上?</p><p>答：switch（expr1）中，expr1是一个整数表达式。因此传递给 switch 和 case 语句的参数应该是 int、 short、 char 或者 byte。long,string 都不能作用于swtich。</p><p>4.List, Set, Map是否继承自Collection接口?</p><p>答：List，Set是Map不是</p><p>5.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别?</p><p>答：Set里的元素是不能重复的，那么用iterator()方法来区分重复与否。equals()是判读两个Set是否相等。equals()和==方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值。</p><p>6.数组有没有length()这个方法? String有没有length()这个方法？</p><p>答：数组没有length()这个方法，有length的属性。String有length()这个方法。</p><p>7.sleep() 和 wait() 有什么区别?</p><p>答：创建，就绪，运行，阻塞，死亡</p><p>启动一个线程 调用start（）方法，使线程所代表的虚拟处理处于可运行状态，这意味着它可以由jvm调度并执行，并不意味着线程就会立即运行。</p><p>run()方法可以产生必须退出的标志来停止一个线程；</p><p>一个对象的synchronized方法只能一个线程访问；必须等待当前线程执行完这个代码块以后才能执行；当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?不能，一个对象的一个synchronized方法只能由一个线程访问。</p><p>sleep()方法是使线程停止一段时间的方法。在sleep 时间间隔期满后，线程不一定立即恢复执行。这是因为在那个时刻，其它线程可能正在运行而且没有被调度为放弃执行，除非(a)“醒来”的线程具有更高的优先级</p><p>(b)正在运行的线程因为其它原因而阻塞。</p><p>wait()是线程交互时，如果线程对一个同步对象x 发出一个wait()调用，该线程会暂停执行，被调对象进入等待状态，直到被唤醒或等待时间到。</p><p>8.short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?</p><p>答：short s1 = 1; s1 = s1 + 1;有错，s1是short型，s1+1是int型,不能显式转化为short型。可修改为s1 =(short)(s1 + 1) 。short s1 = 1; s1 += 1正确。</p><p>9.谈谈final, finally, finalize的区别。</p><p>final—修饰符（关键字）如果一个类被声明为final，意味着它不能再派生出新的子类，不能作为父类被继承。因此 一个类不能既被声明为 abstract的，又被声明为final的。将变量或方法声明为final，可以保证它们在使用中 不被改变。被声明为final的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为 final的方法也同样只能使用，不能重载</p><p>finally—再异常处理时提供 finally 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 catch 子句就会 执行，然后控制就会进入 finally 块（如果有的话）。</p><p>finalize—方法名。Java 技术允许使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做必要的清理 工作。这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。它是在 Object 类中定义的 ，因此所有的类都继承了它。子类覆盖 finalize() 方法以整理系统资源或者执行其他清理工作。finalize() 方法是在垃圾收集器删除对象之前对这个对象调用的。</p><p>10.如何处理几十万条并发数据？</p><p>答：用存储过程或事务。取得最大标识的时候同时更新..注意主键不是自增量方式这种方法并发的时候是不会有重复主键的..取得最大标识要有一个存储过程来获取.</p><p>11.Session有什么重大BUG，微软提出了什么方法加以解决？</p><p>答：是iis中由于有进程回收机制，系统繁忙的话Session会丢失，可以用Sate server或SQL Server数据库的方式存储Session不过这种方式比较慢，而且无法捕获Session的END事件。</p><p>12.进程和线程的区别？</p><p>答：进程是系统进行资源分配和调度的单位；线程是CPU调度和分派的单位，一个进程可以有多个线程，这些线程共享这个进程的资源。</p><p>13.堆和栈的区别？</p><p>答：栈（stack）：由编译器自动分配、释放。在函数体中定义的变量通常在栈上。</p><p>堆（keap）：一般由程序员分配释放。用new、malloc等分配内存函数分配得到的就是在堆上。</p><p>14.成员变量和成员函数前加static的作用？</p><p>答：它们被称为常成员变量和常成员函数，又称为类成员变量和类成员函数。分别用来反映类的状态。比如类成员变量可以用来统计类实例的数量，类成员函数负责这种统计的动作。</p><p>15.ASP.NET与ASP相比，主要有哪些进步？</p><p>答：asp解释型，aspx编译型，性能提高，有利于保护源码。</p><p>16.请指出GAC的含义？</p><p>答：全局程序集缓存。</p><p>17.向服务器发送请求有几种方式？</p><p>答：get,post。get一般为链接方式，post一般为按钮方式。</p><p>19.软件开发过程一般有几个阶段？每个阶段的作用？</p><p>答：需求分析，架构设计，代码编写，QA，部署</p><p>20.在c#中using和new这两个关键字有什么意义，请写出你所知道的意义？</p><p>using 指令 和语句 new 创建实例 new 隐藏基类中方法。</p><p>答：using 引入名称空间或者使用非托管资源</p><p>new 新建实例或者隐藏父类方法</p><p>21.在c#中using和new这两个关键字有什么意义，请写出你所知道的意义？using 指令 和语句 new 创建实例 new 隐藏基类中方法。</p><p>答：using 引入名称空间或者使用非托管资源</p><p>new 新建实例或者隐藏父类方法</p><p>22.什么是反射？</p><p>答：动态获取程序集信息</p><p>24.用Singleton如何写设计模式</p><p>答：static属性里面new ,构造函数private</p><p>25.什么是Application Pool？</p><p>答：Web应用，类似Thread Pool，提高并发性能。</p><p>26.什么是虚函数？什么是抽象函数？</p><p>答：虚函数：没有实现的，可由子类继承并重写的函数。抽象函数：规定其非虚子类必须实现的函数，必须被重写。</p><p>27.什么是ASP.net中的用户控件？</p><p>答：用户控件一般用在内容多为静态,或者少许会改变的情况下..用的比较大..类似ASP中的include..但是功能要强大的多。</p><p>28.什么是SOAP,有哪些应用。</p><p>答：simple object access protocal,简单对象接受协议.以xml为基本编码结构,建立在已有通信协议上(如http,不过据说ms在搞最底层的架构在tcp/ip上的soap)的一种规范Web Service使用的协议.</p><p>29.C#中 property 与 attribute的区别，他们各有什么用处，这种机制的好处在哪里？</p><p>答：一个是属性，用于存取类的字段，一个是特性，用来标识类，方法等的附加性质.</p><p>30.什么是WSE？目前最新的版本是多少？</p><p>答：WSE（Web Services Enhancements 2.0 for Microsoft .NET ）是一个用来建设Web服务的·NET类库，它支持最新的Web服务协议。最新版本3.0</p><h2 id="Asp-NET-知识点总结-三"><a href="#Asp-NET-知识点总结-三" class="headerlink" title="Asp.NET 知识点总结(三)"></a>Asp.NET 知识点总结(三)</h2><p>1.描述一下C#中索引器的实现过程，是否只能根据数字进行索引？</p><p>答：不是。可以用任意类型。</p><p>2.&lt;%# %&gt; 和 &lt;% %&gt; 有什么区别？</p><p>答：&lt;%# %&gt;表示绑定的数据源</p><p>&lt;% %&gt;是服务器端代码块</p><p>3.重载与覆盖的区别？</p><p>答：1、方法的覆盖是子类和父类之间的关系，是垂直关系；方法的重载是同一个类中方法之间的关系，是水平关系</p><p>2、覆盖只能由一个方法，或只能由一对方法产生关系；方法的重载是多个方法之间的关系。</p><p>3、覆盖要求参数列表相同；重载要求参数列表不同。</p><p>4、覆盖关系中，调用那个方法体，是根据对象的类型（对象对应存储空间类型）来决定；重载关系，是根据调 用时的实参表与形参表来选择方法体的。</p><p>4.error和exception有什么区别</p><p>error 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。</p><p>exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。</p><p>5.Overloaded的方法是否可以改变返回值的类型?</p><p>答：Overloaded的方法是可以改变返回值的类型。</p><p>6.HashMap和Hashtable的区别。</p><p>答：HashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，效率上可能高于Hashtable.</p><p>7.&amp;和&amp;&amp;的区别。</p><p>&amp;是位运算符，表示按位与运算，&amp;&amp;是逻辑运算符，表示逻辑与（and）.</p><p>8.大概描述一下ASP.NET服务器控件的生命周期</p><p>答：初始化 加载视图状态 处理回发数据 加载 发送回发更改通知 处理回发事件 预呈现 保存状态 呈现 处置 卸载</p><p>9.Anonymous Inner Class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)?</p><p>答：不能，可以实现接口</p><p>10.Static Nested Class和inner class 的不同</p><p>Static Nested Class是被声明为静态（static）的内部类，它可以不依赖于外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化。</p><p>11.C#中 property 与 attribute的区别，他们各有什么用处，这种机制的好处在哪里？</p><p>答：attribute（特性）:自定义属性的基类;用来标识类，方法等的附加性质；Attribute ：是一个对象，作用在于两个方面。一个是影响编译器的形为，另一个是把描述信息写入Assembly中。</p><p>property （属性）:类中的属性一个是属性，用于存取类的字段，一个是特性，用来标识类，方法等的附加性质;Property：是一个方法是GET和SET的组合，一个是读，一个是写。</p><p>12.当整数a赋值给一个object对象时，整数a将会被？</p><p>答：装箱。</p><p> 13.类成员有<strong>_</strong>种可访问形式？</p><p>答：this.;new Class().Method;</p><p> 14.public static const int A=1;这段代码有错误么？是什么？</p><p>答：const不能用static修饰。</p><p> 15.float f=-123.567F; int i=(int)f;i的值现在是<strong>_</strong>?</p><p>答：-123。</p><p> 16.委托声明的关键字是<strong>__</strong>?</p><p>答：delegate.</p><p> 17.用sealed修饰的类有什么特点？</p><p>答：密封，不能继承。</p><p> 18.在Asp.net中所有的自定义用户控件都必须继承自<strong>____</strong>?</p><p>答：Control。</p><p> 19.在.Net中所有可序列化的类都被标记为<strong>_</strong>?</p><p>答：[serializable]</p><p>20.在.Net托管代码中我们不用担心内存漏洞，这是因为有了<strong>__</strong>?</p><p>答：GC。</p><p>21.什么是虚函数？什么是抽象函数？</p><p>答：虚函数：没有实现的，可由子类继承并重写的函数。抽象函数：规定其非虚子类必须实现的函数，必须被重写。</p><p>22.谈谈你对ASP和ASP.NET的区别?<br>答：ASP.Net摆脱了以前ASP使用脚本语言来编程的缺点，理论上可以使用任何编程语言包括C++ , VB , JS等等，当然，最合适的编程语言还是MS为.Net Frmaework专门推出的C(读c sharp)，它可以看作是VC和Java的混合体吧，尽管MS自己讲C#内核中更多的象VC，但实际上我还是认为它和Java更象一些吧。首先它是面向对象的编程语言，而不是一种脚本，所以它具有面向对象编程语言的一切特性，比如封装性、继承性、多态性等等，这就解决了刚才谈到的ASP的那些弱点。封装性使得代码逻辑清晰，易于管理，并且应用到ASP.Net上就可以使业务逻辑和Html页面分离，这样无论页面原型如何改变，业务逻辑代码都不必做任何改动；继承性和多态性使得代码的可重用性大大提高，你可以通过继承已有的对象最大限度保护你以前的投资。并且C#和C++、Java一样提供了完善的调试/纠错体系。</p><p>23.为什么要用IsPortBack<br>答：页面第一次加载时需要绑定一些数据，如果每次加载都绑定的话，会给服务器很大压力ISPORTBACK第一次加载时返回的是false，以后每次返回的都是true，这样可以设置    一些只需要在页面一次加载时就绑定好的数据。</p><p>24..MVC指的是什么?<br>答：MVC将程序功能分成三部分考虑：视图(VIEW，即可见的用户界面部分)、模型（Model，程序的数据模型和业务逻辑部分），控制器（Controller，根据用户输入通知模型和视图进行相应更改）。</p><p>25..ADO.NET的常用对象<br>答：Connection，Command，DataAdapter，DataSet，DataReader，configuration</p><p>26.C/S和B/S的区别，优缺点有哪些?<br>答：C/S是客户端/服务器端，C/S的程序通常也叫胖客户端，也就是一个程序的大部分功能，都在客户端实现，而服务器端只实现一小部分功能。通过这点不难看出，C/S的程序大部分在客户端实现，对于服务器端的压力相对小一些，服务器端可以节省一些。而且C/S的程序用窗口来做，个人认为开发效率上快一点。但C/S的程序一大弊端就是，必须要在客户端安装并部署程序才能运行，也就是用户必须得到客户端程序才可以运行。所以得考虑不同系统之间的安装与配置。<br>B/S是浏览器/服务器端，B/S的程序通常也叫瘦客户端，与C/S相反。B/S的程序大部分功能都要在服务器端实现，客户端只用来做辅助的控制功能。因为B/S的程序直接部署安装在服务器上。用户只需要有浏览器，并知道网址就可以使用程序。客户端不必做任何配置和安装，即可使用应用程序。而B/S也是有缺点的，首先B/S大部分功能都要在服务器端实现，对于服务器的要求就很高。服务器同时要应付用户访问与程序处理，所以服务器的配置必须能够应付。另外就是B/S的程序是浏览器中执行，所以B/S的程序操作客户端电脑的硬件，一般就得安装ActiveX等插件在客户端才可以操作。因此B/S的程序对于操作硬件，优势没有C/S的程序要好。</p><p>27.Windows 身份验证提供程序<br>1，提供有关如何将 Windows 身份验证与 Microsoft Internet 信息服务 (IIS) 身份验证结合使用来确保 ASP.NET 应用程序安全的信息。<br>2、 Forms 身份验证提供程序<br>提供有关如何使用您自己的代码创建应用程序特定的登录窗体并执行身份验证的信息。使用 Forms 身份验证的一种简便方法是使用 ASP.NET 成员资格和 ASP.NET 登录控件，它们一起提供了一种只需少量或无需代码就可以收集、验证和管理用户凭据的方法。有关更多信息，请参见使用成员资格管理用户和 ASP.NET 登录控件概述。<br>3、 Passport 身份验证提供程序<br>提供有关由 Microsoft 提供的集中身份验证服务的信息，该服务为成员站点提供单一登录和核心配置文件服务</p><p>28.ASP.NET中页面传值的方法;<br>答：session(viewstate)                  简单，但易丢失<br>application                         全局<br>cookie                          简单，但可能不支持，可能被伪造<br>input type=”hidden”             简单，可能被伪造<br>url参数                          简单，显示于地址栏，长度有限<br>数据库                           稳定，安全，但性能相对弱</p><p>29.net中类与对象的关系;<br>答：万物都是对象，而类是对象的一个编程语言概念上的描述</p><p>30.ASP.NET里命名空间的定义;<br>答：命名空间是类的逻辑分组，它组织成一个层次结构——逻辑树。这个树的根是System。<br>在ASP.NET页面中，可以默认的使用某些命名空间中包含的类，称做标准的ASP.NET命名空间。对于其他命名空间，则必须显式地导入</p><p>31.ASP.NET中内置对象是什么?</p><p>在 Web 应用程序运行时，ASP.NET 将维护有关当前应用程序、每个用户会话、当前 HTTP 请求、请求的页等方面的信息。ASP.NET 包含一系列类，用于封装这些上下文信息。<br>Response提供对当前页的输出流的访问。您可以使用此类将文本插入页中、编写 Cookie，等等。<br>Request  提供对当前页请求的访问，其中包括请求标题、Cookie、客户端证书、查询字符串等。您可以使用此类读取浏览器已经发送的内容。<br>Context提供对整个当前上下文（包括请求对象）的访问。<br>Server公开可以用于在页之间传输控件的实用工具方法，获取有关最新错误的信息，对 HTML 文本进行编码和解码，等等。<br>Application提供对所有会话的应用程序范围的方法和事件的访问。还提供对可用于存储信息的应用程序范围的缓存的访问。<br>Session为当前用户会话提供信息。还提供对可用于存储信息的会话范围的缓存的访问，以及控制如何管理会话的方法。<br>Trace提供在 HTTP 页输出中显示系统和自定义跟踪诊断消息的方法。</p><h2 id="Asp-NET-知识点总结-四"><a href="#Asp-NET-知识点总结-四" class="headerlink" title="Asp.NET 知识点总结(四)"></a>Asp.NET 知识点总结(四)</h2><p>1.get和post 的区别</p><p>get是从服务器上获取数据，post是向服务器传送数据; </p><p>get安全性非常低，数据显示在地址栏，post安全性较高； 但是执行效率却比Post方法好；</p><p>get有字节限制为1024字节，post没有限制，起到限制的是服务器设置和内存大小及程序的处理能力；</p><p>对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。get是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。post是通过HTTP post机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。用户看不到这个过程。</p><p>2..asp.net页面提交过程</p><p>3.自定义控件如何做?<br>答：自定义控件，跟HtmlControl或WebControl相似，编译后可以添加引用到工具栏里<br>面，直接用鼠标拖动使用。</p><p>4.界面的布局?        答：表格，div<br>5、程序的执行过程  答：先被编译成中间语言，再翻译平台专用语言.</p><p>6.ASP.NET分页的常用方法有以下几种。</p><p>启用部分数据控件的内置分页功能，如设置GridView控件的“AllowPaging”属性为“true”，类似的数据控件还有DetailsView等。<br>通过SQL查询语句，以提取指定部分的数据的方式完成分页的功能。也包括调用数据库中内置的存储过程完成分页数据的提取。<br>调用所对应数据适配器对象（DataAdapter对象）的Fill方法时，传递分页参数以完成数据集的分页功能。<br>通过访问DataTable对象的“Rows”属性，以循环输出的方式访问结果集中指定区段的数据行，以达到分页的效果。</p><p>7.视图状态ViewState的具体运行过程是什么?</p><p>每当用户请求某个.aspx页面时，.NET框架首先把相关控件的状态数据序列化成一个字符串，然后，将其做为名为<strong>VIEWSTATE的隐藏域的Value值发送到客户端。<br>如果页面是第一次被请求，那么服务器控件也将是被第一次执行时，名为</strong>VIEWSTATE的隐藏域中只包含控件的默认信息，通常为空或null。<br>在随后的回送事件中，ViewState中就保存了服务器控件在前面回送中可用的属性状态。这样服务器控件就能监视在当前被处理的回送事件发生之前的状态了。这些过程是由.NET框架负责的，对用户来说是执行.aspx页面就有了持续执行的效果。</p><p>8.面向对象的思想主要包括什么?<br>对向对象程序设计（OOP）思想：封装、继承、多态<br> 封装：用抽象的数据类型将数据和基于数据操作封装在一起，数据被保护在抽象类型内部。<br> 继承：子类拥有父类的所有数据和操作。<br> 多态：一个程序中同名的不同方法共存的情况。 有两种形式的多态：重载与重写。</p><p>9.什么是ASP.net中的用户控件?<br>用户控件就是.ascx,复合控件就是.DLL</p><p>10.UDP连接和TCP连接的异同。<br> 前者只管传,不管数据到不到,无须建立连接.后者保证传输的数据准确,须要连接.</p><p>11.进程和线程分别怎么理解?<br>进程和线程都是由操作系统所体会的程序运行的基本单元，系统利用该基本单元实现系统对应用的并发性。进程和线程的区别在于：简而言之,一个程序至少有一个进程,一个进程至少有一个线程.线程的划分尺度小于进程，使得多线程程序的并发性高。<br>线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。</p><p>12.什么是SOAP,有哪些应用。<br>SOAP（Simple Object Access Protocol ）简单对象访问协议是在分散或分布式的环境中交换信息并执行远程过程调用的协议，是一个基于XML的协议。</p><p>13.概述反射</p><p> 反射:程序集包含模块，而模块包含类型，类型又包含成员。反射则提供了封装程序集、模块和类型的对象。您可以使用反射动态地创建类型的实例，将类型绑定到现有对象，或从现有对象中获取类型。然后，可以调用类型的方法或访问其字段和属性</p><p>14.序列化和反序列化 </p><p>序列化是将对象状态转换为可保持或传输的格式的过程，比如转化为二进制、xml、json等的过程。<br>与序列化相对的是反序列化，它将流转换为对象，也就是将在序列化过程中所生成的二进制串、xml、json等转换成数据结构或者对象的过程<br>这两个过程结合起来，可以轻松地存储、传输数据</p><p>15.用sealed修饰的类有什么特点</p><p>sealed 修饰符用于防止从所修饰的类派生出其它类。如果一个密封类被指定为其他类的基类，则会发生编译时错误。密封类不能同时为抽象类。sealed 修饰符主要用于防止非有意的派生，但是它还能促使某些运行时优化。具体说来，由于密封类永远不会有任何派生类，所以对密封类的实例的虚拟函数成员的调用可以转换为非虚拟调用来处理。</p><p>16.什么是ERP?ERP的演变过程?<br>答：所谓ERP是英文Enterprise Resource Planning(企业资源计划)的简写。它是从MRP(物料资源<br> 计划)发展而来的新一代集成化管理信息系统，它扩展了MRP的功能，其核心思想是供应链管理，它跳<br> 出了传统企业边界，从供应链范围去优化企业的资源，是基于网络经济时代的新一代信息系统。它对<br> 于改善企业业务流程、提高企业核心竞争力的作用是显而易见的。</p><p>17.在ASP.NET中如何进行文件上传?</p><p>首先，从客户端取得上传的文件，然后，我们将它放入数据流；<br>第二，服务器端读取数据流，然后将其保存到缓存；<br>第三，将缓存数据保存到数据库；<br>第一步:首先我们要实现用户在浏览器端自由选择文件，然后上传，这里用户选择文件，当然是要求标准的Windows方式，所以，我们在这里使用Form的File文件组件来给用户选择文件。注意，因为上传文件，所以，在Form的属性设置的时候，我们应该设置为：multipart/form-data，这样，才可以正确上传文件。</p><p>18.ASP.NET中共有几种类型的控件?各有什么区别?</p><p>WEB控件分为：内部控件, 列表控件, 复杂控件, 验证控件<br>内部控件–内部控件的使用方法与 HTML 控件相同,它们映射到 HTML 元素并通过使用 runat = “server” 属性在服务器上执行<br>列表控件–用于在 Web 页中创建数据列表<br>复杂控件– •当希望控件拥有复杂的功能或使用 HTML 元素无法创建的功能丰富的用户界面时，可以使用复杂控件<br>验证控件–输入控件的数据需要进行准确性和取值范围方面的检查</p><p>19.ASP.NET中的身份验证有那些?请解释。</p><p>Windows验证:指定Windows身份验证作为默认的身份验证模式.如果是任何形式的Internet信息服务(IIS)身份验证，则使用此模式.<br>Forms验证:指定基于ASP。NET窗体的身份验证作为默认的身份验证模式。<br>Passport:指定Microsoft Passport身份验证作为默认的身份验证模式。<br>None:不指定身份验证，仅适用于匿名用户，或者应用程序可以处理事件以提供它们自己的身份验证情况。</p><p>20.请详述在dotnet中类(class)与结构(struct)的异同：(10分)<br>答：Class可以被实例化,属于引用类型,是分配在内存的堆上的;Struct属于值类型,是分配在内存的栈上的.</p><p>21.简要谈一下您对微软.NET 构架下remoting和webservice两项技术的理解以及实际中的应用。(10)<br>答：WS主要是可利用HTTP，穿透防火墙。而Remoting可以利用TCP/IP，二进制传送提高效率。</p><p>22.在c#中using和new这两个关键字有什么意义</p><p>using 指令有两个用途：允许在命名空间中使用类型，为命名空间或类型创建别名。</p><p>using 语句允许程序员指定使用资源的对象应当何时释放资源。</p><p>New 实例化一个对像，或修饰一个方法，表此方法完全重写此方法</p><p>23.C#中的验证控件有几种</p><p>a)RequiredFieldValidator（必须字段验证）；<br>b)CompareValidator（比较验证）；<br>c)RangeValidator （范围验证）；<br>d)RegularExpresionValidator（正则表达式）；<br>e)ValidationSummary（验证总结）；<br>f)CustomValidator（自定义验证）</p><p>24.静态成员和非静态成员的区别</p><p>静态变量使用 static 修饰符进行声明，在类被实例化时创建，通过类进行访问<br>不带有 static 修饰符声明的变量称做非静态变量，在对象被实例化时创建，通过对象进行访问<br>一个类的所有实例的同一静态变量都是同一个值，同一个类的不同实例的同一非静态变量可以是不同的值<br>静态函数的实现里不能使用非静态成员，如非静态变量、非静态函数等</p><p>25.如何调试一个ASP.NET web应用？<br>Attach aspnet_wp.exe 进程到你的DbgCLR debugger</p><p>26.const和static readonly区别</p><p>const：用 const 修饰符声明的成员叫常量，是在编译期初始化并嵌入到客户端程序<br>static readonly：用 static readonly 修饰符声明的成员依然是变量，只不过具有和常量类似的使用方法：通过类进行访问、初始化后不可以修改。但与常量不同的是这种变量是在运行期初始化</p><p>27.C#里面可以避免一个类被其他类继承么？</p><p>是的，C#可以通过添加sealed关键字的方法来避免一个类被其他类继承。</p><p>28.C#如何允许一个类被继承但是避免这个类的方法被重载？</p><p>C#可以允许一个类被继承，但是这个类的方法不被重载。<br>只要把这个类定义为public的，但是在不允许被重载的方法前面加上sealed.</p><p>C#可以通过调用Sort()方法，然后再调用Reverse()方法。extern 修饰符用于声明由程序集外部实现的成员函数</p><p>29.params有什么用</p><p> params 关键字在方法成员的参数列表中使用，为该方法提供了参数个数可变的能力<br> 30.别名指示符是什么</p><p>主要用于解决两个命名空间内有同名类型的冲突或避免使用冗余的命名空间<br>别名指示符在所有命名空间最外层定义，作用域为整个单元文件。如果定义在某个命名空间内，那么它只在直接隶属的命名空间内起作用</p><h2 id="Asp-NET-知识点总结-五"><a href="#Asp-NET-知识点总结-五" class="headerlink" title="Asp.NET 知识点总结(五)"></a>Asp.NET 知识点总结(五)</h2><p>1.传入某个属性的set方法的隐含参数的名称是什么？<br>value，它的类型和属性所声名的类型相同。</p><p>2.如何在C#中实现继承？<br>在类名后加上一个冒号，再加上基类的名称。</p><p>3.C#支持多重继承么？<br>不支持。可以用接口来实现。</p><p>4.被protected修饰的属性/方法在何处可以访问？<br>在继承或间接继承与这个类的子类中可以访问。</p><p>5.私有成员会被继承么？<br>会，但是不能被访问。所以看上去他们似乎是不能被继承的，但实际上确实被继承了。</p><p>6.请描述一下修饰符protected internal。</p><p>被protected internal修饰的属性/方法只能在它的在同一个程序集（Assembly）中的子类被访问。</p><p>C#提供一个默认的无参数构造函数，当我实现了另外一个有一个参数的构造函数时候，还想保留这个无参数的构造函数。这样我应该写几个构造函数？<br>两个，一旦你实现了一个构造函数，C#就不会再提供默认的构造函数了，所以需要手动实现那个无参数构造函数。</p><p>7.C#中所有对象共同的基类是什么？</p><p>System.Object.</p><p>8.重载和覆写有什么区别？</p><p>重载提供了对一个方法签名的不同参数调用的实现。覆写提供了子类中改变父类方法行为的实现。</p><p>9.在方法定义中，virtual有什么含意？</p><p>被virtual修饰的方法可以被子类覆写。<br>能够将非静态的方法覆写成静态方法么？<br>不能，覆写方法的签名必须与被覆写方法的签名保持一致，除了将virtual改为override。</p><p>10.可以覆写私有的虚方法么？</p><p>不可以，甚至子类中无法访问父类中的私有方法。</p><p>11.能够阻止某一个类被其他类继承么？<br>可以，使用关键字sealed。</p><p>12.能够实现允许某个类被继承，但不允许其中的某个方法被覆写么？<br>可以，标记这个类为public，并标记这个方法为sealed。</p><p>13.什么是抽象类（abstract class）？</p><p>一种不可以被实例化的类。抽象类中一般含有抽象方法，当然也可有具体实现。继承类只有实现过所有抽象类的抽象方法后才能被实例化。</p><p>14.何时必须声明一个类为抽象类？<br>当这个类中包含抽象方法时，或是该类并没有完全实现父类的抽象方法时。</p><p>15.接口（interface）是什么？<br>只含有共有抽象方法（public abstract method）的类。这些方法必须在子类中被实现。</p><p>16.为什么不能指定接口中方法的修饰符？</p><p>接口中的方法用来定义对象之间通信的契约，指定接口中的方法为私有或保护没有意义。他们默认为公有方法。</p><p>17.可以继承多个接口么？<br>当然。</p><p>那么如果这些接口中有重复的方法名称呢？<br>这种情况中你可以决定如何实现。当然需要特别得小心。但是在编译环节是没有问题的。</p><p>18.接口和抽象类的区别是什么？</p><p>接口中所有方法必须是抽象的，并且不能指定方法的访问修饰符。抽象类中可以有方法的实现，也可以指定方法的访问修饰符。<br>如何区别重载方法？<br>不同的参数类型，不同的参数个数，不同的参数顺序。</p><p>19.const和readonly有什么区别？</p><p>const关键字用来声明编译时常量，readonly用来声明运行时常量。<br>System.String 和System.StringBuilder有什么区别？<br>System.String是不可变的字符串。System.StringBuilder存放了一个可变的字符串，并提供一些对这个字符串修改的方法。</p><p>20.列举一下你所了解的XML技术及其应用<br>答：保存配置,站与站之间的交流,WEB SERVICE。以及与数据库的数据交互等地方都要用它.</p><p>21.C#中的接口和类有什么异同。<br>答：<br>异：</p><p>不能直接实例化接口。<br>接口不包含方法的实现。<br>接口、类和结构可从多个接口继承。但是C# 只支持单继承：类只能从一个基类继承实现。<br>类定义可在不同的源文件之间进行拆分。</p><p>同：</p><p>接口、类和结构可从多个接口继承。<br>接口类似于抽象基类：继承接口的任何非抽象类型都必须实现接口的所有成员。<br>接口可以包含事件、索引器、方法和属性。<br>一个类可以实现多个接口。22.活动目录的作用。<br>答：Active Directory存储了有关网络对象的信息，并且让管理员和用户能够轻松地查找和使用这些信息。Active Directory使用了一种结构化的数据存储方式，并以此作为基础对目录信息进行合乎逻辑的分层组织。<br>23..net中读写XML的类都归属于哪些命名空间？<br>答：System.Xml</p><p>24.什么是SOAP,有哪些应用。<br>答：SOAP（Simple Object Access Protocol ）简单对象访问协议是在分散或分布式的环境中交换信息并执行远程过程调用的协议，是一个基于XML的协议。使用SOAP，不用考虑任何特定的传输协议（最常用的还是HTTP协议），可以允许任何类型的对象或代码，在任何平台上，以任何一直语言相互通信。</p><p>25.抽象类和接口的区别</p><p>抽象类（abstract class）可以包含功能定义和实现，接口（interface）只能包含功能定义;</p><p>抽象类是从一系列相关对象中抽象出来的概念， 因此反映的是事物的内部共性；接口是为了满足外部调用而定义的一个功能约定， 因此反映的是事物的外部特性;<br>分析对象，提炼内部共性形成抽象类，用以表示对象本质，即“是什么”;<br>为外部提供调用或功能需要扩充时优先使用接口;</p><p> 接口可以包含属性、方法、索引指示器和事件，但不能包含常量、域、操作符、构造函数和析构函数，而且也不能包含任何静态成员</p><p>26.this 关键字</p><p>this是一个保留字，仅限于构造函数和方法成员中使用</p><p>27.Debug类与Trace类有什么区别</p><p>Debug类里所提供的函数仅在编译时带#Debug宏参数才奏效，一旦到了Release版本中，这些函数都会被忽略。也就是说Debug类的功能仅在程序员开发的时候能用。而Trace则不同，它能在Release版本的程序中也被运行</p><p>28.页面间的传值有哪几种方式<br>答：session(viewstate) 简单，但易丢失<br>application 全局<br>cookie 简单，但可能不支持，可能被伪造<br>input ttype=”hidden” 简单，可能被伪造<br>url参数 简单，显示于地址栏，长度有限<br>数据库 稳定，安全，但性能相对弱</p><p>29.深拷贝和浅拷贝</p><p>浅拷贝是指将对象中的数值类型的字段拷贝到新的对象中，而对象中的引用型字段则指复制它的一个引用到目标对象。如果改变目标对象中引用型字段的值他将反映在原是对象中，也就是说原始对象中对应的字段也会发生变化。深拷贝与浅拷贝不同的是对于引用的处理，深拷贝将会在新对象中创建一个新的和原是对象中对应字段相同（内容相同）的字段，也就是说这个引用和原是对象的引用是不同的，我们在改变新对象中的这个字段的时候是不会影响到原始对象中对应字段的内容</p><p>30.什么是属性访问器</p><p>属性访问器（Property Accessor），包括 get 访问器和 set 访问器分别用于字段的读写操作<br>其设计目的主要是为了实现面向对象（OO）中的封装思想。根据该思想，字段最好设为private，一个精巧的类最好不要直接把字段设为公有提供给客户调用端直接访问</p><h2 id="Asp-NET-知识点总结-六"><a href="#Asp-NET-知识点总结-六" class="headerlink" title="Asp.NET 知识点总结(六)"></a>Asp.NET 知识点总结(六)</h2><p>1.传入某个属性的set方法的隐含参数的名称是什么？</p><p>value，它的类型和属性所声名的类型相同。</p><p>2.如何在C#中实现继承？</p><p>在类名后加上一个冒号，再加上基类的名称。</p><p>3.C#支持多重继承么？</p><p>类之间不支持，接口之间支持。类对接口叫做实现，不叫继承。<br>4.被protected修饰的属性/方法在何处可以访问？</p><p>在继承或间接继承与这个类的子类中可以访问。<br>私有成员会被继承么？<br>会，但是不能被访问。所以看上去他们似乎是不能被继承的，但实际上确实被继承了。</p><p>请描述一下修饰符protected internal。</p><p>在同一个Assembly中，他的访问级别和public一样，而跨Assembly访问时，他的访问级别同protected一样。即protected的范围 + internal的范围。<br>C#提供一个默认的无参数构造函数，当我实现了另外一个有一个参数的构造函数时候，还想保留这个无参数的构造函数。这样我应该写几个构造函数？<br>两个，一旦你实现了一个构造函数，C#就不会再提供默认的构造函数了，所以需要手动实现那个无参数构造函数。</p><p>C#中所有对象共同的基类是什么？<br>System.Object.</p><p>重载和覆写有什么区别？</p><p>重载提供了对一个方法签名的不同参数调用的实现。覆写提供了子类中改变父类方法行为的实现。</p><p>在方法定义中，virtual有什么含意？</p><p>被virtual修饰的方法可以被子类覆写。</p><p>能够将非静态的方法覆写成静态方法么？</p><p>不能，覆写方法的签名必须与被覆写方法的签名保持一致，除了将virtual改为override。</p><p>可以覆写私有的虚方法么？</p><p>不可以，甚至子类中无法访问父类中的私有方法。</p><p>能够阻止某一个类被其他类继承么？</p><p>可以，使用关键字sealed。</p><p>能够实现允许某个类被继承，但不允许其中的某个方法被覆写么？</p><p>可以，标记这个类为public，并标记这个方法为sealed。</p><p>什么是抽象类（abstract class）？</p><p>一种不可以被实例化的类。抽象类中一般含有抽象方法，当然也可有具体实现。继承类只有实现过所有抽象类的抽象方法后才能被实例化。</p><p>何时必须声明一个类为抽象类？</p><p>当这个类中包含抽象方法时，或是该类并没有完全实现父类的抽象方法时。</p><p>接口（interface）是什么？</p><p>只含有共有抽象方法（public abstract method）的类。这些方法必须在子类中被实现。<br>为什么不能指定接口中方法的修饰符？<br>接口中的方法用来定义对象之间通信的契约，指定接口中的方法为私有或保护没有意义。他们默认为公有方法。</p><p>可以继承多个接口么？</p><p>当然。</p><p>那么如果这些接口中有重复的方法名称呢？</p><p>这种情况中你可以决定如何实现。当然需要特别得小心。但是在编译环节是没有问题的。</p><p>接口和抽象类的区别是什么？</p><p>接口中所有方法必须是抽象的，并且不能指定方法的访问修饰符。抽象类中可以有方法的实现，也可以指定方法的访问修饰符。</p><p>如何区别重载方法？</p><p>不同的参数类型，不同的参数个数，不同的参数顺序。</p><p>const和readonly有什么区别？</p><p>const可以用于局部常量，而readonly，实际是类的initonly字段，显然不能是局部的。</p><p>System.String 和System.StringBuilder有什么区别？</p><p>System.String是不可变的字符串。System.StringBuilder存放了一个可变的字符串，并提供一些对这个字符串修改的方法。</p><h2 id="Asp-NET-知识点总结-七"><a href="#Asp-NET-知识点总结-七" class="headerlink" title="Asp.NET 知识点总结(七)"></a>Asp.NET 知识点总结(七)</h2><p>1.new修饰符是起什么作用<br>new 修饰符用于声明类或类的成员，表示隐藏了基类中同名的成员。而new 操作符用于实例化一个类型<br>new 修饰符只能用于继承类，一般用于弥补基类设计的不足<br>new 修饰符和 override 修饰符不可同时用在一个成员上，因为这两个修饰符在含义上互相排斥</p><p>2.可以使用抽象函数重写基类中的虚函数吗</p><p>需使用 new 修饰符显式声明，表示隐藏了基类中该函数的实现<br>或增加 override 修饰符，表示抽象重写了基类中该函数的实现</p><p>3.说出你对remoting 和webservice的理解和应用</p><p>web服务，是利用SOAP（简单对象访问协议，Simple Object Access Protocol）在HTTP上执行远程方法调用的一种方法，也可以使用WSDL（Web Service Description Language，Web服务描述语言）来完整的描述Web服务，基于XML标准。<br>Remoting，可以用来访问另一个应用程序域中的对象，为客户机和服务器端的.Net应用程序之间的通讯提供了一种更为快速的格式。Remoting体系的主要元素：远程对象，信道，消息，格式标识符，格式标识符提供程序，代理对象，消息接收器，激活器，RemotingConfiguration类,ChannelServices类。</p><p>4..什么是XML？<br>答：可扩展标记语言，可以做配置文件，可以传输数据，可以存储数据</p><p>5.什么是Application Pool？<br>答：Web应用，类似Thread Pool，提高并发性能<br>6.链表和数组的区别，各有什么优缺点.<br>答：一个可以动态增长，一个固定,性能数组教好<br>7.Remoting在客户端服务器怎么实现 ?<br>答：创建一个TcpClientChannel对象，在ChannelServices中注册，然后使用Activator类把代理对象返回给远程对象。<br>8.什么是友元函数？<br>答：friendly声明，可以访问protect级别方法</p><p>9.dataset是保存数据的数据结构，断开模式，而DataReader不承担保存数据的责任，需要自己手动关闭连接数据库，它只负责从数据源读取数据到本地而已，是只读向前的，它不是数据结构，而是网络通讯组件的高层封装。</p><p>10.session 保存原理</p><p>通过cookie<br>Cookie是保存在客户端的一小段信息，服务器在响应请求时可以将一些数据以“键-值”对的形式通过响应信息保存在客户端。当浏览器再次访问相同的应用时，会将原先的Cookie通过请求信息带到服务器端。</p><p>可以采用url重写。</p><p>11.iframe 的用法</p><p>iframe 标签 文件透明</p><p>allowtransparency=”true” style=”background-color=transparent”</p><p>刷新的三种方案：</p><p>用iframe的name属性定位：</p><input type="button" name="Button" value="Button" onclick="document.frames('ifrmname').location.reload()"><p>用iframe的id属性定位：</p><input type="button" name="Button" value="Button" onclick="ifrmid.window.location.reload()"><p>当iframe的src为其它网站地址(跨域操作时)：</p><input type="button" name="Button" value="Button" onclick="window.open(document.all.ifrmname.src,'ifrmname','')"><p>12.您了解设计模式么？请列出您所知道的设计模式的名称。</p><p>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使人们可以更加简单方便地复用成功的设计和体系结构。</p><p>创建型设计模式：与对象的创建有关。<br>结构型设计模式：处理类或对象的组合。<br>行为型设计模式：描述类或对象如何交互及如何分配职责。<br>常见的创建型设计模式有：单例模式；简单工厂模式；工厂方法模式；抽象工厂模式；建造者模式；原型模式。<br>常见的结构型模式：适配器模式；桥接模式；组合模式；装饰模式；外观模式；轻量级模式；代理模式。<br>常见的行为型模式：责任链模式；命令模式；解释模；迭代器模式；中介者模式；备忘录模式；观察者模式；状态模式；策略模式；模板方法模式；访问者模式。</p><p>单一设计模式： Singleton就是确保一个类只有唯一的一个实例。Singleton主要用于对象的创建，这意味着，如果某个类采用了Singleton模式，则在这个类被创建后，它将有且仅有一个实例可供访问。</p><p>简单工厂设计模式：简单工厂模式的实质是由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类（这些产品类继承自一个父类或接口）的实例。</p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADO.NET+SqlHelper</title>
      <link href="/2019/01/08/ado.net/"/>
      <url>/2019/01/08/ado.net/</url>
      
        <content type="html"><![CDATA[<h2 id="ADO-NET-自己封装的SqlHelper"><a href="#ADO-NET-自己封装的SqlHelper" class="headerlink" title="ADO.NET+自己封装的SqlHelper"></a>ADO.NET+自己封装的SqlHelper</h2><p> 理论到处都是的，我就不写理论了，两张图表达一切：<br><img src="/2019/01/08/ado.net/1.jpg" alt="图1"><br><img src="/2019/01/08/ado.net/2.jpg" alt="图2"><br> 下面直接写demo练习和自己封装一个sqlHelper分享大家看看</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre class=" language-bash"><code class="language-bash"> static public void TestConnection<span class="token punctuation">(</span><span class="token punctuation">)</span> //连接        <span class="token punctuation">{</span>        //1.连接通道的连接字符串            string Constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa"</span><span class="token punctuation">;</span>        //2.连接通道           SqlConnection con<span class="token operator">=</span>new SqlConnection<span class="token punctuation">(</span>Constr<span class="token punctuation">)</span><span class="token punctuation">;</span>          //3.打开通道            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          //4.关闭通道            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"连接上数据库了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //注意如果是orcale的，方式不同：            OleDbConnection conn <span class="token operator">=</span> new OleDbConnection<span class="token punctuation">(</span><span class="token string">"Provider=MSDAORA.1;Data Source=(DESCRIPTION =(ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.2.234)(PORT = 1521)))(CONNECT_DATA = (SID = orcl))) ;User Id=sjk;Password=sssss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string sql <span class="token operator">=</span> <span class="token string">"select * from tbl_aa "</span><span class="token punctuation">;</span>            OleDbDataAdapter da <span class="token operator">=</span> new OleDbDataAdapter<span class="token punctuation">(</span>sql, conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            DataSet ds <span class="token operator">=</span> new DataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            da.Fill<span class="token punctuation">(</span>ds, <span class="token string">"ds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataGridView1.DataSource <span class="token operator">=</span> ds.Tables<span class="token punctuation">[</span>0<span class="token punctuation">]</span>        <span class="token punctuation">}</span></code></pre><h2 id="查询单个值"><a href="#查询单个值" class="headerlink" title="查询单个值"></a>查询单个值</h2><pre class=" language-bash"><code class="language-bash">   static public void QuerySingle<span class="token punctuation">(</span><span class="token punctuation">)</span> //查询单个值  SqlCommand .ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection  con<span class="token operator">=</span>new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select count(*) from Category"</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            object obj <span class="token operator">=</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span>obj.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="增，删，改"><a href="#增，删，改" class="headerlink" title="增，删，改"></a>增，删，改</h2><pre class=" language-bash"><code class="language-bash"> static public void AddRecord<span class="token punctuation">(</span><span class="token punctuation">)</span> //增，删，改 SqlCommand ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int res <span class="token operator">=</span> 0<span class="token punctuation">;</span> //准备接受新橧        //1.连接通道的字符串            string Constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>        //2.连接通道            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       //3.手动指定连接字符串            con.ConnectionString <span class="token operator">=</span> Constr<span class="token punctuation">;</span>       //4.准备insert字符串语句            string sqlstr <span class="token operator">=</span> <span class="token string">"insert into Category(C_name,C_remark,C_isdel,C_addtime)values('编程书籍','asp.net','0',GetDate())"</span><span class="token punctuation">;</span>        //5.新建命令对象（工人），并告诉哪里走，做什么            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            //cmd.CommandText <span class="token operator">=</span> sqlstr<span class="token punctuation">;</span>            //cmd.Connection <span class="token operator">=</span> con<span class="token punctuation">;</span>         //打开连接通道            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         //6.调用方法去执行sql语句            res <span class="token operator">=</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//此方法负责增删改，返回受影响的行数（int）            //关闭连接通道            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"新增成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"新增失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="查询多行数据-SqlDataReader"><a href="#查询多行数据-SqlDataReader" class="headerlink" title="查询多行数据 SqlDataReader"></a>查询多行数据 SqlDataReader</h2><pre class=" language-bash"><code class="language-bash"> static public void QueryList<span class="token punctuation">(</span><span class="token punctuation">)</span> //查询多行数据 SqlDataReader        <span class="token punctuation">{</span>            string constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select * from Category"</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlDataReader dr <span class="token operator">=</span> cmd.ExecuteReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dr.HasRows<span class="token punctuation">)</span>//是返回返回结果            <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>dr.Read<span class="token punctuation">(</span><span class="token punctuation">))</span>//前进下一行记录                <span class="token punctuation">{</span>                    //Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //for <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 5<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>                    //<span class="token punctuation">{</span>                    //    Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //<span class="token punctuation">}</span>                    Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> +<span class="token string">"+"</span>+ dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //Console.WriteLine<span class="token punctuation">(</span>dr.GetOrdinal<span class="token punctuation">(</span><span class="token string">"C_id"</span><span class="token punctuation">)</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"无数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            dr.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="使用适配器读取数据-填充数据集-SqlDataAdapter"><a href="#使用适配器读取数据-填充数据集-SqlDataAdapter" class="headerlink" title="使用适配器读取数据,填充数据集 SqlDataAdapter"></a>使用适配器读取数据,填充数据集 SqlDataAdapter</h2><pre class=" language-bash"><code class="language-bash">  static public void QueryListByAdapter<span class="token punctuation">(</span><span class="token punctuation">)</span> //使用适配器读取数据,填充数据集 SqlDataAdapter        <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select * from Category"</span><span class="token punctuation">;</span>            //创建适配器，告诉它要做什么事情，走那条路            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建数据集对象（程序端的临时数据库）            DataSet ds <span class="token operator">=</span> new DataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //调用fill方法，填充数据集（先去数据库查询数据集，并把结果集返回赋值给数据集）            da.Fill<span class="token punctuation">(</span>ds,<span class="token string">"table1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //获取数据集中的每一张表            DataTable dt <span class="token operator">=</span> ds.Tables<span class="token punctuation">[</span><span class="token string">"table1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            //循环数据表中的每一行            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dt.Rows.Count<span class="token punctuation">;</span>i++ <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                DataRow dr <span class="token operator">=</span> dt.Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                //每一行里的每一列                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span></code></pre><h2 id="使用适配器读取数据-填充表-SqlDataAdapter"><a href="#使用适配器读取数据-填充表-SqlDataAdapter" class="headerlink" title="使用适配器读取数据,填充表 SqlDataAdapter"></a>使用适配器读取数据,填充表 SqlDataAdapter</h2><pre class=" language-bash"><code class="language-bash">  static public void QueryListByAdapter2<span class="token punctuation">(</span><span class="token punctuation">)</span> //使用适配器读取数据,填充表 SqlDataAdapter        <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select * from Category"</span><span class="token punctuation">;</span>            //创建适配器，告诉它要做什么事情，走那条路            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建数据表（程序端的临时数据库）            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //调用fill方法，填充数据集（先去数据库查询数据集，并把结果集返回赋值给数据集）            da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            //循环数据表中的每一行            foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            //for <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dt.Rows.Count<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            //<span class="token punctuation">{</span>            //    DataRow dr <span class="token operator">=</span> dt.Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            //    //每一行里的每一列            //    Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //<span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="调用存储过程-单个参数"><a href="#调用存储过程-单个参数" class="headerlink" title="调用存储过程 单个参数"></a>调用存储过程 单个参数</h2><pre class=" language-bash"><code class="language-bash"> static public void QueryListByProc<span class="token punctuation">(</span><span class="token punctuation">)</span> //调用存储过程 单个参数        <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token string">"usp_getBook"</span>, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd.CommandType <span class="token operator">=</span> CommandType.StoredProcedure<span class="token punctuation">;</span> //指定命令类型为存储过程            SqlParameter sp<span class="token operator">=</span>new SqlParameter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//指定存储过程中的参数            sp.ParameterName <span class="token operator">=</span> <span class="token string">"@CateId"</span><span class="token punctuation">;</span>            sp.SqlDbType <span class="token operator">=</span> SqlDbType.Int<span class="token punctuation">;</span>            sp.Value <span class="token operator">=</span> 3<span class="token punctuation">;</span>            cmd.Parameters.Add<span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>//将参数对象加入到命令对象的参数集合中            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="调用存储过程，多参数"><a href="#调用存储过程，多参数" class="headerlink" title="调用存储过程，多参数"></a>调用存储过程，多参数</h2><pre class=" language-bash"><code class="language-bash">        static public void QueryListByProc2<span class="token punctuation">(</span><span class="token punctuation">)</span>//调用存储过程，多参数         <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=Bank;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token string">"getBank"</span>, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd.CommandType <span class="token operator">=</span> CommandType.StoredProcedure<span class="token punctuation">;</span>//指定作为存储过程执行            SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> sp <span class="token operator">=</span> <span class="token punctuation">{</span> new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageSize"</span>, SqlDbType.Int, 4<span class="token punctuation">)</span>,                                  new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageindex"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                  new SqlParameter<span class="token punctuation">(</span><span class="token string">"@rowCount"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                  new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageCount"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>                                <span class="token punctuation">}</span><span class="token punctuation">;</span>            sp<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 2<span class="token punctuation">;</span>//设置搜索第一页            sp<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 5<span class="token punctuation">;</span>//设置显示的页数            sp<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>//输出参数            sp<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>            //sp<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 5<span class="token punctuation">;</span>            //sp<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 5<span class="token punctuation">;</span>            cmd.Parameters.AddRange<span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>//为cmd对象添加参数数组            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>//创建适配器            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创建数据表（程序端）            da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"R"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"+"</span>+dr<span class="token punctuation">[</span><span class="token string">"bankID"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"+"</span>+dr<span class="token punctuation">[</span><span class="token string">"customerName"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"+"</span>+dr<span class="token punctuation">[</span><span class="token string">"currentMoney"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            int rowCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>cmd.Parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>            int pageCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>cmd.Parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0},{1}"</span>,rowCount,pageCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="SqlHelper"><a href="#SqlHelper" class="headerlink" title="SqlHelper"></a>SqlHelper</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Configuration<span class="token punctuation">;</span>using System.Data.SqlClient<span class="token punctuation">;</span>namespace Power_2.DAL<span class="token punctuation">{</span>    class SqlHelper    <span class="token punctuation">{</span> //每次打开一个连接保持快速连接        private static <span class="token function">readonly</span> string constr <span class="token operator">=</span> ConfigurationManager.ConnectionStrings<span class="token punctuation">[</span><span class="token string">"conStr"</span><span class="token punctuation">]</span>.ConnectionString<span class="token punctuation">;</span>        //封装方法的原则：把不变大的放到方法里，把变化的放参数中到        private static SqlConnection conn<span class="token punctuation">;</span> //连接        public static SqlConnection Conn        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> null <span class="token operator">||</span> conn.State <span class="token operator">==</span> ConnectionState.Broken<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> conn<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 析构函数，自动消除，防止没有删除完，程序自动调用        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sql"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        ~SqlHelper<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public void Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span> //写个方法可以调用回收        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn.State <span class="token operator">!=</span> ConnectionState.Closed<span class="token punctuation">)</span>                    conn.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                conn.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 执行的语句 执行增删改        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sql"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static int ExecuteNonQuery<span class="token punctuation">(</span>string sql<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 参数执行的语句 执行增删改        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sqlstr"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"paras"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static int ExecuteNonQuery<span class="token punctuation">(</span>string sqlstr, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                int res <span class="token operator">=</span> 0<span class="token punctuation">;</span>                try                <span class="token punctuation">{</span>                    res <span class="token operator">=</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    throw ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                finally                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd.Parameters.Count <span class="token operator">></span> 0<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            cmd.Parameters.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        cmd.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        cmd <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                Conn.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ExecuteScalar<span class="token punctuation">(</span>string sql<span class="token punctuation">)</span> //查询单个值        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ExecuteScalar<span class="token punctuation">(</span>string sql, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span> //查询单个值        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 查询结果集比较少的sql        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sql"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"paras"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static DataTable ExecuteDataTable<span class="token punctuation">(</span>string sql, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sql,conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                SqlDataAdapter adapter <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                try                <span class="token punctuation">{</span>                    adapter.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    throw ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                finally                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        adapter.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        adapter <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> dt<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static SqlDataReader ExecuteDataReader<span class="token punctuation">(</span>string cmdText, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>            conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                cmd.CommandText <span class="token operator">=</span> cmdText<span class="token punctuation">;</span>                cmd.Parameters.AddRange<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> cmd.ExecuteReader<span class="token punctuation">(</span>CommandBehavior.CloseConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 执行简单分页存储过程        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pageIndex"</span><span class="token operator">></span>每页行数<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pageSize"</span><span class="token operator">></span>当前页面数<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"rowCount"</span><span class="token operator">></span>总行数（传出参数）<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pageCount"</span><span class="token operator">></span>总页数（传出参数）<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static DataTable ExecProSimplePageList<span class="token punctuation">(</span>int pageIndex, int pageSize, out int rowCount, out int pageCount<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            rowCount <span class="token operator">=</span> 1<span class="token punctuation">;</span>            pageCount <span class="token operator">=</span> 1<span class="token punctuation">;</span>            SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span><span class="token punctuation">{</span>                                      new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageindex"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                       new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageSize "</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                       new SqlParameter<span class="token punctuation">(</span><span class="token string">"@rowCount "</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                       new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageCount"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>                                      <span class="token punctuation">}</span><span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Value <span class="token operator">=</span> pageIndex<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Value <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value <span class="token operator">=</span> rowCount<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value <span class="token operator">=</span> pageCount<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span><span class="token punctuation">{</span>                 cmd.Connection <span class="token operator">=</span> conn<span class="token punctuation">;</span>                 cmd.CommandText <span class="token operator">=</span> <span class="token string">"usp_Book_paging"</span><span class="token punctuation">;</span>                 cmd.CommandType <span class="token operator">=</span> CommandType.StoredProcedure<span class="token punctuation">;</span>                 cmd.Parameters.AddRange<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>                 SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                 DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>                 rowCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                 pageCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> dt<span class="token punctuation">;</span>             <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        public static object FromDbValue<span class="token punctuation">(</span>object value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> DBNull.Value<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ToDbValue<span class="token punctuation">(</span>object value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> DBNull.Value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ////////////////////执行存储过程的增删查改//////////////////////////        private static SqlConnection CNN        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn.State <span class="token operator">!=</span> ConnectionState.Open<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> conn<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region 连接等都写在一个方法里</span>        private static SqlCommand CreateCommand<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd.Connection <span class="token operator">=</span> CNN<span class="token punctuation">;</span>            cmd.CommandText <span class="token operator">=</span> cmdText<span class="token punctuation">;</span>            cmd.CommandType <span class="token operator">=</span> cmdType<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parms <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cmd.Parameters.AddRange<span class="token punctuation">(</span>parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> cmd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ///         <span class="token comment" spellcheck="true">#endregion &lt;summary></span>        ///执行增删改功能储存过程        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region ExecuteCommand</span>        public static int ExecuteCommand<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> ExecuteCommand<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static int ExecuteCommand<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> ExecuteCommand<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static int ExecuteCommand<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 返回一张表        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region GetTable</span>        public static DataTable GetTable<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetTable<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static DataTable GetTable<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetTable<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static DataTable GetTable<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DataTable table <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlDataAdapter adapter <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">))</span><span class="token punctuation">;</span>            adapter.Fill<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> table<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// SqlDataReader可以读一行行数据的对象、查询多行数据 SqlDataReader        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region GetReader</span>        public static SqlDataReader GetReader<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetReader<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static SqlDataReader GetReader<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetReader<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static SqlDataReader GetReader<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cmd.ExecuteReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 返回单个值        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region GetScalar</span>        public static object GetScalar<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetScalar<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static object GetScalar<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetScalar<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static object GetScalar<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> ADO.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML解析demo</title>
      <link href="/2019/01/08/xml/"/>
      <url>/2019/01/08/xml/</url>
      
        <content type="html"><![CDATA[<h2 id="创建xml"><a href="#创建xml" class="headerlink" title="创建xml"></a>创建xml</h2><pre class=" language-bash"><code class="language-bash">  static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  //1.创建一个XDocument对象      XDocument writeXml <span class="token operator">=</span> new XDocument<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     //2.增加一个根节点      XElement XRoot <span class="token operator">=</span> new XElement<span class="token punctuation">(</span><span class="token string">"WebSites"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      //3.将根节点加到writeXML中      writeXml.Add<span class="token punctuation">(</span>XRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>      //4.写子节点      XElement XeBaidu <span class="token operator">=</span> new XElement<span class="token punctuation">(</span><span class="token string">"WebSite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      XeBaidu.SetAttributeValue<span class="token punctuation">(</span><span class="token string">"url"</span>, <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      //5.把子节点加到根节点上      //快速添加子节点      XRoot.SetElementValue<span class="token punctuation">(</span><span class="token string">"webSiteCount"</span>,100<span class="token punctuation">)</span><span class="token punctuation">;</span>      XRoot.Add<span class="token punctuation">(</span>XeBaidu<span class="token punctuation">)</span><span class="token punctuation">;</span>      //继续增加子元素增加子标签      XeBaidu.SetElementValue<span class="token punctuation">(</span><span class="token string">"name"</span>, <span class="token string">"笑笑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      XeBaidu.SetElementValue<span class="token punctuation">(</span><span class="token string">"age"</span>, <span class="token string">"19"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      writeXml.Save<span class="token punctuation">(</span><span class="token string">"Web.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="解析XML"><a href="#解析XML" class="headerlink" title="解析XML"></a>解析XML</h2><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     XDocument doc <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\订单练习\orders.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     XElement orderElement <span class="token operator">=</span> doc.Root<span class="token punctuation">;</span>     XElement customerElement<span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"CustomerName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     XElement orderNumberElement <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"orderNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     XElement orderItems <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderName <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderCount <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     foreach <span class="token punctuation">(</span>XElement order <span class="token keyword">in</span> orderItems.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span>         <span class="token punctuation">{</span>               orderName.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>               orderCount.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Count"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        Console.WriteLine<span class="token punctuation">(</span>customerElement.Value+<span class="token string">"的订单"</span>+orderNumberElement.Value+<span class="token string">"买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Console.WriteLine<span class="token punctuation">(</span>orderNae<span class="token punctuation">[</span>0<span class="token punctuation">]</span> +orderCount<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>2<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    ////////////////XML 文件<span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>order<span class="token operator">></span>  <span class="token operator">&lt;</span>CustomerName<span class="token operator">></span>小肖<span class="token operator">&lt;</span>/CustomerName<span class="token operator">></span>  <span class="token operator">&lt;</span>orderNumber<span class="token operator">></span>BJ200888<span class="token operator">&lt;</span>/orderNumber<span class="token operator">></span>  <span class="token operator">&lt;</span>items<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电脑"</span> Count<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电视"</span> Count<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"水杯"</span> Count<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>  <span class="token operator">&lt;</span>/items<span class="token operator">></span><span class="token operator">&lt;</span>/order<span class="token operator">></span></code></pre><h2 id="XML序列化"><a href="#XML序列化" class="headerlink" title="XML序列化"></a>XML序列化</h2><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Person per <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per.name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>        per.age <span class="token operator">=</span> 18<span class="token punctuation">;</span>        Person per1 <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per1.name <span class="token operator">=</span> <span class="token string">"dfafd"</span><span class="token punctuation">;</span>        per1.age <span class="token operator">=</span> 12<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list.Add<span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>        list.Add<span class="token punctuation">(</span>per1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#region 序列号一般的类</span>        //XmlSerializer xmlSer <span class="token operator">=</span> new XmlSerializer<span class="token punctuation">(</span>typeof<span class="token punctuation">(</span>Person<span class="token punctuation">))</span><span class="token punctuation">;</span>        //using <span class="token punctuation">(</span>FileStream fs <span class="token operator">=</span> File.OpenWrite<span class="token punctuation">(</span><span class="token string">"Person.xml"</span><span class="token punctuation">))</span>        //<span class="token punctuation">{</span>        //    xmlSer.Serialize<span class="token punctuation">(</span>fs, per<span class="token punctuation">)</span><span class="token punctuation">;</span>        //<span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>        <span class="token comment" spellcheck="true">#region 序列号集合</span>        XmlSerializer xmlser<span class="token operator">=</span>new XmlSerializer<span class="token punctuation">(</span>typeof<span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">))</span><span class="token punctuation">;</span>        using <span class="token punctuation">(</span>FileStream fs <span class="token operator">=</span> File.OpenWrite<span class="token punctuation">(</span><span class="token string">"list.xml"</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>            xmlser.Serialize<span class="token punctuation">(</span>fs, list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  public  class Person <span class="token punctuation">{</span>        public string name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public int age <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="studentmessage-xml文件"><a href="#studentmessage-xml文件" class="headerlink" title="studentmessage.xml文件"></a>studentmessage.xml文件</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>student<span class="token operator">></span>  <span class="token operator">&lt;</span>net09<span class="token operator">></span>    <span class="token operator">&lt;</span>preson id<span class="token operator">=</span><span class="token string">"cz001"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>小小<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>22<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>女<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/preson<span class="token operator">></span>    <span class="token operator">&lt;</span>person id<span class="token operator">=</span><span class="token string">"cz002"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>小周<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>21<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>男<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/person<span class="token operator">></span>  <span class="token operator">&lt;</span>/net09<span class="token operator">></span>  <span class="token operator">&lt;</span>net08<span class="token operator">></span>    <span class="token operator">&lt;</span>person id<span class="token operator">=</span><span class="token string">"cx001"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>嘉怡<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>16<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>女<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/person<span class="token operator">></span>    <span class="token operator">&lt;</span>person id<span class="token operator">=</span><span class="token string">"cx002"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>小肖<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>18<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>男<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/person<span class="token operator">></span>      <span class="token operator">&lt;</span>/net08<span class="token operator">></span><span class="token operator">&lt;</span>/student<span class="token operator">></span></code></pre><h2 id="XML加载"><a href="#XML加载" class="headerlink" title="XML加载"></a>XML加载</h2><pre class=" language-bash"><code class="language-bash"> private void btnXml_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //1加载            XDocument docxml <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\XML操作\studentmessage.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //2.获取根节点            XElement xmlRoot <span class="token operator">=</span> docxml.Root<span class="token punctuation">;</span>            //3.把根节点加到TreeView上            TreeNode treeviewroot <span class="token operator">=</span> tvXmlShow.Nodes.Add<span class="token punctuation">(</span>xmlRoot.Name.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //4.递归加载            LoadNodes<span class="token punctuation">(</span>xmlRoot,treeviewroot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //foreach没了，就停止了        private void LoadNodes<span class="token punctuation">(</span>XElement xmlRoot, TreeNode treeviewroot<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            foreach <span class="token punctuation">(</span>XElement ele <span class="token keyword">in</span> xmlRoot.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ele.Elements<span class="token punctuation">(</span><span class="token punctuation">)</span>.Count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>   //绑定的是元素本身                    TreeNode node <span class="token operator">=</span> treeviewroot.Nodes.Add<span class="token punctuation">(</span>ele.Name.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //如果有属性的话，怎遍历属性                    XAttribute eleAttribute<span class="token operator">=</span> ele.Attribute<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>eleAttribute <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        node.Text +<span class="token operator">=</span> <span class="token string">"{"</span> + eleAttribute.Name + <span class="token string">"="</span> + eleAttribute.Value + <span class="token string">"}"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    LoadNodes<span class="token punctuation">(</span>ele, node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> TreeNode node <span class="token operator">=</span> treeviewroot.Nodes.Add<span class="token punctuation">(</span>ele.Value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p><img src="/2019/01/08/xml/1.jpg" alt="图1"></p><h2 id="经典案例银行xml"><a href="#经典案例银行xml" class="headerlink" title="经典案例银行xml"></a>经典案例银行xml</h2><h3 id="ytbank-xml"><a href="#ytbank-xml" class="headerlink" title="ytbank.xml"></a>ytbank.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span> <span class="token operator">&lt;</span>CFX<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000001"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"腾讯销售部"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"新浪财务部"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000002"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000003"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000004"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000005"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000006"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000007"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000008"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000009"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000010"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000011"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000012"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000013"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000014"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000015"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span><span class="token operator">&lt;</span>/CFX<span class="token operator">></span></code></pre><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        XDocument bankdoc <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\银行bank解析\ytbank.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XElement bankroot <span class="token operator">=</span> bankdoc.Root<span class="token punctuation">;</span>        string businesscode, serialnumber, money, payorganization, payunit,  getorganization, getunit<span class="token punctuation">;</span>        foreach <span class="token punctuation">(</span>XElement bankmsg <span class="token keyword">in</span> bankroot.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>            businesscode <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"交易码"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            serialnumber <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"流水号"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            money <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"金额"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            payorganization <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"付款机构"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            payunit <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"付款单位账号"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            getorganization <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"收款机构"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            getunit <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"收款单位账号"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"交易码"</span> + businesscode + <span class="token string">"流水号"</span> + serialnumber + <span class="token string">"金额"</span> + money<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"付款机构"</span> + payorganization + <span class="token string">"付款单位账号"</span> + payunit<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"收款机构"</span> + getorganization + <span class="token string">"收款单位账号 "</span> + getunit<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="订单练习"><a href="#订单练习" class="headerlink" title="订单练习"></a>订单练习</h2><h3 id="orders-xml"><a href="#orders-xml" class="headerlink" title="orders.xml"></a>orders.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>order<span class="token operator">></span>  <span class="token operator">&lt;</span>CustomerName<span class="token operator">></span>小肖<span class="token operator">&lt;</span>/CustomerName<span class="token operator">></span>  <span class="token operator">&lt;</span>orderNumber<span class="token operator">></span>BJ200888<span class="token operator">&lt;</span>/orderNumber<span class="token operator">></span>  <span class="token operator">&lt;</span>items<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电脑"</span> Count<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电视"</span> Count<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"水杯"</span> Count<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>  <span class="token operator">&lt;</span>/items<span class="token operator">></span><span class="token operator">&lt;</span>/order<span class="token operator">></span></code></pre><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><pre class=" language-bash"><code class="language-bash">   static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            XDocument doc <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\订单练习\orders.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XElement orderElement <span class="token operator">=</span> doc.Root<span class="token punctuation">;</span>            XElement customerElement<span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"CustomerName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XElement orderNumberElement <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"orderNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XElement orderItems <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderName <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderCount <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>XElement order <span class="token keyword">in</span> orderItems.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                      orderName.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                      orderCount.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Count"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>               Console.WriteLine<span class="token punctuation">(</span>customerElement.Value+<span class="token string">"的订单"</span>+orderNumberElement.Value+<span class="token string">"买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               Console.WriteLine<span class="token punctuation">(</span>orderName<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + orderCount<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>2<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#委托Demo三界面同步</title>
      <link href="/2019/01/08/c-shi-jian-wei-tuo-demo-san-jie-mian-tong-bu/"/>
      <url>/2019/01/08/c-shi-jian-wei-tuo-demo-san-jie-mian-tong-bu/</url>
      
        <content type="html"><![CDATA[<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托（delegate）“一个函数赋值给一个委托变量后，调用这个委托等价于调用那个函数<br>委托就是能存放符合签名方法指针的容器</p><ol><li>委托是一种数据类型，引用类型，像类一样（可以声明委托类型变量）</li><li>使用委托的时候必须new一个委托对象，即使看到的代码没有new委托对象，编译器也会在编译时<br>帮我们new赋值给委托的方法，其实是存储在委托对象中的</li><li>委托（在代码中动态嵌入一个方法）使用的步骤：<br>1&gt;定义一个委托类型<br> public delegate void form2delegate();<br>2&gt;声明一个委托变量<br>  form2delegate wd=new form2delegate(方法名);<br>3&gt;调用委托<br>  if(wd !=null){<br> //调用委托<br>   wd();<br>  或wd.Invoke();<br> }</li><li>什么情况下用委托？委托有什么用？<br>1.有一段代码<br>2.变化（当一个类型中需要嵌入一段代码，但是这段代码具有不确定性，是根据使用这个类型的用户来确定代码的，这种情况下就可以在该类型中，使用一个委托，保证在某种情况下调用这个委托，<br>这时，用户将对应的方法传递给该委托，则就会调用这个方法）</li></ol><p>&emsp;自定义控件中的事件会大量使用到委托（写事件的时候会用到委托）<br>//可以把静态方法或私有方法赋值到委托变量，赋值后能使用到该委托变量的地方<br>就能使用该方法<br>–匿名方法： myDelegate md=delegate(){ console…};<br>调用： md();<br> public delegate void myDelegate();<br>–事件  ：委托可以实现事件所有功能时代<br>事件就是委托封装了add和remove方法，不会让别人捣乱 本质还是委托<br>定义事件之前要定义委托;</p><pre class=" language-bash"><code class="language-bash">public delegate void myTriplechick<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>public event myTriplechick Tirpclick<span class="token punctuation">;</span></code></pre><p>事件只能使用+=或-=赋值，避免使用=赋值时覆盖问题<br>/<br>委托和事件区别：委托是类型，事件是对象，相当于一个委托的变量（可以理解为对委托变量的封装（私有委托）），<br>委托可以在外部调用，可以用=号赋值，事件只能在定义事件的内部来调用，只能用+=或-=赋值,委托可以实现件的所有功能，事件相对于对委托做了一个限制。<br>/<br>事件作用与委托变量一样。<br>–程序集（exe,dll）:类型元数据（代码中每一个类型和成员），程序集元数据（程序集清单），IL代码，资源文件<br>可以通过Assmblyinfo.cs文件来定义</p><pre class=" language-bash"><code class="language-bash">namespace 委托<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        public delegate void DGSay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//声明委托类        public delegate void DGsay2<span class="token punctuation">(</span>string msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DGSay saydelegate <span class="token operator">=</span> new DGSay<span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>//方法放进去            saydelegate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DGsay2 say2delegat <span class="token operator">=</span> new DGsay2<span class="token punctuation">(</span>say2<span class="token punctuation">)</span><span class="token punctuation">;</span>            say2delegat<span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void say<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>           Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void say2<span class="token punctuation">(</span>string msg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三界面同步Demo"><a href="#三界面同步Demo" class="headerlink" title="三界面同步Demo"></a>三界面同步Demo</h2><h3 id="委托当参数"><a href="#委托当参数" class="headerlink" title="委托当参数"></a>委托当参数</h3><pre class=" language-bash"><code class="language-bash">         //定义委托，它定义了可以代表的方法的类型      public delegate void GreetingDelegate<span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">;</span>      class Program <span class="token punctuation">{</span>          private static void EnglishGreeting<span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 Console.WriteLine<span class="token punctuation">(</span>”Morning, ” + name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> Www~          private static void ChineseGreeting<span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 Console.WriteLine<span class="token punctuation">(</span>”早上好, ” + name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>           //注意此方法，它接受一个GreetingDelegate类型的方法作为参数          private static void GreetPeople<span class="token punctuation">(</span>string name, GreetingDelegate MakeGreeting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 MakeGreeting<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 GreetPeople<span class="token punctuation">(</span>”Jimmy Zhang”, EnglishGreeting<span class="token punctuation">)</span><span class="token punctuation">;</span>                 GreetPeople<span class="token punctuation">(</span>”张子阳”, ChineseGreeting<span class="token punctuation">)</span><span class="token punctuation">;</span>                 Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h3><pre class=" language-bash"><code class="language-bash">namespace 最简单的自定义事件<span class="token punctuation">{</span>     /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>     /// 事件发送类     /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>     class Class1     <span class="token punctuation">{</span>         public delegate void UserRequest<span class="token punctuation">(</span>object sender,EventArgs e<span class="token punctuation">)</span><span class="token punctuation">;</span> //定义委托         public event UserRequest OnUserRequest<span class="token punctuation">;</span> //定义一个委托类型的事件         public void run<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             while<span class="token punctuation">(</span>true<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 if<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"a"</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>//事件监听                     OnUserRequest<span class="token punctuation">(</span>this,new EventArgs<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //产生事件                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>     /// 事件接收类     /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>     class Class2     <span class="token punctuation">{</span>         static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             Class1 c1 <span class="token operator">=</span> new Class1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             c1.OnUserRequest +<span class="token operator">=</span> new Class1.UserRequest<span class="token punctuation">(</span>c1_OnUserRequest<span class="token punctuation">)</span><span class="token punctuation">;</span> //委托实例化后绑定到事件             c1.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         private static void c1_OnUserRequest<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>         <span class="token punctuation">{</span>//事件处理方法             Console.WriteLine<span class="token punctuation">(</span><span class="token string">"/t你触发了事件！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>namespace ConsoleApplication2<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            person p <span class="token operator">=</span> new person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p.hello +<span class="token operator">=</span> new person.say<span class="token punctuation">(</span>p_hello<span class="token punctuation">)</span><span class="token punctuation">;</span>            p.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void p_hello<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    class person <span class="token punctuation">{</span>        public delegate void say<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        public event say hello<span class="token punctuation">;</span>        public void run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><h3 id="Form1"><a href="#Form1" class="headerlink" title="Form1"></a>Form1</h3><pre class=" language-bash"><code class="language-bash">   private void btnForm2_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form2 form2 <span class="token operator">=</span> new Form2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form2.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnForm3_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form3 form3 <span class="token operator">=</span> new Form3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form3.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public delegate void ColorDelegate<span class="token punctuation">(</span>string color<span class="token punctuation">)</span><span class="token punctuation">;</span>        public static ColorDelegate ColorChange <span class="token operator">=</span> null<span class="token punctuation">;</span>        private void cbColor_SelectedIndexChanged<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ColorChange <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ColorChange<span class="token punctuation">(</span>this.cbColor.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="Form2"><a href="#Form2" class="headerlink" title="Form2"></a>Form2</h3><pre class=" language-bash"><code class="language-bash">   private void Form2_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form1.ColorChange +<span class="token operator">=</span> delegate<span class="token punctuation">(</span>string color<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                switch <span class="token punctuation">(</span>color<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"red"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Red<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"black"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Black<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"blue"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Blue<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="Form3"><a href="#Form3" class="headerlink" title="Form3"></a>Form3</h3><pre class=" language-bash"><code class="language-bash">  private void Form3_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form1.ColorChange +<span class="token operator">=</span> delegate<span class="token punctuation">(</span>string color<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                switch <span class="token punctuation">(</span>color<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"red"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Red<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"black"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Black<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"blue"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Blue<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流的使用</title>
      <link href="/2019/01/03/io-liu-de-shi-yong/"/>
      <url>/2019/01/03/io-liu-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="IO流的一般使用"><a href="#IO流的一般使用" class="headerlink" title="IO流的一般使用"></a>IO流的一般使用</h2><pre class=" language-bash"><code class="language-bash">string ce<span class="token operator">=</span><span class="token string">"测试"</span><span class="token punctuation">;</span>File.WriteAllText<span class="token punctuation">(</span>@<span class="token string">"12.txt"</span>,ce,Encoding.UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span> //Path类string s1 <span class="token operator">=</span> @<span class="token string">"C:\a"</span><span class="token punctuation">;</span>string s2 <span class="token operator">=</span> <span class="token string">"b.txt"</span><span class="token punctuation">;</span>//combine处理末尾\问题string s3 <span class="token operator">=</span> Path.Combine<span class="token punctuation">(</span>s1, s2<span class="token punctuation">)</span><span class="token punctuation">;</span>Console.WriteLine<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>string g1 <span class="token operator">=</span> @<span class="token string">"c:\windows\test\a.txt"</span><span class="token punctuation">;</span>// 1.获取文件名Console.WriteLine<span class="token punctuation">(</span>Path.GetFileName<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>// 2.获取目录Console.WriteLine<span class="token punctuation">(</span>Path.GetDirectoryName<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//3.获取文件名不包括扩展名Console.WriteLine<span class="token punctuation">(</span>Path.GetFileNameWithoutExtension<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//4.获取扩展名Console.WriteLine<span class="token punctuation">(</span>Path.GetExtension<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//5.获取完整路劲<span class="token punctuation">..</span>/获取父目录Console.WriteLine<span class="token punctuation">(</span>Path.GetFullPath<span class="token punctuation">(</span><span class="token string">"12.txt"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//6.获取当前用户临时目录Console.WriteLine<span class="token punctuation">(</span>Path.GetTempPath<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//7.获取一个随机的文件名（也可以用作文件夹名）Console.WriteLine<span class="token punctuation">(</span>Path.GetRandomFileName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//8.获取一个随机的文件名，并在临时目录下创建这个文件Console.WriteLine<span class="token punctuation">(</span>Path.GetTempFileName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span></code></pre><h2 id="StreamWriter字符串生成js文件"><a href="#StreamWriter字符串生成js文件" class="headerlink" title="StreamWriter字符串生成js文件"></a>StreamWriter字符串生成js文件</h2><pre class=" language-bash"><code class="language-bash"> string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> string path <span class="token operator">=</span> <span class="token string">"D:/newfdc"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string FileName <span class="token operator">=</span><span class="token string">"hello.js"</span><span class="token punctuation">;</span> Encoding code <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> StreamWriter sw <span class="token operator">=</span> new StreamWriter<span class="token punctuation">(</span>Path.Combine<span class="token punctuation">(</span>path, FileName<span class="token punctuation">)</span>, false, code<span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Write<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="file-copy使用"><a href="#file-copy使用" class="headerlink" title="file.copy使用"></a>file.copy使用</h2><pre class=" language-bash"><code class="language-bash"> string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> string path <span class="token operator">=</span> <span class="token string">"D:/newfdc"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string FileName <span class="token operator">=</span><span class="token string">"hello.js"</span><span class="token punctuation">;</span> Encoding code <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> string nowpath <span class="token operator">=</span> Path.Combine<span class="token punctuation">(</span>path, FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>//现有文件 string path2 <span class="token operator">=</span> <span class="token string">"E:/new"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path2<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string name <span class="token operator">=</span> <span class="token string">"copy.js"</span><span class="token punctuation">;</span> File.Copy<span class="token punctuation">(</span>nowpath,Path.Combine<span class="token punctuation">(</span>path2,name<span class="token punctuation">)</span>,true<span class="token punctuation">)</span><span class="token punctuation">;</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"复制成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><pre class=" language-bash"><code class="language-bash">  <span class="token keyword">if</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      path <span class="token operator">=</span> System.Configuration.ConfigurationSettings.AppSettings<span class="token punctuation">[</span><span class="token string">"jsupload"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span>      <span class="token punctuation">{</span>          Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      File.Copy<span class="token punctuation">(</span>localfileName, Path.Combine<span class="token punctuation">(</span>path, ftpfileName<span class="token punctuation">)</span>, true<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h2 id="StreamWriter和reader"><a href="#StreamWriter和reader" class="headerlink" title="StreamWriter和reader"></a>StreamWriter和reader</h2><pre class=" language-bash"><code class="language-bash"> string mobile <span class="token operator">=</span> <span class="token string">"13628611111"</span><span class="token punctuation">;</span> StreamWriter writer <span class="token operator">=</span> new StreamWriter<span class="token punctuation">(</span><span class="token string">"SMS.txt"</span>, true, Encoding.UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Write<span class="token punctuation">(</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Write<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> StreamReader reader <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span><span class="token string">"SMS.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string read<span class="token operator">=</span> reader.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span>int count <span class="token operator">=</span> 0<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>read.IndexOf<span class="token punctuation">(</span>mobile, i<span class="token punctuation">)</span> <span class="token operator">>=</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token operator">=</span>read.IndexOf<span class="token punctuation">(</span>mobile,i<span class="token punctuation">)</span>+1<span class="token punctuation">;</span>  count++<span class="token punctuation">;</span> <span class="token punctuation">}</span>Console.WriteLine<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Serializable序列号案例"><a href="#Serializable序列号案例" class="headerlink" title="Serializable序列号案例"></a>Serializable序列号案例</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>public class ClassToSerialize<span class="token punctuation">{</span>    public int <span class="token function">id</span> <span class="token operator">=</span> 100<span class="token punctuation">;</span>    public string name <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>NonSerialized<span class="token punctuation">]</span>    public string Sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public void SerializeNow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ClassToSerialize c <span class="token operator">=</span> new ClassToSerialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     FileStream fileStream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"c:\\temp.dat"</span>, FileMode.Create<span class="token punctuation">)</span><span class="token punctuation">;</span>     BinaryFormatter b <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     b.Serialize<span class="token punctuation">(</span>fileStream, c<span class="token punctuation">)</span><span class="token punctuation">;</span>     fileStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> public void DeSerializeNow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ClassToSerialize c <span class="token operator">=</span> new ClassToSerialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     c.Sex <span class="token operator">=</span> <span class="token string">"kkkk"</span><span class="token punctuation">;</span>     FileStream fileStream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"c:\\temp.dat"</span>, FileMode.Open, FileAccess.Read, FileShare.Read<span class="token punctuation">)</span><span class="token punctuation">;</span>     BinaryFormatter b <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     c <span class="token operator">=</span> b.Deserialize<span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span> as ClassToSerialize<span class="token punctuation">;</span>       Response.Write<span class="token punctuation">(</span>c.name<span class="token punctuation">)</span><span class="token punctuation">;</span>     Response.Write<span class="token punctuation">(</span>c.Sex<span class="token punctuation">)</span><span class="token punctuation">;</span>     fileStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//////////////////////////////<span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>public class XRentManager<span class="token punctuation">{</span>   public XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       m_DicMyTraffics <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       m_DicRenteds <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//出租集合   <span class="token punctuation">}</span>   ///字典集合：保存可以出租的车   private Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> m_DicMyTraffics<span class="token punctuation">;</span>   internal Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> DicMyTraffics   <span class="token punctuation">{</span>        get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DicMyTraffics<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    /// 获取可以出租的汽车集合    private Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> m_DicRenteds<span class="token punctuation">;</span>   /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>   /// 汽车入库或者出租的车回库   /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>   internal Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> DicRenteds   <span class="token punctuation">{</span>     get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DicRenteds<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#region 反序列化</span> FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"Students.bin"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fs.Length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>     m_RM <span class="token operator">=</span> bf.Deserialize<span class="token punctuation">(</span>fs<span class="token punctuation">)</span> as XRentManager<span class="token punctuation">;</span>//反序列化 <span class="token punctuation">}</span> bf <span class="token operator">=</span> null<span class="token punctuation">;</span> fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //正序列化 XRentManager m_RM <span class="token operator">=</span> new XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#region 序列化</span> FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"Students.bin"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创建序列化 bf.Serialize<span class="token punctuation">(</span>fs, m_RM<span class="token punctuation">)</span><span class="token punctuation">;</span>//保存 bf <span class="token operator">=</span> null<span class="token punctuation">;</span> fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#endregion</span></code></pre><h2 id="Direcotry类（操作目录）"><a href="#Direcotry类（操作目录）" class="headerlink" title="Direcotry类（操作目录）"></a>Direcotry类（操作目录）</h2><pre class=" language-bash"><code class="language-bash">//1.创建一些目录Directory.CreateDirectory<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//2.获取当前目录下的所有的直接子目录<span class="token punctuation">(</span>文件夹<span class="token punctuation">)</span>第二个参数包含<span class="token string">"*I*"</span>，第三个参数，是当前目录还是所有搜索string <span class="token punctuation">[</span><span class="token punctuation">]</span> dirs<span class="token operator">=</span> Directory.GetDirectories<span class="token punctuation">(</span>@<span class="token string">"c:\");foreach(string item in dirs ){    Console.WriteLine(item);}//3.获取当前目录下的所有文件string[] files = Directory.GetFiles(@"</span>c:\<span class="token string">");foreach (string item in files) {   Console.WriteLine(item);}//4.判断是否有这个目录返boolDirectory.Exists(@"</span>C:\test1<span class="token string">");//5.删目录Directory.Delete(@"</span>C:\test1<span class="token string">",true);//6.移动，剪切，移动到同一个地方，改名字，就是重名Directory.Move(@"</span>C:\a.txt<span class="token string">", @"</span>C:\a\a.txt"<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><pre class=" language-bash"><code class="language-bash">    //1.判断文件是否存在？2.删除DeleteFile.Exists<span class="token punctuation">(</span>@<span class="token string">"C:\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //2.读取也有对应的写入File.ReadAllLines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File.ReadAllBytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File.ReadAllText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="文件流-FileStream"><a href="#文件流-FileStream" class="headerlink" title="文件流 FileStream"></a>文件流 FileStream</h2><pre class=" language-bash"><code class="language-bash"> //1.创建一个文件流 FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span>@<span class="token string">"c:\txt.txt"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> //2.读或写,每次读取的内容都有放在缓冲区中 byte<span class="token punctuation">[</span><span class="token punctuation">]</span> byts<span class="token operator">=</span>new byte<span class="token punctuation">[</span>fs.Length<span class="token punctuation">]</span><span class="token punctuation">;</span> //设置、字节 //第一个参数：文件中的字节读取到该数组中，0是从第0个索引开始放，第三个参数数最多读取的字长 fs.Read<span class="token punctuation">(</span>byts, 0, byts.Length<span class="token punctuation">)</span><span class="token punctuation">;</span> //文件流要关闭和释放 fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebClient抓取网页代码</title>
      <link href="/2019/01/03/webclient-zhua-qu-wang-ye-dai-ma/"/>
      <url>/2019/01/03/webclient-zhua-qu-wang-ye-dai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="WebClient类"><a href="#WebClient类" class="headerlink" title="WebClient类"></a>WebClient类<br></h2><p>&emsp;WebClient类位于System.Net命名空间下，WebClient类提供向URI标识的任何本地、Intranet或Internet资源发送数据以及从这些资源接收数据的公共方法。<br>源代码:</p><pre class=" language-bash"><code class="language-bash">///引用命名空间using System.IO<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>PageUrl <span class="token operator">=</span> <span class="token string">"http://www.webkaka.com"</span><span class="token punctuation">;</span> //需要获取源代码的网页WebClient <span class="token function">wc</span> <span class="token operator">=</span> new WebClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 创建WebClient实例提供向URI 标识的资源发送数据和从URI 标识的资源接收数据wc.Credentials <span class="token operator">=</span> CredentialCache.DefaultCredentials<span class="token punctuation">;</span> // 获取或设置用于对向 Internet 资源的请求进行身份验证的网络凭据。///方法一：Encoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> pageData <span class="token operator">=</span> wc.DownloadData<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> // 从资源下载数据并返回字节数组。ContentHtml.Text <span class="token operator">=</span> enc.GetString<span class="token punctuation">(</span>pageData<span class="token punctuation">)</span><span class="token punctuation">;</span> // 输出字符串<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件</code></pre><pre class=" language-bash"><code class="language-bash">/// 方法二：/// ***************代码开始**********Stream resStream <span class="token operator">=</span> wc.OpenRead<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> //以流的形式打开URLEncoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312StreamReader sr <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span>resStream,enc<span class="token punctuation">)</span><span class="token punctuation">;</span> //以指定的编码方式读取数据流ContentHtml.Text <span class="token operator">=</span> sr.ReadToEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //输出<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件 resStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>/// **************代码结束********/// wc.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="WebRequest类"><a href="#WebRequest类" class="headerlink" title="WebRequest类"></a>WebRequest类</h2><p>&emsp;WebRequest类是.NET Framework中“请求/响应”模型的abstract基类，用于访问Internet数据。使用WebRequest类请求/响应模型的应用程序可以用协议不可知的方式从Internet请求数据，在这种方式下，应用程序处理WebRequest类的实例，而协议特定的子类则执行请求的具体细节，请求从应用程序发送到某个特定的URI，如服务器上的网页。URI从一个为应用程序注册的WebRequest子类列表中确定要创建的适当子类。注册WebRequest子类通常是为了处理某个特定的协议（如HTTP或FTP），但是也可以注册它以处理对特定服务器或服务器上的路径的请求。<br><br>&emsp;WebRequest类中最常用的是Create方法，Create方法用于为指定的URI方案初始化新的WebRequest实例。</p><pre class=" language-bash"><code class="language-bash">　　语法：public static WebRequest Create<span class="token punctuation">(</span>　 string requestUriString<span class="token punctuation">)</span></code></pre><p>　　参数：requestUriString：标识Internet资源的URI。<br><br>　　返回值：特定URI方案的WebRequest子类。<br><br>　　注意：Create方法将运行时确定的WebRequest类的子类作为与requestUri最接近的注册匹配项返回。例如，当以http://开头的URI在requestUri中传递时，由Create返回一个HttpWebRequest。如果改为传递以file://开头的URI，则Create方法将返回FileWebRequest实例。.NET Framework包括对http://和file:// URI方案的支持。</p><h2 id="WebResponse类"><a href="#WebResponse类" class="headerlink" title="WebResponse类"></a>WebResponse类</h2><p>&emsp;WebResponse类是abstract基类，协议特定的响应类从该抽象基类派生。应用程序可以使用 WebResponse类的实例以协议不可知的方式参与请求和响应事务，而从WebResponse类派生的协议特定的类携带请求的详细信息。<br>　　在WebResponse类中最常用的是GetResponse方法，GetResponse方法用于当在子类中被重写时，返回对 Internet 请求的响应<br>　　语法：<br>　　public virtual WebResponse GetResponse ()<br>　　返回值：包含对Internet请求的响应的WebResponse。</p><pre class=" language-bash"><code class="language-bash">源代码///引用命名空间using System.IO<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>PageUrl <span class="token operator">=</span> <span class="token string">"http://www.webkaka.com"</span><span class="token punctuation">;</span> //需要获取源代码的网页WebRequest request <span class="token operator">=</span> WebRequest.Create<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> //WebRequest.Create方法，返回WebRequest的子类HttpWebRequestWebResponse response <span class="token operator">=</span> request.GetResponse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //WebRequest.GetResponse方法，返回对 Internet 请求的响应Stream resStream <span class="token operator">=</span> response.GetResponseStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //WebResponse.GetResponseStream 方法，从 Internet 资源返回数据流。 Encoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312StreamReader sr <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span>resStream, enc<span class="token punctuation">)</span><span class="token punctuation">;</span> //命名空间:System.IO。 StreamReader 类实现一个 TextReader <span class="token punctuation">(</span>TextReader类，表示可读取连续字符系列的读取器<span class="token punctuation">)</span>，使其以一种特定的编码从字节流中读取字符。 ContentHtml.Text <span class="token operator">=</span> sr.ReadToEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //输出<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件resStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sr.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http响应码</title>
      <link href="/2019/01/02/http-xiang-ying-ma/"/>
      <url>/2019/01/02/http-xiang-ying-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Http请求"><a href="#1-Http请求" class="headerlink" title="1.Http请求"></a>1.Http请求</h2><p>&emsp;浏览器 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 先看本地电脑是否存在百度服务器的IP，如果存在直接 发送请求报文，如果不存在,则会先请求 DNS服务器，通过映射关系找到 百度 服务器的 IP地址返回给浏览器，浏览器保存IP ，并通过流的方式向 百度服务器 发送 转化为byte[]的请求报文。</p><h2 id="2-TTP协议响应码"><a href="#2-TTP协议响应码" class="headerlink" title="2.TTP协议响应码"></a>2.TTP协议响应码<br></h2><p>&emsp;    “200” : OK <br><br>&emsp;    “302” : Found 重定向<br><br>&emsp;    “400” : Bad Request 错误请求,发出错误的不符合Http协议的请求<br><br>&emsp;    “403” : Forbidden 禁止<br><br>&emsp;    “404” : Not Found 未找到<br><br>&emsp;    “500” : Internal Server Error 服务器内部错误。<br><br>&emsp;    “503” : Service U navailable 一般是访问人数过多<br></p><ul><li>200段是成功；300段需要对请求做进一步处理；400段表示客户端请求错误；500段是服务器错误。</li></ul><h3 id="HTTP-常用ContentType"><a href="#HTTP-常用ContentType" class="headerlink" title="HTTP 常用ContentType"></a>HTTP 常用ContentType<br></h3><pre><code>type/html(默认是这个); image/gif;  image/jpeg; text/plain（普通文本）</code></pre><h3 id="http其他-（是无状态的）"><a href="#http其他-（是无状态的）" class="headerlink" title="http其他 （是无状态的）"></a>http其他 （是无状态的）<br></h3><p>http不会记得”上个请求是什么”，所以哪怕是同一个页面中的JS/CSS/JPG也都需要重复提交。</p><p>网页中如果有图片，CSS,JS等外部文件的话，这些请求都会在一个单独请求中,也就是说并不是页面的所有内容都在一个请求中完成,而是每个资源都是一个单独请求。</p><h2 id="3-服务器端"><a href="#3-服务器端" class="headerlink" title="3.服务器端"></a>3.服务器端</h2><p>&emsp;服务器端 分 内核模式 和用户模式 ， 内核模式为windows底层的一些东西内核模式(Kernel Model)中的 HTTP.SYS(无法看到，他实现了一个插件的机制，自己不处理程序，只负责接收请求，只负责接收请求，让其他exe等程序处理)监听80端口(监听的socket)，识别请求的协议：一般为HTTP，识别请求的端口,把请求发送给具体的应用程序(IIS安装后就在注册表里注册了)。<br>这时候还会再创建一个新的端口 来负责和请求的客户端通信(称为代理Socket或通信Socket)</p><ol><li>w3svc服务(托管)和 inetInfo.exe进程 和起来就是IIS<br>请求通过HTTP.SYS 交给 w3svc服务(svchost.exe),来查看INETINFO.exe<br>访问 IIS进程中的元数据(包含扩展注册信息) 查下请求后缀的文件应如何处理，</li></ol><p>如果是静态网页(.htm,.html等)会先通过内核模块再通过通信端口发送回去。</p><p>&emsp;如果是动态网页（.aspx）会交给扩展 aspnet_isapi.dll(非托管的代码写的,非托管和托管代码的桥梁)处理，然后aspnet_isapi会负责启动ApplicationDomain，请求交给（通过windows系统的句柄，句柄是操作系统的一些标识符） ISApiRuntime，在ISapiRuntime内部，通过ecb指针创建了一个HttpWorkRequest对象（就是简单的对报文的一个封装）然后将HttpWorkRequest对象 交给HttpRunTime PR方法，在PR方法内部又将HttpWorkRequest对象封装成了HttpContext(也就是把请求报文封装成了Request对象和Response对象)再通过HttpApplicationFactory创建一个具体的Application实例<br>然后请求随着 Application管道一次一次的流，在管道里面有19个公开的事件(共23)，请求留到Application的PR方法的时候，帮我们一次性的把19个事件都调用了，二者19个事件又允许我们开发人员自己注册响应方法，可以过滤响应报文(对报文的处理)第8个事件时会根据HttpContext中的RequestURL(请求的地址)会创建最终处理当前请求的Handler实例<br>在11个事件和12个事件之间会调用创建的Handler实例的PR方法</p><p>ISAPIRuntime.PR()通过ECB创建HttpWorkRequest对象，将请求报文放到其中</p><p>Http.Runtime.PR()创建HttpContext对象(包含HttpRequest对象和HttpResponse对象，分析浏览器的请求报文,然后将请求报文的数据存入HttpContext里的Resquest属性中)<br>HttpApplicationFactory 获取一个HttpApplication实例<br>HttpApplication执行管道23个事件,19个事公开给开发人员的(插件机制) ，负责创建和执行页面</p>]]></content>
      
      
      <categories>
          
          <category> Web原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>orcale总结</title>
      <link href="/2019/01/02/orcale-zong-jie/"/>
      <url>/2019/01/02/orcale-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="orcale-导出和导入数据"><a href="#orcale-导出和导入数据" class="headerlink" title="orcale 导出和导入数据"></a>orcale 导出和导入数据</h2><p>有些网友报错，一般都是没有dba权限，授权：</p><pre class=" language-bash"><code class="language-bash">sqlplus / as sysdba进入后直接创建用户并授予dba的权限例如：sqlplus / as sysdbaSQL*Plus: Release 11.1.0.7.0 - Production on 星期二 3月 22 09:10:48 2011Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1982, 2008, Oracle. All rights reserved.连接到:Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing optionsSQL<span class="token operator">></span> create user testmin identified by testmin<span class="token punctuation">;</span>用户已创建。SQL<span class="token operator">></span> grant dba to testmin<span class="token punctuation">;</span>授权成功。SQL<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">数据库导出功能：1 将数据库TEST完全导出,用户名system 密码manager 导出到D:\daochu.dmp中exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp full<span class="token operator">=</span>y2 将数据库中system用户与sys用户的表导出exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp owner<span class="token operator">=</span><span class="token punctuation">(</span>system,sys<span class="token punctuation">)</span>3 将数据库中的表table1 、table2导出exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp tables<span class="token operator">=</span><span class="token punctuation">(</span>table1,table2<span class="token punctuation">)</span>4 将数据库中的表table1中的字段filed1以<span class="token string">"00"</span>打头的数据导出exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp tables<span class="token operator">=</span><span class="token punctuation">(</span>table1<span class="token punctuation">)</span> query<span class="token operator">=</span>\" where filed1 like <span class="token string">'00%'</span>\"</code></pre><p>数据的导入</p><pre class=" language-bash"><code class="language-bash">1 将D:\daochu.dmp 中的数据导入 TEST数据库中。imp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp ignore<span class="token operator">=</span>y上面可能有点问题，因为有的表已经存在，然后它就报错，对该表就不进行导入。在后面加上 ignore<span class="token operator">=</span>y 就可以了。2 将d:\daochu.dmp中的表table1 导入imp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp tables<span class="token operator">=</span><span class="token punctuation">(</span>table1<span class="token punctuation">)</span></code></pre><h2 id="orcale设置权限"><a href="#orcale设置权限" class="headerlink" title="orcale设置权限"></a>orcale设置权限</h2><p>Oracle 创建普通用户，并赋予权限</p><pre class=" language-bash"><code class="language-bash">1.采用sys or system / manager as sysdba<span class="token punctuation">;</span> 连接数据库。2.创建普通用户konglin: create user konglin identified by pwd_oracle<span class="token punctuation">;</span>删除用户, drop user konglin<span class="token punctuation">;</span>3.授予用户登录数据库的权限： grant create session to konglin<span class="token punctuation">;</span>4.授予用户操作表空间的权限：<span class="token operator">&lt;</span>br<span class="token operator">></span>grant unlimited tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant create tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant alter tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant drop tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant manage tablespace to konglin<span class="token punctuation">;</span>5.授予用户操作表的权限：grant create table to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有create index权限, alter table, drop table权限<span class="token punctuation">)</span>6.授予用户操作视图的权限:grant create view to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有alter view, drop view权限<span class="token punctuation">)</span>7.授予用户操作触发器的权限：grant create trigger to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有alter trigger, drop trigger权限<span class="token punctuation">)</span>8.授予用户操作存储过程的权限：grant create procedure to konglin<span class="token punctuation">;</span><span class="token punctuation">(</span>包含有alter procedure, drop procedure 和function 以及 package权限<span class="token punctuation">)</span>9.授予用户操作序列的权限：grant create sequence to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有创建、修改、删除以及选择序列<span class="token punctuation">)</span>10.授予用户回退段权限：grant create rollback segment to konglin<span class="token punctuation">;</span>grant alter rollback segment to konglin<span class="token punctuation">;</span>grant drop rollback segment to konglin<span class="token punctuation">;</span>11.授予用户同义词权限：grant create synonym to konglin<span class="token punctuation">;</span><span class="token punctuation">(</span>包含drop synonym权限<span class="token punctuation">)</span>grant create public synonym to konglin<span class="token punctuation">;</span>grant drop public synonym to konglin<span class="token punctuation">;</span>12.授予用户关于用户的权限：grant create user to konglin<span class="token punctuation">;</span>grant alter user to konglin<span class="token punctuation">;</span>grant become user to konglin<span class="token punctuation">;</span>grant drop user to konglin<span class="token punctuation">;</span>13.授予用户关于角色的权限：grant create role to konglin<span class="token punctuation">;</span>14.授予用户操作概要文件的权限grant create profile to konglin<span class="token punctuation">;</span>grant alter profile to konglin<span class="token punctuation">;</span>grant drop profile to konglin<span class="token punctuation">;</span>15.允许从sys用户所拥有的数据字典表中进行选择grant <span class="token keyword">select</span> any dictionary to konglin<span class="token punctuation">;</span></code></pre><h2 id="sqlplus创建表基本操作"><a href="#sqlplus创建表基本操作" class="headerlink" title="sqlplus创建表基本操作"></a>sqlplus创建表基本操作</h2><pre class=" language-bash"><code class="language-bash">最高用户（系统管理员）可以删别人用户 drop userSQL<span class="token operator">></span> create user xiaoming identified by 123<span class="token punctuation">;</span> 创建用户SQL<span class="token operator">></span> grant connect to xiaoming<span class="token punctuation">;</span>授权SQL<span class="token operator">></span> grant <span class="token keyword">select</span> on emp to xiaoming；授权给小明SQL<span class="token operator">></span>show user 查看当前用户SQL<span class="token operator">></span>conn sysstem/manager 连接用户 账户/密码 连接SQL<span class="token operator">></span>对表user没权限 alter user 数据库用户名 <span class="token function">quota</span> unlimited on USERS<span class="token punctuation">;</span>SQL<span class="token operator">></span>GrantCreate session,create table,select any table,update any table,insert anytable,delete any table To user_namealter user zy20081 <span class="token function">quota</span> unlimited on USERS  空间操作权限 导入表给所有权限disc<span class="token punctuation">[</span>onnect<span class="token punctuation">]</span>断开连接passw<span class="token punctuation">[</span>ord<span class="token punctuation">]</span> 用户名 修改密码sys/system可以修改别人密码<span class="token keyword">exit</span> 退出文件操作命令sql<span class="token operator">></span>START d:\a.sql 运行一个脚本SQL<span class="token operator">></span>edit d:\a.sql 编辑。。。。。。截取中间内容。。。。。。。。。SQL<span class="token operator">></span> spool d:\bb.sql 建立SQL<span class="token operator">></span> <span class="token keyword">select</span> * from 表SQL<span class="token operator">></span> spool off<span class="token punctuation">;</span> 保存 。。。。。。。。。。。。。SQL<span class="token operator">></span> show linesize 设置显示行的宽度 默认是80个字符SQL<span class="token operator">></span>set linesize 90SQL<span class="token operator">></span> <span class="token keyword">set</span> pagesize 2<span class="token punctuation">;</span>设置分页。。。。。。。。。。。。。。。。。。。。。SQL<span class="token operator">></span> create user xiaoming identified by m123 创建账户和密码密码以字母开头 SQL<span class="token operator">></span>drop user xiaoming 删除用户</code></pre><h2 id="日志基本管理"><a href="#日志基本管理" class="headerlink" title="日志基本管理"></a>日志基本管理</h2><pre class=" language-bash"><code class="language-bash">1.强制日志切换（forcing log switches）alter system switch logfile<span class="token punctuation">;</span>2.强制执行检查点（forcing checkpoints）alter system checkpoint<span class="token punctuation">;</span>3.增加一个重做日志组 （adding online redo log groups）alter fatabases add logfile <span class="token punctuation">[</span> group 4 <span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token string">'/disk3/log4a.rdo'</span>,<span class="token string">'/disk4/log4b.rdo'</span><span class="token punctuation">)</span> size 1M<span class="token punctuation">;</span>4.增加一个重做日志文件<span class="token punctuation">(</span> adding online redo log memebers <span class="token punctuation">)</span>alter databases add logfile member<span class="token string">'/disk3/log1b.rdo'</span> to group 1,<span class="token string">'/disk4/log2b.rdo'</span> to group 2<span class="token punctuation">;</span>5.改变重做日志文件名 （changes the name of the online redo logfile）alter databases <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'c:/oracle/oradata/oradb/redo01.log'</span>to <span class="token string">'c:/oracle/oracdata/redo01.log'</span><span class="token punctuation">;</span>6.删除重做日志 （drio online redo log groups）alter database drop logfile groupp 3<span class="token punctuation">;</span>7.删除重做日志组（drop online redo log members）alter database drop logfile member <span class="token string">'c:/oracle/readata/red01.log'</span><span class="token punctuation">;</span>8.清空重做日志（clearing online redo log files）alter database <span class="token function">clear</span> <span class="token punctuation">[</span>unarchived<span class="token punctuation">]</span> logfile <span class="token string">'c:/oracle/log2a.rdo'</span><span class="token punctuation">;</span>9.使用logminer分析重做日志文件（using logminer analyzing redo logfiles）a.  <span class="token keyword">in</span> the init.ora specify utl_file_dir <span class="token operator">=</span> <span class="token string">' '</span>b.  execute dbms_logmnr_d.build<span class="token punctuation">(</span><span class="token string">'oradb.ora'</span>,<span class="token string">'c:\oracle\oradb\log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c.  execute dbms_logmnr_add_logfile<span class="token punctuation">(</span><span class="token string">'c:\oracle\oradata\oradb\redo01.log'</span>,dbms_logmnr.new<span class="token punctuation">)</span><span class="token punctuation">;</span>d.  execute dbms_logmnr.add_logfile<span class="token punctuation">(</span><span class="token string">'c:\oracle\oradata\oradb\redo02.log'</span>,dbms_logmnr.addfile<span class="token punctuation">)</span><span class="token punctuation">;</span>e.  execute dbms_logmnr.start_logmnr<span class="token punctuation">(</span>dictfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'c:\oracle\oradb\log\oradb.ora'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f.  <span class="token keyword">select</span> * from <span class="token function">v</span><span class="token variable">$logmnr_contents</span><span class="token punctuation">(</span>v<span class="token variable">$logmnr_dictionary</span>,v<span class="token variable">$logmnr_parameters</span> <span class="token function">v</span><span class="token variable">$logmnr_logs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g.  execute dbms_logmnr.end_logmnr<span class="token punctuation">;</span></code></pre><h2 id="表空间管理"><a href="#表空间管理" class="headerlink" title="表空间管理"></a>表空间管理</h2><pre class=" language-bash"><code class="language-bash">1.创建表空间（create tablespaces）create tablespace table_name datafile <span class="token string">'c:\oracle\oradata\file1.dbf'</span>size 100Mminimum extent 550k <span class="token punctuation">[</span>logging/nologging<span class="token punctuation">]</span>default storage <span class="token punctuation">(</span>initial 500k next 500k maxextents 500 pctinccease 0<span class="token punctuation">)</span><span class="token punctuation">[</span>online/offline<span class="token punctuation">]</span><span class="token punctuation">[</span>permanent/temporary<span class="token punctuation">]</span><span class="token punctuation">[</span>extent_management_clause<span class="token punctuation">]</span>2.创建本地管理的表空间<span class="token punctuation">(</span> locally managed tabalespace <span class="token punctuation">)</span>create tablespace user_data datafile <span class="token string">'c:\oracle\oradata\user_data001.dbf'</span>size 500Mextent management local uniform size 10M<span class="token punctuation">;</span>3. 创建临时表空间（temporary tablespace）create temporary tablespace temp tempfile <span class="token string">'c:\oracle\oradata\temppp01.dbf'</span>size 500Mextent managementlocal uniform size 10M<span class="token punctuation">;</span>4.改变表空间的存储参数（change the storage setting）alter tablespace app_data minimum extent 2M<span class="token punctuation">;</span>oralter tablespace app_date default storage<span class="token punctuation">(</span> initial 2M next 2M maxextents 999<span class="token punctuation">)</span><span class="token punctuation">;</span>5.使表空间离线或连线（taking tablespace offline or online）alter tablespace app_data offline<span class="token punctuation">;</span>oralter tablespace app_data online<span class="token punctuation">;</span>6.设置表空间为只读、可写模式（read_only tablespace）alter tablespace app_data <span class="token function">read</span> only <span class="token operator">|</span> <span class="token function">write</span><span class="token punctuation">;</span>7.删除表空间（droping tablespace）drop tablespace app_data including contents<span class="token punctuation">;</span>8.允许数据文件自动扩张（enableing automatic extension of data files）alter tablespace app_data add datafile <span class="token string">'c:\oracle\oradata\app_data01.dbf'</span>size 200Mautoextend on next 10Mmaxsize 500M<span class="token punctuation">;</span>9.手动改变数据文件大小（change the size fo data files manually）alter database datafile <span class="token string">'c:\oracle\oradata\app_data.dbf'</span>resize 200M<span class="token punctuation">;</span>10.改变表空间中的数据文件（mocing data files:alter tablespace）alter tablespace app_data <span class="token function">rename</span> datafile <span class="token string">'c:\oracle\oradata\app_data.dbf'</span> to <span class="token string">'c:\oracle\app_data.dbf'</span><span class="token punctuation">;</span>11.修改数据库中的数据文件（moving data files:alter database）alter database <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'c:\oracle\oradata\app_data.dbf'</span>to <span class="token string">'c:\oracle\app_data.dbf'</span><span class="token punctuation">;</span></code></pre><h2 id="表管理"><a href="#表管理" class="headerlink" title="表管理"></a>表管理</h2><pre class=" language-bash"><code class="language-bash">1.创建表create table table_name <span class="token punctuation">(</span>    column datatype,    <span class="token punctuation">[</span>column datatype<span class="token punctuation">]</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span>.  <span class="token punctuation">)</span><span class="token punctuation">;</span>tablespace tablespace_name <span class="token punctuation">[</span> ppctfree integer <span class="token punctuation">]</span> <span class="token punctuation">[</span> pctused integer <span class="token punctuation">]</span><span class="token punctuation">[</span> initrans integer <span class="token punctuation">]</span><span class="token punctuation">[</span> maxtrans integer <span class="token punctuation">]</span>storage<span class="token punctuation">(</span> initial 200k next 200k ppctincrease 0 maxextents 50<span class="token punctuation">)</span> <span class="token punctuation">[</span> logging <span class="token operator">|</span> nologging <span class="token punctuation">]</span>  <span class="token punctuation">[</span> cache <span class="token operator">|</span> nocaahe <span class="token punctuation">]</span>2.复制一个已存在的表（copy an existing table）create table table_name <span class="token punctuation">[</span> logging <span class="token operator">|</span> nologging <span class="token punctuation">]</span> as subquery3.创建一个临时表（create temporary table）create global temporary table xay_temp as <span class="token keyword">select</span> * from xay<span class="token punctuation">;</span>on commint preserve rows/on commit delete rows4.pctfree 和 pctused 参数计算公式pctfree <span class="token operator">=</span> <span class="token punctuation">(</span>average row size - initial row size<span class="token punctuation">)</span>*100/average row sizepctused <span class="token operator">=</span> 100-pctfree-<span class="token punctuation">(</span>average row size * 100/available data space<span class="token punctuation">)</span>    pctfree <span class="token keyword">:</span> 指定表内每个数据块中空间的百分比。pctfree的值必须介于0和99之间。如果为零，表示可以通过插入新行来填充整个块。　　　　　　　　缺省值为10.此值表示每个块中保留着10%的空间，用于更新现有的行以及插入新行，每个块最多可以填充到90%    pctused <span class="token keyword">:</span> 指定为表内每个数据块的已用空间的最小百分比。如果一个块的已用空间低于pctused，则可在该块中插入行。pctused的值介于0和99之间的整数，缺省值为40.结合pctfree 和 pctused 就可以确定将新行插入到现有数据块中，还是插入到新块中。这两个参数值的和必须小于或等于100.使用这两个参数可以更有效地利用表内的空间。设置 pctfree 和pctused    pctfree 值越高，可为数据库块内的更新提供的空间就越大。如果表存在下面两种情况，则应设置一个更高的值：？某些列最初为null，后来更新为某个值？ 　　　　　　某些列由于更新，大小可能增加pctfree的值越高，块密度就越低，即每个块容纳的行数就越少。上面的公式确保块中有足够的空间供行增长使用。    pctused 以确保只有在具备足够空间来容纳一个平均大小的行时才将块返回到空闲列表中。　　　　　　如果空闲列表中的某个块没有足够的空间来插入一行，oracle服务器将查找空闲列表中的下个块、直到找到具备足够空间的块或者到达列表的末尾，这种线性扫描才会结束。　　　　　　使用给定的公式可以增加找到具有所有需空闲空间的块的概率，从而缩短扫描空闲列表时间。注：可以使用 analyze table 命令估算平均行大小的值。注：oracle9i “自动段空间管理” 功能可替代 pctused、freelists 和 freelist       groups.5.改变存储和块利用率参数（change storage and block utilization parameter）alter table table_name pctfree<span class="token operator">=</span>30 pctused<span class="token operator">=</span>50 storage<span class="token punctuation">(</span>next 500k minextents 2 maxextents 100<span class="token punctuation">)</span><span class="token punctuation">;</span>6.手工分配区间（extents）<span class="token punctuation">(</span>manually allxoating extents<span class="token punctuation">)</span>alter table table_name allocate extent <span class="token punctuation">(</span>size 500k datafile <span class="token string">'c:/oracle/data.dbf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>7.改变表的所属表空间（move tablespace）alter table employee move tablespace <span class="token function">users</span><span class="token punctuation">;</span>8.释放表中未用空间（deallocate of unused space）alter table table_name deallocate unused <span class="token punctuation">[</span> keep integer <span class="token punctuation">]</span>9.截断表（truncate）（truncate a table ）truncate table table_name<span class="token punctuation">;</span>截断一个表将删除表中所有行，从而释放已使用的空间。对应的索引将被截断注：truncate table 不是DML语句，是DDL语句。另外truncate与delete的区别是吗，delete不释放空间，truncate释放空间。10.删除表（drop a table）drop table table_name <span class="token punctuation">[</span>cascade constraints<span class="token punctuation">]</span><span class="token punctuation">;</span>11.删除列（drop a cloumn）alter table table_name drop column commentd cascade constraints checkppoint 1000<span class="token punctuation">;</span>oralter table table_name drop columns <span class="token keyword">continue</span><span class="token punctuation">;</span>12.表示某一列为未使用（unused）（mark a column sa unused）alter table table_name <span class="token keyword">set</span> unused column comments xascade constraints<span class="token punctuation">;</span>oralter table table_name dropp unused columns checkpoint 1000<span class="token punctuation">;</span>oralter table orders drop columns <span class="token keyword">continue</span> checkpoint 1000 data_dictionary <span class="token keyword">:</span> dba_unused_col_tabs<span class="token punctuation">;</span>除将列从表中删除以外，还可以先将列标记为 “未使用”，以后再删除。因为没有删除数据，所以此操作不回收磁盘空间，    因而具有速度比较快的优点。被标为 “未使用” 的列可在以后系统活动较少时从表中删除。     未使用的列就像不属于表一样。查询时看不到未使用列中的数据。此外，在执行 DESCRIBE 命令时，    也不会显示这些列的名称和数据类型。用户可以添加与未使用的列同名的新列。     如果想删除同一表中的两列，则可先将列设置为 “未使用” 然后再删除。在删除两列时，    表中的所有行都会更新两次；但如果将这些列设置为 “未使用” 然后再删除，则所有的行仅更新一次。</code></pre><h2 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h2><pre class=" language-bash"><code class="language-bash">1.创建一个基于函数的索引（creating function-based indexes）create index summit.item_quantity on summit.item<span class="token punctuation">(</span>quantity-quantity_shipped<span class="token punctuation">)</span><span class="token punctuation">;</span>基于函数的索引（function-based indexes）:如果在表中要建立索引的一列或多列上使用了函数或表达式，则创建的是基于函数的索引。基于函数的索引预先计算函数或表达式的值，病将结果存储在索引中。可以将基于函数的索引创建为B树或位图索引。2.创建一个B树索引（create a B-tree index）creae <span class="token punctuation">[</span> unique <span class="token punctuation">]</span> index index_name on table_name <span class="token punctuation">(</span>column,<span class="token punctuation">..</span> asc/desc<span class="token punctuation">)</span> tablespace tablespace_name <span class="token punctuation">[</span> pctfree integer <span class="token punctuation">]</span> <span class="token punctuation">[</span> initrans integer <span class="token punctuation">]</span><span class="token punctuation">[</span> maxtrans integer <span class="token punctuation">]</span><span class="token punctuation">[</span> logging <span class="token operator">|</span> nologging <span class="token punctuation">]</span><span class="token punctuation">[</span> nosort <span class="token punctuation">]</span>storage<span class="token punctuation">(</span>initial 200k next 200k pctincrease 0 maxextents 50<span class="token punctuation">)</span><span class="token punctuation">;</span>B树：平衡二叉树，oracle中用的最多的索引模式，使用与取值唯一性高的情况。只有两层，非叶级、叶级（指针所在级）3.索引中pctfree参数计算公式pctfree<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>maximum number of rows-initial number of rows<span class="token punctuation">)</span>*100/maximum number of rows4.创建一个反向键索引（creating reverse key indexes）create unique index xay_id on xay<span class="token punctuation">(</span>a<span class="token punctuation">)</span> reverse pctfree 30 storage <span class="token punctuation">(</span>initial 200k next 200k pctincrease 0 maxextents 50<span class="token punctuation">)</span> tablespace indx<span class="token punctuation">;</span>5.创建位图索引（creating reverse key indexes）create unique index say_id on xay<span class="token punctuation">(</span>a<span class="token punctuation">)</span> reverse pctfree 30 storage <span class="token punctuation">(</span>initial 200k next 200k pctincrease 0 maxextents 50<span class="token punctuation">)</span> tablespace indx<span class="token punctuation">;</span>在下列情况中，位图索引比 B 树索引更有利：     ?        当表包含数百万行且键列的基数很低（即，该列中重复的值很多）时。例如，对于包含护照记录的表的性别列和婚姻状况列而言，位图索引比 B 树索引更适合     ?        当查询经常使用涉及 OR 运算符的多个 WHERE 条件组合时     ?        当键列上存在只读或很少的更新操作时     （位图索引适用于取值的唯一性很低的情况）6.改变索引的存储参数（change storage parameter of index）alter index xay_id storage <span class="token punctuation">(</span> next 400k maxextents 100 <span class="token punctuation">)</span>7.为索引分配空间（allocating index space）alter index xay_id allocate extent <span class="token punctuation">(</span>size 200k datafile <span class="token string">'c:/oracle/index.dbf'</span><span class="token punctuation">)</span>8. alter index xay_id deallocate unused<span class="token punctuation">;</span>手动分配索引空间：     在表上进行频繁的插入操作前，可能需要向索引添加区。添加区可防止索引动态扩展并导致性能降低。     （其中指定的数据文件一定是索引所在表空间的数据文件）</code></pre><h2 id="约束管理"><a href="#约束管理" class="headerlink" title="约束管理"></a>约束管理</h2><pre class=" language-bash"><code class="language-bash">1.将约束定义为立即（immediate）或延迟（deferred）（define constraints as immediate or deferred）alter session <span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>immediate/deferred/default<span class="token punctuation">;</span><span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span> constraint_name/all immediate/deferred<span class="token punctuation">;</span><span class="token keyword">set</span> constraints 语句用于将特定事务的约束设置为 deferred 或 immediate.可以使用此语句设置约束名称列表或约束的模式。<span class="token keyword">set</span> constraints模式将一直持续到事务处理完成或者另一个set constraints语句重置模式<span class="token keyword">set</span> constraints语句还包含将约束设置为immediate或deferred的子句set constraints.此命令缺省为设置所有（all） 可延迟的约束（不能指定约束名称列表）。alter session <span class="token keyword">set</span> constraints 语句仅适用于当前会话2.删除表或表空间时连带删除其上的外检（约束）drop table table_name cascade constraintsordrop tablespace tablespace_name including contents cascade constraints在删除父表之前，必须先删除外键。可以使用以下一条语句同事执行这两个操作：drop table table_name cascade constraints在未删除或禁用外键之前无法（truncated）父表。在删除包含附表的表空间之前，必须先删除外键。可使用下列命令完成该操作：drop tablespace tablespace_name including contentscascade constraints如果从父表中删除行时没有使用 delete cascade 选项，oracle 服务器必须确保子表中的行不包含相应的外键。同样，仅当子行中不包含旧键值时，才允许更新父键。如果字表的外键上没有索引，则oracle服务器索引子表并禁止更改以确保引用完整性。如果表上有索引，则通过锁定索引项并避免子表上有更具限制性的锁来维护引用完整性。如果必须从不同的事务处理同时更新两个表，则在外键列上创建索引。3.在创建表时定义约束（define constraints <span class="token keyword">while</span> create a table ）create table  xay<span class="token punctuation">(</span>id number<span class="token punctuation">(</span>7<span class="token punctuation">)</span> constraint xay_id pprimary key deferrable using index storage<span class="token punctuation">(</span>initial 100k next 100k <span class="token punctuation">)</span> tablespace indx<span class="token punctuation">)</span><span class="token punctuation">;</span>primary key /unique /references table<span class="token punctuation">(</span>column<span class="token punctuation">)</span> ／check4.启用当前禁用的约束（enable constraints）alter table xay <span class="token function">enable</span> novalidate constraint xay_id<span class="token punctuation">;</span>启用novalidate:对于当前已有索引的 primary key 和 unique 约束，启用novalidate 约束比启用validate约束要快的多，这是应为，如果使用该选项启用约束，则不要求锁定表。这种方法适合表上有许多DML活动的情况，如在oltp环境中。    但是，如果需要创建索引，使用这中启用约束的方法并不能比enable validate带来更多的好处，因为oracle服务器在建立索引时锁定表。5.启用约束（enable constraints）alter table xay <span class="token function">enable</span> validate constraint xay_id<span class="token punctuation">;</span></code></pre><h2 id="约束管理-1"><a href="#约束管理-1" class="headerlink" title="约束管理"></a>约束管理</h2><pre class=" language-bash"><code class="language-bash">1.将约束定义为立即（immediate）或延迟（deferred）（define constraints as immediate or deferred）alter session <span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>immediate/deferred/default<span class="token punctuation">;</span><span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span> constraint_name/all immediate/deferred<span class="token punctuation">;</span><span class="token keyword">set</span> constraints 语句用于将特定事务的约束设置为 deferred 或 immediate.可以使用此语句设置约束名称列表或约束的模式。<span class="token keyword">set</span> constraints模式将一直持续到事务处理完成或者另一个set constraints语句重置模式<span class="token keyword">set</span> constraints语句还包含将约束设置为immediate或deferred的子句set constraints.此命令缺省为设置所有（all） 可延迟的约束（不能指定约束名称列表）。alter session <span class="token keyword">set</span> constraints 语句仅适用于当前会话2.删除表或表空间时连带删除其上的外检（约束）drop table table_name cascade constraintsordrop tablespace tablespace_name including contents cascade constraints在删除父表之前，必须先删除外键。可以使用以下一条语句同事执行这两个操作：drop table table_name cascade constraints在未删除或禁用外键之前无法（truncated）父表。在删除包含附表的表空间之前，必须先删除外键。可使用下列命令完成该操作：drop tablespace tablespace_name including contentscascade constraints如果从父表中删除行时没有使用 delete cascade 选项，oracle 服务器必须确保子表中的行不包含相应的外键。同样，仅当子行中不包含旧键值时，才允许更新父键。如果字表的外键上没有索引，则oracle服务器索引子表并禁止更改以确保引用完整性。如果表上有索引，则通过锁定索引项并避免子表上有更具限制性的锁来维护引用完整性。如果必须从不同的事务处理同时更新两个表，则在外键列上创建索引。3.在创建表时定义约束（define constraints <span class="token keyword">while</span> create a table ）create table  xay<span class="token punctuation">(</span>id number<span class="token punctuation">(</span>7<span class="token punctuation">)</span> constraint xay_id pprimary key deferrable using index storage<span class="token punctuation">(</span>initial 100k next 100k <span class="token punctuation">)</span> tablespace indx<span class="token punctuation">)</span><span class="token punctuation">;</span>primary key /unique /references table<span class="token punctuation">(</span>column<span class="token punctuation">)</span> ／check4.启用当前禁用的约束（enable constraints）alter table xay <span class="token function">enable</span> novalidate constraint xay_id<span class="token punctuation">;</span>启用novalidate:对于当前已有索引的 primary key 和 unique 约束，启用novalidate 约束比启用validate约束要快的多，这是应为，如果使用该选项启用约束，则不要求锁定表。这种方法适合表上有许多DML活动的情况，如在oltp环境中。    但是，如果需要创建索引，使用这中启用约束的方法并不能比enable validate带来更多的好处，因为oracle服务器在建立索引时锁定表。5.启用约束（enable constraints）alter table xay <span class="token function">enable</span> validate constraint xay_id<span class="token punctuation">;</span></code></pre><h2 id="加载（load）数据"><a href="#加载（load）数据" class="headerlink" title="加载（load）数据"></a>加载（load）数据</h2><pre class=" language-bash"><code class="language-bash">1.使用insert语句从另一张表中“直接加载”数据到新表（loading data using direct_load insert）insert //*+append*/into emp nologging<span class="token keyword">select</span> * from emp_old<span class="token punctuation">;</span>2.使用sql*loader加载数据（using sql*loader）sqlldr scott/tiger \control <span class="token operator">=</span> ulcase6.ctl \log <span class="token operator">=</span> ulcase6.log direct <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><h2 id="重整数据"><a href="#重整数据" class="headerlink" title="重整数据"></a>重整数据</h2><pre class=" language-bash"><code class="language-bash">1.使用export导出数据（using export）<span class="token variable">$exp</span> scott/tiger tables<span class="token punctuation">(</span>dept,emp<span class="token punctuation">)</span> file<span class="token operator">=</span>c:\emp.dmp log<span class="token operator">=</span>exp.log compress<span class="token operator">=</span>n direct<span class="token operator">=</span>y2.使用import导入数据（using impport）alter tablespace sales_ts <span class="token function">read</span> only<span class="token punctuation">;</span><span class="token variable">$expp</span> sys/<span class="token punctuation">..</span>  file<span class="token operator">=</span>xay.dmp transpport_tablespace<span class="token operator">=</span>y tablespace<span class="token operator">=</span>sales_ts triggers<span class="token operator">=</span>n constraints<span class="token operator">=</span>n<span class="token variable">$copy</span> datafile<span class="token variable">$imp</span> sys/<span class="token punctuation">..</span> file<span class="token operator">=</span>xay.dmp transpport_tablespppace<span class="token operator">=</span>y datafiles<span class="token operator">=</span><span class="token punctuation">(</span>/disk/sles01.dbf,/disk2/sles02.dbf<span class="token punctuation">)</span>alter tablespace sales_ts <span class="token function">read</span> <span class="token function">write</span><span class="token punctuation">;</span>4.checking transport <span class="token keyword">set</span>DNMS_tts.transport_set_check<span class="token punctuation">(</span>ts_list <span class="token operator">=</span><span class="token operator">></span><span class="token string">'sales_ts'</span> <span class="token punctuation">..</span>,incl_constraints<span class="token operator">=</span><span class="token operator">></span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>在表transport_set_violations中查看dbms_tts.isselfcontained 为true 是，表示自包含</code></pre><h2 id="管理口令及相关资源"><a href="#管理口令及相关资源" class="headerlink" title="管理口令及相关资源"></a>管理口令及相关资源</h2><pre class=" language-bash"><code class="language-bash">1.修改用户账号、解锁及口令（controlling account lock and password）alter user jumcky identified by oracle account unlock<span class="token punctuation">;</span>2.user_privided password <span class="token keyword">function</span>function_name<span class="token punctuation">(</span>userid <span class="token keyword">in</span> varchar2<span class="token punctuation">(</span>30<span class="token punctuation">)</span>,password <span class="token keyword">in</span> varchar2<span class="token punctuation">(</span>30<span class="token punctuation">)</span>,old_password <span class="token keyword">in</span> varchar2<span class="token punctuation">(</span>30<span class="token punctuation">))</span> <span class="token keyword">return</span> boolean3.创建概要文件：设置口令参数（create a profile <span class="token keyword">:</span> password setting）create profile grace_5 limit failed_login_attempts 3password_lock_time unlimited password_life_time 30password_reuse_time 30 password_verify_function verify_functionpassword_grace_time 5<span class="token punctuation">;</span>4.修改概要文件（altering a profile）alter profile default limitfailed_lofin_attemppts 3password_life_time 60<span class="token punctuation">;</span>5.删除概要文件（drop a profile）drop profile grace_5 <span class="token punctuation">[</span>cascade<span class="token punctuation">]</span><span class="token punctuation">;</span>6.创建概要文件：设置资源限制（create a profile <span class="token keyword">:</span> resource limit）create profile developer_prof limit sessions_per_user 2cpu_per_session 10000 idle_time 60 connect_time 480<span class="token punctuation">;</span>7.view <span class="token operator">=</span><span class="token operator">></span>resource_cost <span class="token keyword">:</span> alter resource cost dba_users,dba_profiles8.允许资源限制（enable resource limits）alter system <span class="token keyword">set</span> resource_limit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><pre class=" language-bash"><code class="language-bash">1.创建用户（数据库认真方式）（create a user <span class="token keyword">:</span> database authentication）create user juncky identified by oracle default tablespace <span class="token function">users</span> temporary tablespace temp <span class="token function">quota</span> 10m/unlimited on data password  expire <span class="token punctuation">[</span> account  lock <span class="token operator">|</span> unock <span class="token punctuation">]</span> <span class="token punctuation">[</span> profile profilename <span class="token operator">|</span> default <span class="token punctuation">]</span><span class="token punctuation">;</span>2.修改用户的表空间限额（change user <span class="token function">quota</span> on tablespace）alter user juncky <span class="token function">quota</span> 0 on <span class="token function">users</span><span class="token punctuation">;</span>3.删除用户（drop  a user ）drop user juncky <span class="token punctuation">[</span> cascade <span class="token punctuation">]</span><span class="token punctuation">;</span>4.监控用户的视图（monitor user）view：dba_users, dba_ts_quotas</code></pre><h2 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h2><pre class=" language-bash"><code class="language-bash">1.系统权限（managing privileges）view <span class="token operator">=</span><span class="token operator">></span>system_privilege_map ,dba_sys_privs,session_privs2.授权系统权限（grant system privilege）grant create session,create table to managers<span class="token punctuation">;</span>orgrant create sessionto scott with admin option<span class="token punctuation">;</span>with admin option can gran grant or revoke privilege from any user or role<span class="token punctuation">;</span>3.sysdba和sysoper的权限（sysdba and sysoper privileges:）sysoper:startup,shtdown,alter database <span class="token function">open</span> <span class="token operator">|</span> mount,alter database backup controlfile,alter tablespacesysdba:sysoper privileges with admin option,create database,recover database <span class="token keyword">until</span>4.口令文件成员视图（password <span class="token function">file</span> members:）view:<span class="token operator">=</span>v<span class="token variable">$pwfile_users</span>5.07_dictionary_accessibility <span class="token operator">=</span> <span class="token boolean">true</span>restriction access to view or tables <span class="token keyword">in</span> other schema6.撤销系统权限（revoke system privilege）revoke create table from karen<span class="token punctuation">;</span>orrevoke create session from scott<span class="token punctuation">;</span>7.授权对象权限（grant object privilege）grant execute on dbms_pipe to public<span class="token punctuation">;</span>grant update<span class="token punctuation">(</span>first_name,salary<span class="token punctuation">)</span> on employee to karen with grant option<span class="token punctuation">;</span>8.显示对象权限的视图（display object privilege）view <span class="token operator">=</span><span class="token operator">></span>dba_tab_privs,dba_col_privs9.撤销用户的对象权限（revoke object privilege）revoke execute on dbms_pipe from scott <span class="token punctuation">[</span> cascade constraints <span class="token punctuation">]</span><span class="token punctuation">;</span>10.审计记录视图（audit record view）sys.aud$11.保护审计线索（protecting the audit trail）audit delete on sys.aud$ by access<span class="token punctuation">;</span>保护审计线索：应保护审计线索，以防添加，修改或删除审计信息。发布以下，命令：audit delete on sys.aud$ by access<span class="token punctuation">;</span>可防止审计线索未经授权即被删除<span class="token punctuation">;</span>只有DBA才拥有delete_catalog_role角色12.语句审计（statement auditing）audit user<span class="token punctuation">;</span>13.权限审计（privilege auditing）audit <span class="token keyword">select</span> any table by summit by access<span class="token punctuation">;</span>权限审计：该种审计执行操作应具有的相应系统权限进行选择性审计，如audit create any trigger. 可以设置权限审计对数据库中的所选用户或每个用户进行审计。14.方案对象审计（schema object auditing）sudit lock on summit.employee by access whenever successful<span class="token punctuation">;</span>方案对象审计：该种审计对待特定方案对象上的特定语句进行选择性审计，如 audit <span class="token keyword">select</span> on  hr.employees.方案对象审计始终适用于所有数据库用户。15.审计选项视图（view audit option）view <span class="token operator">=</span><span class="token operator">></span>all_def_audit_opts,dba_stmt_audit_opts,dba_priv_audit_opts,dba_obj_audit_opts16.设计结果视图（view audit result）view<span class="token operator">=</span><span class="token operator">></span>dba_audit_trail,dba_audit_exists,dba_audit_object,dba_audit_session,dba_audit_statement</code></pre><h2 id="管理角色"><a href="#管理角色" class="headerlink" title="管理角色"></a>管理角色</h2><pre class=" language-bash"><code class="language-bash">1.创建角色（create roles）create role sales_clerk<span class="token punctuation">;</span>orcreate role hr_clerk identified by bonus<span class="token punctuation">;</span>orcreate role hr_manager identified externally<span class="token punctuation">;</span>2.修改角色（modify role）alter role sales_clerk identified by commission<span class="token punctuation">;</span>oralter role hr_clerk identified externally<span class="token punctuation">;</span>oralter role hr_manager not identified<span class="token punctuation">;</span>3.分配角色（assigning roles）grant sales_clerk to scott<span class="token punctuation">;</span>oegrant hr_clerk to hr_manager<span class="token punctuation">;</span>orgrant hr_manager to scott with admin option<span class="token punctuation">;</span>4.建立缺省角色（establish default role）alter user scott default role hr_clerk,sales_clerk<span class="token punctuation">;</span>oralter user scott default role all<span class="token punctuation">;</span>oralter user scott default fole all except hr_clerk<span class="token punctuation">;</span>oralter user scott default role none<span class="token punctuation">;</span>5.允许和禁止角色（enable and disable roles）<span class="token keyword">set</span> role hr_clerk<span class="token punctuation">;</span>or<span class="token keyword">set</span> role sales_clerk identified by commission<span class="token punctuation">;</span>or<span class="token keyword">set</span> role all except sales_clerk<span class="token punctuation">;</span>or<span class="token keyword">set</span> role none<span class="token punctuation">;</span>6.撤销用户的角色（remove role from user）revoke sales_clerk from scott<span class="token punctuation">;</span>orrevoke hr_manager from public <span class="token punctuation">;</span>7.删除角色（remove role）drop role hr_manager<span class="token punctuation">;</span>8.显示角色信息的视图（display role information）view:<span class="token operator">=</span><span class="token operator">></span>dba_roles.dba_role_privs,role_role_privs,dba_sys_privs,role_sys_privs,role_tab_privs,session_roles</code></pre><h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><pre class=" language-bash"><code class="language-bash">1.备份恢复用相关视图<span class="token function">v</span><span class="token variable">$sga</span>,v<span class="token variable">$instance</span>,v<span class="token variable">$process</span>,v<span class="token variable">$bgprocess</span>,v<span class="token variable">$database</span>,v<span class="token variable">$datafile</span>,v<span class="token variable">$sgastat</span>2.为rman设置初始化参数rman need <span class="token keyword">set</span> dbwr_io_slaves or backup_tape_io_slaves and large_pool_size3.监控并行回滚的视图（monitoring parallel rollback）<span class="token function">v</span><span class="token variable">$fast_start_servers</span>,v<span class="token variable">$fast_start_transactions</span>4.执行一个冷备份（perform a closed database baskup <span class="token punctuation">(</span> noarchivelog <span class="token punctuation">)</span>）<span class="token function">shutdown</span> immediate<span class="token function">cp</span> files /backup/startup5.改变数据库文件的位置（restore to a different location）connect system/manager as sysdbastartupp <span class="token function">mount</span>alter database <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'/disk1/../user.dbf'</span> to <span class="token string">'/disk/../user.dbf'</span><span class="token punctuation">;</span>6.恢复命令（recover）语法（recover syntax）--recover a mounted databaserecover database<span class="token punctuation">;</span>recover datafile <span class="token string">'/disk1/data/df2.dbf'</span><span class="token punctuation">;</span>alter database recover database<span class="token punctuation">;</span>--recover an opened databaserecover tablespace user_data<span class="token punctuation">;</span>recover datafile 2<span class="token punctuation">;</span>alter database recover datafile 2<span class="token punctuation">;</span>7.设置自动应用重做日志文件（how to apply redo log files automatically）<span class="token keyword">set</span> autorecovery onrecover automatic datafile 4<span class="token punctuation">;</span>8.完全恢复（complete recovery）--method 1 <span class="token punctuation">(</span> mounted databe <span class="token punctuation">)</span>copy c:\backup\user.dbf  c:\oradata\user.dbfstartup <span class="token function">mount</span>recover datafile <span class="token string">'c:\oradata\user.dbf'</span><span class="token punctuation">;</span>alter database oppen<span class="token punctuation">;</span>--mothod 2 <span class="token punctuation">(</span> opened database,initially opened, not system or rollback datafile<span class="token punctuation">)</span>copy c:\backup\user.dbf  c:\oradata\user.dbf <span class="token punctuation">(</span> alter tablespace offline<span class="token punctuation">)</span>recover datafile <span class="token string">'c:\oradata\user.dbf'</span> orrecover tablespace user_data<span class="token punctuation">;</span>alter database datafile <span class="token string">'c:\oradata\user.dbf'</span> online or alter tablespace user_data online<span class="token punctuation">;</span>--method 3 <span class="token punctuation">(</span> opened database,initially closed not system or rollback datafile <span class="token punctuation">)</span>startup <span class="token function">mount</span>alter database datafile <span class="token string">'c:\oradata\user.dbf'</span> offline<span class="token punctuation">;</span>alter database <span class="token function">open</span>copy c:\backup\user.dbf  d:\oradata\user.dbfalter database <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'c:\oradata\user.dbf'</span> to <span class="token string">'d:\oradata\user.dbf'</span>recover datafile <span class="token string">'e:\oradata\user.dbf'</span> or recover tablespace user_data<span class="token punctuation">;</span>alter tablespace user_data online<span class="token punctuation">;</span>--method 4 <span class="token punctuation">(</span> loss of data <span class="token function">file</span> with no backup and have all archive log <span class="token punctuation">)</span>alter tablespace user_data offline immediate<span class="token punctuation">;</span>alter database create datafile <span class="token string">'d:\oradata\user.dbf'</span> as  <span class="token string">'c:\oradata\user.dbf'</span>recover tablespace user_data<span class="token punctuation">;</span>alter tablespace user_data online9.对一个打开的数据库进行备份（perform an <span class="token function">open</span> database backup）alter tablespace user_data begin backup<span class="token punctuation">;</span>copy files /backup/alter database datafile <span class="token string">'/c:/../data.dbf'</span> end backup<span class="token punctuation">;</span>alter system switch logfile<span class="token punctuation">;</span>10.备份一个控制文件（backup a control file）alter database backup controlfile to <span class="token string">'controll.bkp'</span><span class="token punctuation">;</span>alter database backup xontrolfile to trace<span class="token punctuation">;</span>11.非归档模式下的恢复（recovery （noarchivelog mode））<span class="token function">shutdown</span> abort<span class="token function">cp</span> filesstartup12.备份模式下的文件恢复（recovery of <span class="token function">file</span> <span class="token keyword">in</span> backup mode）alter database datafile 2 end backup<span class="token punctuation">;</span>13.清空重做日志文件（rclearing redo log file）alter database <span class="token function">clear</span> unarchived logfile group 1<span class="token punctuation">;</span>alter database <span class="token function">clear</span> unarchived logfile group 1 unrecoverable datafile<span class="token punctuation">;</span>14.重做日志的恢复（删除与重建）（redo log recovery）alter database add logfile group 3 <span class="token string">'c:\oradata\redo03.log'</span> size 1000k<span class="token punctuation">;</span>alter database drop logfile group 1<span class="token punctuation">;</span>alter database <span class="token function">open</span><span class="token punctuation">;</span>or <span class="token operator">></span>cpp c:\oradata\redo02.log ,c:\oradata\redo01.logalter database <span class="token function">clear</span> logfile ‘c:\oradata\log01.log’<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> orcale </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asp.Net页面生命周期</title>
      <link href="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/"/>
      <url>/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Asp-Net页面生命周期"><a href="#Asp-Net页面生命周期" class="headerlink" title="Asp.Net页面生命周期"></a>Asp.Net页面生命周期</h1><h2 id="1-什么是Asp-Net页面生命周期"><a href="#1-什么是Asp-Net页面生命周期" class="headerlink" title="1.什么是Asp.Net页面生命周期"></a>1.什么是Asp.Net页面生命周期</h2><p>&emsp; 当我们在浏览器地址栏中输入网址，回车查看页面时，这时会向服务器端（IIS）发送一个request请求，服务器就会判断发送过来的请求页面，  完全识别 HTTP 页面处理程序类后，ASP.NET 运行时将调用处理程序的 ProcessRequest 方法来处理请求，来创建页面对象。通常情况下，无需更改此方法的实现，因为它是由 Page 类提供的。接下来被创建页面对象的ProcessRequest方法使页面经历了各个阶段：初始化、加载视图状态信息和回发数据、加载页面的用户代码以及执行回发服务器端事件。之后，页面进入显示模式：收集更新的视图状态，生成 HTML 代码并随后将代码发送到输出控制台。最后，卸载页面，并认为请求处理完毕。其中页面对象ProcessRequest方法 完成的这一系列事件的处理过程就是Asp.Net页面生命周期。</p><h2 id="2-了解Asp-Net页面生命周期的好处"><a href="#2-了解Asp-Net页面生命周期的好处" class="headerlink" title="2.了解Asp.Net页面生命周期的好处"></a>2.了解Asp.Net页面生命周期的好处</h2><p>&emsp;  了解个掌握ASP.NET页面生命周期是非常必要的，这有助于我们更加灵活的控制页面，以我们需要的方式编程开发。ASP.NET页运行时，此页会经历一个又一个的事件链，每个事件链中执行不同的行为，这所有的行为共同组成我们所需要的页面。了解了生命周期也更有助于我们对程序调试中发生问题的地方的定位。</p><h2 id="3-Asp-Net页面生命周期简化版流程"><a href="#3-Asp-Net页面生命周期简化版流程" class="headerlink" title="3.Asp.Net页面生命周期简化版流程"></a>3.Asp.Net页面生命周期简化版流程</h2><p>页面初始化          Page_Init<br>加载View State      LoadViewState<br>回发数据处理      LoadPostData<br>页面加载          Page_Load<br>回发通知          RaisePostDataChangedEvent<br>回发事件处理     RaisePostBackEvent<br>页面预渲染       Page_PreRender<br>保存             viewstate SaveViewState<br>Page渲染         Page_Render<br>Page 卸载       Page_UnLoad<br>&emsp;要是详细写太多了也不好理解，简化版看图：<br><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/4.jpg" alt=""></p><h2 id="4-什么地方用到了Asp-Net-页面生命周期"><a href="#4-什么地方用到了Asp-Net-页面生命周期" class="headerlink" title="4.什么地方用到了Asp.Net 页面生命周期"></a>4.什么地方用到了Asp.Net 页面生命周期</h2><p>1  第一张图片从全局说明从客户端发出一个Request请求，服务器windows内核中的HTTP.SYS组件接收该请求开始到IIS处理完该请求并响应到客户端结束。<br><br>2  第二张图片为图1中Http处理管线的详细步骤<br><br>3  第三张图片为图2Http处理管线中调用处理程序(HttpHandler,  此处为Page对象)的详细生命周期过程。</p><p><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/1.jpg" alt="图1"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/2.png" alt="图2"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/3.png" alt="图3"></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET原理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
