<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IO流的使用</title>
      <link href="/2019/01/03/io-liu-de-shi-yong/"/>
      <url>/2019/01/03/io-liu-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="IO流的一般使用"><a href="#IO流的一般使用" class="headerlink" title="IO流的一般使用"></a>IO流的一般使用</h2><pre class=" language-bash"><code class="language-bash">string ce<span class="token operator">=</span><span class="token string">"测试"</span><span class="token punctuation">;</span>File.WriteAllText<span class="token punctuation">(</span>@<span class="token string">"12.txt"</span>,ce,Encoding.UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span> //Path类string s1 <span class="token operator">=</span> @<span class="token string">"C:\a"</span><span class="token punctuation">;</span>string s2 <span class="token operator">=</span> <span class="token string">"b.txt"</span><span class="token punctuation">;</span>//combine处理末尾\问题string s3 <span class="token operator">=</span> Path.Combine<span class="token punctuation">(</span>s1, s2<span class="token punctuation">)</span><span class="token punctuation">;</span>Console.WriteLine<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>string g1 <span class="token operator">=</span> @<span class="token string">"c:\windows\test\a.txt"</span><span class="token punctuation">;</span>// 1.获取文件名Console.WriteLine<span class="token punctuation">(</span>Path.GetFileName<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>// 2.获取目录Console.WriteLine<span class="token punctuation">(</span>Path.GetDirectoryName<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//3.获取文件名不包括扩展名Console.WriteLine<span class="token punctuation">(</span>Path.GetFileNameWithoutExtension<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//4.获取扩展名Console.WriteLine<span class="token punctuation">(</span>Path.GetExtension<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//5.获取完整路劲<span class="token punctuation">..</span>/获取父目录Console.WriteLine<span class="token punctuation">(</span>Path.GetFullPath<span class="token punctuation">(</span><span class="token string">"12.txt"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//6.获取当前用户临时目录Console.WriteLine<span class="token punctuation">(</span>Path.GetTempPath<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//7.获取一个随机的文件名（也可以用作文件夹名）Console.WriteLine<span class="token punctuation">(</span>Path.GetRandomFileName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//8.获取一个随机的文件名，并在临时目录下创建这个文件Console.WriteLine<span class="token punctuation">(</span>Path.GetTempFileName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span></code></pre><h2 id="StreamWriter字符串生成js文件"><a href="#StreamWriter字符串生成js文件" class="headerlink" title="StreamWriter字符串生成js文件"></a>StreamWriter字符串生成js文件</h2><pre class=" language-bash"><code class="language-bash"> string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> string path <span class="token operator">=</span> <span class="token string">"D:/newfdc"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string FileName <span class="token operator">=</span><span class="token string">"hello.js"</span><span class="token punctuation">;</span> Encoding code <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> StreamWriter sw <span class="token operator">=</span> new StreamWriter<span class="token punctuation">(</span>Path.Combine<span class="token punctuation">(</span>path, FileName<span class="token punctuation">)</span>, false, code<span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Write<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="file-copy使用"><a href="#file-copy使用" class="headerlink" title="file.copy使用"></a>file.copy使用</h2><pre class=" language-bash"><code class="language-bash"> string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> string path <span class="token operator">=</span> <span class="token string">"D:/newfdc"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string FileName <span class="token operator">=</span><span class="token string">"hello.js"</span><span class="token punctuation">;</span> Encoding code <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> string nowpath <span class="token operator">=</span> Path.Combine<span class="token punctuation">(</span>path, FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>//现有文件 string path2 <span class="token operator">=</span> <span class="token string">"E:/new"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path2<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string name <span class="token operator">=</span> <span class="token string">"copy.js"</span><span class="token punctuation">;</span> File.Copy<span class="token punctuation">(</span>nowpath,Path.Combine<span class="token punctuation">(</span>path2,name<span class="token punctuation">)</span>,true<span class="token punctuation">)</span><span class="token punctuation">;</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"复制成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><pre class=" language-bash"><code class="language-bash">  <span class="token keyword">if</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      path <span class="token operator">=</span> System.Configuration.ConfigurationSettings.AppSettings<span class="token punctuation">[</span><span class="token string">"jsupload"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span>      <span class="token punctuation">{</span>          Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      File.Copy<span class="token punctuation">(</span>localfileName, Path.Combine<span class="token punctuation">(</span>path, ftpfileName<span class="token punctuation">)</span>, true<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h2 id="StreamWriter和reader"><a href="#StreamWriter和reader" class="headerlink" title="StreamWriter和reader"></a>StreamWriter和reader</h2><pre class=" language-bash"><code class="language-bash"> string mobile <span class="token operator">=</span> <span class="token string">"13628611111"</span><span class="token punctuation">;</span> StreamWriter writer <span class="token operator">=</span> new StreamWriter<span class="token punctuation">(</span><span class="token string">"SMS.txt"</span>, true, Encoding.UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Write<span class="token punctuation">(</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Write<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> StreamReader reader <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span><span class="token string">"SMS.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string read<span class="token operator">=</span> reader.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span>int count <span class="token operator">=</span> 0<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>read.IndexOf<span class="token punctuation">(</span>mobile, i<span class="token punctuation">)</span> <span class="token operator">>=</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token operator">=</span>read.IndexOf<span class="token punctuation">(</span>mobile,i<span class="token punctuation">)</span>+1<span class="token punctuation">;</span>  count++<span class="token punctuation">;</span> <span class="token punctuation">}</span>Console.WriteLine<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Serializable序列号案例"><a href="#Serializable序列号案例" class="headerlink" title="Serializable序列号案例"></a>Serializable序列号案例</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>public class ClassToSerialize<span class="token punctuation">{</span>    public int <span class="token function">id</span> <span class="token operator">=</span> 100<span class="token punctuation">;</span>    public string name <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>NonSerialized<span class="token punctuation">]</span>    public string Sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public void SerializeNow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ClassToSerialize c <span class="token operator">=</span> new ClassToSerialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     FileStream fileStream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"c:\\temp.dat"</span>, FileMode.Create<span class="token punctuation">)</span><span class="token punctuation">;</span>     BinaryFormatter b <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     b.Serialize<span class="token punctuation">(</span>fileStream, c<span class="token punctuation">)</span><span class="token punctuation">;</span>     fileStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> public void DeSerializeNow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ClassToSerialize c <span class="token operator">=</span> new ClassToSerialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     c.Sex <span class="token operator">=</span> <span class="token string">"kkkk"</span><span class="token punctuation">;</span>     FileStream fileStream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"c:\\temp.dat"</span>, FileMode.Open, FileAccess.Read, FileShare.Read<span class="token punctuation">)</span><span class="token punctuation">;</span>     BinaryFormatter b <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     c <span class="token operator">=</span> b.Deserialize<span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span> as ClassToSerialize<span class="token punctuation">;</span>       Response.Write<span class="token punctuation">(</span>c.name<span class="token punctuation">)</span><span class="token punctuation">;</span>     Response.Write<span class="token punctuation">(</span>c.Sex<span class="token punctuation">)</span><span class="token punctuation">;</span>     fileStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//////////////////////////////<span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>public class XRentManager<span class="token punctuation">{</span>   public XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       m_DicMyTraffics <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       m_DicRenteds <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//出租集合   <span class="token punctuation">}</span>   ///字典集合：保存可以出租的车   private Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> m_DicMyTraffics<span class="token punctuation">;</span>   internal Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> DicMyTraffics   <span class="token punctuation">{</span>        get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DicMyTraffics<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    /// 获取可以出租的汽车集合    private Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> m_DicRenteds<span class="token punctuation">;</span>   /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>   /// 汽车入库或者出租的车回库   /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>   internal Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> DicRenteds   <span class="token punctuation">{</span>     get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DicRenteds<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#region 反序列化</span> FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"Students.bin"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fs.Length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>     m_RM <span class="token operator">=</span> bf.Deserialize<span class="token punctuation">(</span>fs<span class="token punctuation">)</span> as XRentManager<span class="token punctuation">;</span>//反序列化 <span class="token punctuation">}</span> bf <span class="token operator">=</span> null<span class="token punctuation">;</span> fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //正序列化 XRentManager m_RM <span class="token operator">=</span> new XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#region 序列化</span> FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"Students.bin"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创建序列化 bf.Serialize<span class="token punctuation">(</span>fs, m_RM<span class="token punctuation">)</span><span class="token punctuation">;</span>//保存 bf <span class="token operator">=</span> null<span class="token punctuation">;</span> fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#endregion</span></code></pre><h2 id="Direcotry类（操作目录）"><a href="#Direcotry类（操作目录）" class="headerlink" title="Direcotry类（操作目录）"></a>Direcotry类（操作目录）</h2><pre class=" language-bash"><code class="language-bash">//1.创建一些目录Directory.CreateDirectory<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//2.获取当前目录下的所有的直接子目录<span class="token punctuation">(</span>文件夹<span class="token punctuation">)</span>第二个参数包含<span class="token string">"*I*"</span>，第三个参数，是当前目录还是所有搜索string <span class="token punctuation">[</span><span class="token punctuation">]</span> dirs<span class="token operator">=</span> Directory.GetDirectories<span class="token punctuation">(</span>@<span class="token string">"c:\");foreach(string item in dirs ){    Console.WriteLine(item);}//3.获取当前目录下的所有文件string[] files = Directory.GetFiles(@"</span>c:\<span class="token string">");foreach (string item in files) {   Console.WriteLine(item);}//4.判断是否有这个目录返boolDirectory.Exists(@"</span>C:\test1<span class="token string">");//5.删目录Directory.Delete(@"</span>C:\test1<span class="token string">",true);//6.移动，剪切，移动到同一个地方，改名字，就是重名Directory.Move(@"</span>C:\a.txt<span class="token string">", @"</span>C:\a\a.txt"<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><pre class=" language-bash"><code class="language-bash">    //1.判断文件是否存在？2.删除DeleteFile.Exists<span class="token punctuation">(</span>@<span class="token string">"C:\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //2.读取也有对应的写入File.ReadAllLines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File.ReadAllBytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File.ReadAllText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="文件流-FileStream"><a href="#文件流-FileStream" class="headerlink" title="文件流 FileStream"></a>文件流 FileStream</h2><pre class=" language-bash"><code class="language-bash"> //1.创建一个文件流 FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span>@<span class="token string">"c:\txt.txt"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> //2.读或写,每次读取的内容都有放在缓冲区中 byte<span class="token punctuation">[</span><span class="token punctuation">]</span> byts<span class="token operator">=</span>new byte<span class="token punctuation">[</span>fs.Length<span class="token punctuation">]</span><span class="token punctuation">;</span> //设置、字节 //第一个参数：文件中的字节读取到该数组中，0是从第0个索引开始放，第三个参数数最多读取的字长 fs.Read<span class="token punctuation">(</span>byts, 0, byts.Length<span class="token punctuation">)</span><span class="token punctuation">;</span> //文件流要关闭和释放 fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebClient抓取网页代码</title>
      <link href="/2019/01/03/webclient-zhua-qu-wang-ye-dai-ma/"/>
      <url>/2019/01/03/webclient-zhua-qu-wang-ye-dai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="WebClient类"><a href="#WebClient类" class="headerlink" title="WebClient类"></a>WebClient类<br></h2><p>&emsp;WebClient类位于System.Net命名空间下，WebClient类提供向URI标识的任何本地、Intranet或Internet资源发送数据以及从这些资源接收数据的公共方法。<br>源代码:</p><pre class=" language-bash"><code class="language-bash">///引用命名空间using System.IO<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>PageUrl <span class="token operator">=</span> <span class="token string">"http://www.webkaka.com"</span><span class="token punctuation">;</span> //需要获取源代码的网页WebClient <span class="token function">wc</span> <span class="token operator">=</span> new WebClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 创建WebClient实例提供向URI 标识的资源发送数据和从URI 标识的资源接收数据wc.Credentials <span class="token operator">=</span> CredentialCache.DefaultCredentials<span class="token punctuation">;</span> // 获取或设置用于对向 Internet 资源的请求进行身份验证的网络凭据。///方法一：Encoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> pageData <span class="token operator">=</span> wc.DownloadData<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> // 从资源下载数据并返回字节数组。ContentHtml.Text <span class="token operator">=</span> enc.GetString<span class="token punctuation">(</span>pageData<span class="token punctuation">)</span><span class="token punctuation">;</span> // 输出字符串<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件</code></pre><pre class=" language-bash"><code class="language-bash">/// 方法二：/// ***************代码开始**********Stream resStream <span class="token operator">=</span> wc.OpenRead<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> //以流的形式打开URLEncoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312StreamReader sr <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span>resStream,enc<span class="token punctuation">)</span><span class="token punctuation">;</span> //以指定的编码方式读取数据流ContentHtml.Text <span class="token operator">=</span> sr.ReadToEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //输出<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件 resStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>/// **************代码结束********/// wc.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="WebRequest类"><a href="#WebRequest类" class="headerlink" title="WebRequest类"></a>WebRequest类</h2><p>&emsp;WebRequest类是.NET Framework中“请求/响应”模型的abstract基类，用于访问Internet数据。使用WebRequest类请求/响应模型的应用程序可以用协议不可知的方式从Internet请求数据，在这种方式下，应用程序处理WebRequest类的实例，而协议特定的子类则执行请求的具体细节，请求从应用程序发送到某个特定的URI，如服务器上的网页。URI从一个为应用程序注册的WebRequest子类列表中确定要创建的适当子类。注册WebRequest子类通常是为了处理某个特定的协议（如HTTP或FTP），但是也可以注册它以处理对特定服务器或服务器上的路径的请求。<br><br>&emsp;WebRequest类中最常用的是Create方法，Create方法用于为指定的URI方案初始化新的WebRequest实例。</p><pre class=" language-bash"><code class="language-bash">　　语法：public static WebRequest Create<span class="token punctuation">(</span>　 string requestUriString<span class="token punctuation">)</span></code></pre><p>　　参数：requestUriString：标识Internet资源的URI。<br><br>　　返回值：特定URI方案的WebRequest子类。<br><br>　　注意：Create方法将运行时确定的WebRequest类的子类作为与requestUri最接近的注册匹配项返回。例如，当以http://开头的URI在requestUri中传递时，由Create返回一个HttpWebRequest。如果改为传递以file://开头的URI，则Create方法将返回FileWebRequest实例。.NET Framework包括对http://和file:// URI方案的支持。</p><h2 id="WebResponse类"><a href="#WebResponse类" class="headerlink" title="WebResponse类"></a>WebResponse类</h2><p>&emsp;WebResponse类是abstract基类，协议特定的响应类从该抽象基类派生。应用程序可以使用 WebResponse类的实例以协议不可知的方式参与请求和响应事务，而从WebResponse类派生的协议特定的类携带请求的详细信息。<br>　　在WebResponse类中最常用的是GetResponse方法，GetResponse方法用于当在子类中被重写时，返回对 Internet 请求的响应<br>　　语法：<br>　　public virtual WebResponse GetResponse ()<br>　　返回值：包含对Internet请求的响应的WebResponse。</p><pre class=" language-bash"><code class="language-bash">源代码///引用命名空间using System.IO<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>PageUrl <span class="token operator">=</span> <span class="token string">"http://www.webkaka.com"</span><span class="token punctuation">;</span> //需要获取源代码的网页WebRequest request <span class="token operator">=</span> WebRequest.Create<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> //WebRequest.Create方法，返回WebRequest的子类HttpWebRequestWebResponse response <span class="token operator">=</span> request.GetResponse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //WebRequest.GetResponse方法，返回对 Internet 请求的响应Stream resStream <span class="token operator">=</span> response.GetResponseStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //WebResponse.GetResponseStream 方法，从 Internet 资源返回数据流。 Encoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312StreamReader sr <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span>resStream, enc<span class="token punctuation">)</span><span class="token punctuation">;</span> //命名空间:System.IO。 StreamReader 类实现一个 TextReader <span class="token punctuation">(</span>TextReader类，表示可读取连续字符系列的读取器<span class="token punctuation">)</span>，使其以一种特定的编码从字节流中读取字符。 ContentHtml.Text <span class="token operator">=</span> sr.ReadToEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //输出<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件resStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sr.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http响应码</title>
      <link href="/2019/01/02/http-xiang-ying-ma/"/>
      <url>/2019/01/02/http-xiang-ying-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Http请求"><a href="#1-Http请求" class="headerlink" title="1.Http请求"></a>1.Http请求</h2><p>&emsp;浏览器 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 先看本地电脑是否存在百度服务器的IP，如果存在直接 发送请求报文，如果不存在,则会先请求 DNS服务器，通过映射关系找到 百度 服务器的 IP地址返回给浏览器，浏览器保存IP ，并通过流的方式向 百度服务器 发送 转化为byte[]的请求报文。</p><h2 id="2-TTP协议响应码"><a href="#2-TTP协议响应码" class="headerlink" title="2.TTP协议响应码"></a>2.TTP协议响应码<br></h2><p>&emsp;    “200” : OK <br><br>&emsp;    “302” : Found 重定向<br><br>&emsp;    “400” : Bad Request 错误请求,发出错误的不符合Http协议的请求<br><br>&emsp;    “403” : Forbidden 禁止<br><br>&emsp;    “404” : Not Found 未找到<br><br>&emsp;    “500” : Internal Server Error 服务器内部错误。<br><br>&emsp;    “503” : Service U navailable 一般是访问人数过多<br></p><ul><li>200段是成功；300段需要对请求做进一步处理；400段表示客户端请求错误；500段是服务器错误。</li></ul><h3 id="HTTP-常用ContentType"><a href="#HTTP-常用ContentType" class="headerlink" title="HTTP 常用ContentType"></a>HTTP 常用ContentType<br></h3><pre><code>type/html(默认是这个); image/gif;  image/jpeg; text/plain（普通文本）</code></pre><h3 id="http其他-（是无状态的）"><a href="#http其他-（是无状态的）" class="headerlink" title="http其他 （是无状态的）"></a>http其他 （是无状态的）<br></h3><p>http不会记得”上个请求是什么”，所以哪怕是同一个页面中的JS/CSS/JPG也都需要重复提交。</p><p>网页中如果有图片，CSS,JS等外部文件的话，这些请求都会在一个单独请求中,也就是说并不是页面的所有内容都在一个请求中完成,而是每个资源都是一个单独请求。</p><h2 id="3-服务器端"><a href="#3-服务器端" class="headerlink" title="3.服务器端"></a>3.服务器端</h2><p>&emsp;服务器端 分 内核模式 和用户模式 ， 内核模式为windows底层的一些东西内核模式(Kernel Model)中的 HTTP.SYS(无法看到，他实现了一个插件的机制，自己不处理程序，只负责接收请求，只负责接收请求，让其他exe等程序处理)监听80端口(监听的socket)，识别请求的协议：一般为HTTP，识别请求的端口,把请求发送给具体的应用程序(IIS安装后就在注册表里注册了)。<br>这时候还会再创建一个新的端口 来负责和请求的客户端通信(称为代理Socket或通信Socket)</p><ol><li>w3svc服务(托管)和 inetInfo.exe进程 和起来就是IIS<br>请求通过HTTP.SYS 交给 w3svc服务(svchost.exe),来查看INETINFO.exe<br>访问 IIS进程中的元数据(包含扩展注册信息) 查下请求后缀的文件应如何处理，</li></ol><p>如果是静态网页(.htm,.html等)会先通过内核模块再通过通信端口发送回去。</p><p>&emsp;如果是动态网页（.aspx）会交给扩展 aspnet_isapi.dll(非托管的代码写的,非托管和托管代码的桥梁)处理，然后aspnet_isapi会负责启动ApplicationDomain，请求交给（通过windows系统的句柄，句柄是操作系统的一些标识符） ISApiRuntime，在ISapiRuntime内部，通过ecb指针创建了一个HttpWorkRequest对象（就是简单的对报文的一个封装）然后将HttpWorkRequest对象 交给HttpRunTime PR方法，在PR方法内部又将HttpWorkRequest对象封装成了HttpContext(也就是把请求报文封装成了Request对象和Response对象)再通过HttpApplicationFactory创建一个具体的Application实例<br>然后请求随着 Application管道一次一次的流，在管道里面有19个公开的事件(共23)，请求留到Application的PR方法的时候，帮我们一次性的把19个事件都调用了，二者19个事件又允许我们开发人员自己注册响应方法，可以过滤响应报文(对报文的处理)第8个事件时会根据HttpContext中的RequestURL(请求的地址)会创建最终处理当前请求的Handler实例<br>在11个事件和12个事件之间会调用创建的Handler实例的PR方法</p><p>ISAPIRuntime.PR()通过ECB创建HttpWorkRequest对象，将请求报文放到其中</p><p>Http.Runtime.PR()创建HttpContext对象(包含HttpRequest对象和HttpResponse对象，分析浏览器的请求报文,然后将请求报文的数据存入HttpContext里的Resquest属性中)<br>HttpApplicationFactory 获取一个HttpApplication实例<br>HttpApplication执行管道23个事件,19个事公开给开发人员的(插件机制) ，负责创建和执行页面</p>]]></content>
      
      
      <categories>
          
          <category> Web原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asp.Net页面生命周期</title>
      <link href="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/"/>
      <url>/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Asp-Net页面生命周期"><a href="#Asp-Net页面生命周期" class="headerlink" title="Asp.Net页面生命周期"></a>Asp.Net页面生命周期</h1><h2 id="1-什么是Asp-Net页面生命周期"><a href="#1-什么是Asp-Net页面生命周期" class="headerlink" title="1.什么是Asp.Net页面生命周期"></a>1.什么是Asp.Net页面生命周期</h2><p>&emsp; 当我们在浏览器地址栏中输入网址，回车查看页面时，这时会向服务器端（IIS）发送一个request请求，服务器就会判断发送过来的请求页面，  完全识别 HTTP 页面处理程序类后，ASP.NET 运行时将调用处理程序的 ProcessRequest 方法来处理请求，来创建页面对象。通常情况下，无需更改此方法的实现，因为它是由 Page 类提供的。接下来被创建页面对象的ProcessRequest方法使页面经历了各个阶段：初始化、加载视图状态信息和回发数据、加载页面的用户代码以及执行回发服务器端事件。之后，页面进入显示模式：收集更新的视图状态，生成 HTML 代码并随后将代码发送到输出控制台。最后，卸载页面，并认为请求处理完毕。其中页面对象ProcessRequest方法 完成的这一系列事件的处理过程就是Asp.Net页面生命周期。</p><h2 id="2-了解Asp-Net页面生命周期的好处"><a href="#2-了解Asp-Net页面生命周期的好处" class="headerlink" title="2.了解Asp.Net页面生命周期的好处"></a>2.了解Asp.Net页面生命周期的好处</h2><p>&emsp;  了解个掌握ASP.NET页面生命周期是非常必要的，这有助于我们更加灵活的控制页面，以我们需要的方式编程开发。ASP.NET页运行时，此页会经历一个又一个的事件链，每个事件链中执行不同的行为，这所有的行为共同组成我们所需要的页面。了解了生命周期也更有助于我们对程序调试中发生问题的地方的定位。</p><h2 id="3-Asp-Net页面生命周期简化版流程"><a href="#3-Asp-Net页面生命周期简化版流程" class="headerlink" title="3.Asp.Net页面生命周期简化版流程"></a>3.Asp.Net页面生命周期简化版流程</h2><p>页面初始化          Page_Init<br>加载View State      LoadViewState<br>回发数据处理      LoadPostData<br>页面加载          Page_Load<br>回发通知          RaisePostDataChangedEvent<br>回发事件处理     RaisePostBackEvent<br>页面预渲染       Page_PreRender<br>保存             viewstate SaveViewState<br>Page渲染         Page_Render<br>Page 卸载       Page_UnLoad<br>&emsp;要是详细写太多了也不好理解，简化版看图：<br><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/4.jpg" alt=""></p><h2 id="4-什么地方用到了Asp-Net-页面生命周期"><a href="#4-什么地方用到了Asp-Net-页面生命周期" class="headerlink" title="4.什么地方用到了Asp.Net 页面生命周期"></a>4.什么地方用到了Asp.Net 页面生命周期</h2><p>1  第一张图片从全局说明从客户端发出一个Request请求，服务器windows内核中的HTTP.SYS组件接收该请求开始到IIS处理完该请求并响应到客户端结束。<br><br>2  第二张图片为图1中Http处理管线的详细步骤<br><br>3  第三张图片为图2Http处理管线中调用处理程序(HttpHandler,  此处为Page对象)的详细生命周期过程。</p><p><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/1.jpg" alt="图1"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/2.png" alt="图2"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/3.png" alt="图3"></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET原理 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
