<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#之Socket</title>
      <link href="/2019/01/09/c-zhi-socket/"/>
      <url>/2019/01/09/c-zhi-socket/</url>
      
        <content type="html"><![CDATA[<h2 id="C-中Socket的简单使用"><a href="#C-中Socket的简单使用" class="headerlink" title="C#中Socket的简单使用"></a>C#中Socket的简单使用</h2><ol><li>服务端监听某个端口</li><li>客户端向服务端地址和端口发起Socket连接请求</li><li>服务端收到连接请求后创建Socket连接，并维护这个连接队列。</li><li>客户端和服务端已经建立双工通信（即双向通信），客户端和服务端可以轻松方便的给彼此发送信息<br><img src="/2019/01/09/c-zhi-socket/1.jpg" alt="图1"><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2></li><li>动态端口 从49152-65535</li><li>机器通常从1024起分配动态端口</li><li>公认端口：0-1023，注册端口： 1024-49151<br>，SUN的RPC端口从 32768开始</li><li>查看端口方式： netstat -a -n<h2 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h2><img src="/2019/01/09/c-zhi-socket/2.jpg" alt="图2"><br><img src="/2019/01/09/c-zhi-socket/3.jpg" alt="图3"><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><img src="/2019/01/09/c-zhi-socket/4.jpg" alt="图4"><br><img src="/2019/01/09/c-zhi-socket/5.jpg" alt="图5"><br><img src="/2019/01/09/c-zhi-socket/6.jpg" alt="图6"></li></ol><p>服务端代码：</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Net.Sockets<span class="token punctuation">;</span>using System.Threading<span class="token punctuation">;</span>namespace ChatMain<span class="token punctuation">{</span>    public partial class ChatMain <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public ChatMain<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Control.CheckForIllegalCrossThreadCalls <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Socket<span class="token operator">></span> clientSocketList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Socket<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        private void btnStart_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string ip <span class="token operator">=</span> this.txtIP.Text<span class="token punctuation">;</span>            //创建IP            IPAddress ipAddress <span class="token operator">=</span> IPAddress.Parse<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建代表本机的节点对象：包含IP和端口            IPEndPoint endPoint<span class="token operator">=</span>new IPEndPoint<span class="token punctuation">(</span>ipAddress,int.Parse<span class="token punctuation">(</span>this.txtPort.Text<span class="token punctuation">))</span><span class="token punctuation">;</span>             //创建Socket：第一参数：寻址方式，第二个参数： socket传输方式Stream Tcp方式  Dgram:UDP  第三个参数：协议            Socket socket <span class="token operator">=</span> new Socket<span class="token punctuation">(</span>AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>            //绑定端口和IP            socket.Bind<span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>            //开启监听，请求连接的队列的长度            socket.Listen<span class="token punctuation">(</span>10<span class="token punctuation">)</span><span class="token punctuation">;</span>            //线程池开启 监听客户端连接            ThreadPool.QueueUserWorkItem<span class="token punctuation">(</span>new WaitCallback<span class="token punctuation">(</span>this.statAccept<span class="token punctuation">)</span>, socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            this.txtLog.Text +<span class="token operator">=</span> <span class="token string">"服务端开启监听客户端连接了..\r\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public void statAccept<span class="token punctuation">(</span>object obj<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    //接受客户端的一个连接                    Socket proxSocket <span class="token operator">=</span> socket.Accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    //客户端代理socket对象的队列里面去                    clientSocketList.Add<span class="token punctuation">(</span>proxSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>                    //拿到客户端的端口和ip                    this.txtLog.Text +<span class="token operator">=</span> proxSocket.RemoteEndPoint.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"\r\n"</span><span class="token punctuation">;</span>                    //跟客户端进行通信 通过：proxSocket                    //proxSocket.Send<span class="token punctuation">(</span><span class="token punctuation">)</span>                    //proxSocket.Receive<span class="token punctuation">(</span><span class="token punctuation">)</span>                    ThreadPool.QueueUserWorkItem<span class="token punctuation">(</span>new WaitCallback<span class="token punctuation">(</span>this.StartReciveClientData<span class="token punctuation">)</span>, proxSocket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception  ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                socket.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 接受连接过来的IP的数据        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        public void StartReciveClientData<span class="token punctuation">(</span>object obj<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Socket sokcet <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> new byte<span class="token punctuation">[</span>1024 * 1024 * 1<span class="token punctuation">]</span><span class="token punctuation">;</span>                int  realLenth<span class="token operator">=</span> sokcet.Receive<span class="token punctuation">(</span>buffer,0,buffer.Length,SocketFlags.None<span class="token punctuation">)</span><span class="token punctuation">;</span>                string strResult <span class="token operator">=</span> Encoding.Default.GetString<span class="token punctuation">(</span>buffer, 0, realLenth<span class="token punctuation">)</span><span class="token punctuation">;</span>                this.txtLog.Text +<span class="token operator">=</span> sokcet.RemoteEndPoint.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">":"</span> + strResult + <span class="token string">"\r\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void btnStarClient_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ChatClient client <span class="token operator">=</span> new ChatClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            client.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnSend_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            foreach <span class="token punctuation">(</span>var socket <span class="token keyword">in</span> clientSocketList<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                string strText <span class="token operator">=</span> this.txtMsg.Text<span class="token punctuation">;</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> Encoding.Default.GetBytes<span class="token punctuation">(</span>strText<span class="token punctuation">)</span><span class="token punctuation">;</span>                socket.Send<span class="token punctuation">(</span>data, 0, data.Length, SocketFlags.None<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端代码：</p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.ComponentModel<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Drawing<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Windows.Forms<span class="token punctuation">;</span>using System.Net.Sockets<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Threading<span class="token punctuation">;</span>namespace ChatMain<span class="token punctuation">{</span>    public partial class ChatClient <span class="token keyword">:</span> Form    <span class="token punctuation">{</span>        public Socket CurrentSocket <span class="token punctuation">{</span>get<span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public ChatClient<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnConnect_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> null<span class="token punctuation">;</span>            IPAddress ipAddress <span class="token operator">=</span> IPAddress.Parse<span class="token punctuation">(</span>this.txtIP.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            IPEndPoint endPoint<span class="token operator">=</span>new IPEndPoint<span class="token punctuation">(</span>ipAddress,int.Parse<span class="token punctuation">(</span>this.txtPort.Text<span class="token punctuation">))</span><span class="token punctuation">;</span>            //创建个Socket            socket <span class="token operator">=</span> new Socket<span class="token punctuation">(</span>AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp<span class="token punctuation">)</span><span class="token punctuation">;</span>            socket.Connect<span class="token punctuation">(</span>endPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>            ThreadPool.QueueUserWorkItem<span class="token punctuation">(</span>new WaitCallback<span class="token punctuation">(</span>Recive<span class="token punctuation">)</span>, socket<span class="token punctuation">)</span><span class="token punctuation">;</span>            this.lbStatus.Text <span class="token operator">=</span> <span class="token string">"已连接"</span><span class="token punctuation">;</span>            CurrentSocket <span class="token operator">=</span> socket<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //接受        public void Recive<span class="token punctuation">(</span>object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Socket socket <span class="token operator">=</span> <span class="token punctuation">(</span>Socket<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> socket.Connected<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> new byte<span class="token punctuation">[</span>1024 * 1024<span class="token punctuation">]</span><span class="token punctuation">;</span>                int realLength <span class="token operator">=</span> socket.Receive<span class="token punctuation">(</span>buffer, 0, buffer.Length,SocketFlags.None<span class="token punctuation">)</span><span class="token punctuation">;</span>               //接受字符串                string txt <span class="token operator">=</span> Encoding.Default.GetString<span class="token punctuation">(</span>buffer, 0, realLength<span class="token punctuation">)</span><span class="token punctuation">;</span>                this.txtLog.Text +<span class="token operator">=</span> string.Format<span class="token punctuation">(</span><span class="token string">"接受消息：{0}"</span>, txt<span class="token punctuation">)</span><span class="token punctuation">;</span>                this.txtLog.Text +<span class="token operator">=</span> <span class="token string">"\r\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        //发送        private void btnSend_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string strText <span class="token operator">=</span> this.txtMsg.Text<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>string.IsNullOrEmpty<span class="token punctuation">(</span>strText<span class="token punctuation">))</span> <span class="token punctuation">{</span>                this.txtLog.Text <span class="token operator">=</span> <span class="token string">"发送的消息不能为空"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>CurrentSocket <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox.Show<span class="token punctuation">(</span><span class="token string">"请先连接服务端"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            byte<span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> Encoding.Default.GetBytes<span class="token punctuation">(</span>strText<span class="token punctuation">)</span><span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                CurrentSocket.Send<span class="token punctuation">(</span>data, 0, data.Length, 0<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception<span class="token punctuation">)</span>            <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ADO.NET+SqlHelper</title>
      <link href="/2019/01/08/ado.net/"/>
      <url>/2019/01/08/ado.net/</url>
      
        <content type="html"><![CDATA[<h2 id="ADO-NET-自己封装的SqlHelper"><a href="#ADO-NET-自己封装的SqlHelper" class="headerlink" title="ADO.NET+自己封装的SqlHelper"></a>ADO.NET+自己封装的SqlHelper</h2><p> 理论到处都是的，我就不写理论了，两张图表达一切：<br><img src="/2019/01/08/ado.net/1.jpg" alt="图1"><br><img src="/2019/01/08/ado.net/2.jpg" alt="图2"><br> 下面直接写demo练习和自己封装一个sqlHelper分享大家看看</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><pre class=" language-bash"><code class="language-bash"> static public void TestConnection<span class="token punctuation">(</span><span class="token punctuation">)</span> //连接        <span class="token punctuation">{</span>        //1.连接通道的连接字符串            string Constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa"</span><span class="token punctuation">;</span>        //2.连接通道           SqlConnection con<span class="token operator">=</span>new SqlConnection<span class="token punctuation">(</span>Constr<span class="token punctuation">)</span><span class="token punctuation">;</span>          //3.打开通道            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          //4.关闭通道            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"连接上数据库了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //注意如果是orcale的，方式不同：            OleDbConnection conn <span class="token operator">=</span> new OleDbConnection<span class="token punctuation">(</span><span class="token string">"Provider=MSDAORA.1;Data Source=(DESCRIPTION =(ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.2.234)(PORT = 1521)))(CONNECT_DATA = (SID = orcl))) ;User Id=sjk;Password=sssss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string sql <span class="token operator">=</span> <span class="token string">"select * from tbl_aa "</span><span class="token punctuation">;</span>            OleDbDataAdapter da <span class="token operator">=</span> new OleDbDataAdapter<span class="token punctuation">(</span>sql, conn<span class="token punctuation">)</span><span class="token punctuation">;</span>            DataSet ds <span class="token operator">=</span> new DataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            da.Fill<span class="token punctuation">(</span>ds, <span class="token string">"ds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dataGridView1.DataSource <span class="token operator">=</span> ds.Tables<span class="token punctuation">[</span>0<span class="token punctuation">]</span>        <span class="token punctuation">}</span></code></pre><h2 id="查询单个值"><a href="#查询单个值" class="headerlink" title="查询单个值"></a>查询单个值</h2><pre class=" language-bash"><code class="language-bash">   static public void QuerySingle<span class="token punctuation">(</span><span class="token punctuation">)</span> //查询单个值  SqlCommand .ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            string constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection  con<span class="token operator">=</span>new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select count(*) from Category"</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            object obj <span class="token operator">=</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span>obj.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="增，删，改"><a href="#增，删，改" class="headerlink" title="增，删，改"></a>增，删，改</h2><pre class=" language-bash"><code class="language-bash"> static public void AddRecord<span class="token punctuation">(</span><span class="token punctuation">)</span> //增，删，改 SqlCommand ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int res <span class="token operator">=</span> 0<span class="token punctuation">;</span> //准备接受新橧        //1.连接通道的字符串            string Constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>        //2.连接通道            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       //3.手动指定连接字符串            con.ConnectionString <span class="token operator">=</span> Constr<span class="token punctuation">;</span>       //4.准备insert字符串语句            string sqlstr <span class="token operator">=</span> <span class="token string">"insert into Category(C_name,C_remark,C_isdel,C_addtime)values('编程书籍','asp.net','0',GetDate())"</span><span class="token punctuation">;</span>        //5.新建命令对象（工人），并告诉哪里走，做什么            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            //cmd.CommandText <span class="token operator">=</span> sqlstr<span class="token punctuation">;</span>            //cmd.Connection <span class="token operator">=</span> con<span class="token punctuation">;</span>         //打开连接通道            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         //6.调用方法去执行sql语句            res <span class="token operator">=</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//此方法负责增删改，返回受影响的行数（int）            //关闭连接通道            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">></span> 0<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"新增成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"新增失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="查询多行数据-SqlDataReader"><a href="#查询多行数据-SqlDataReader" class="headerlink" title="查询多行数据 SqlDataReader"></a>查询多行数据 SqlDataReader</h2><pre class=" language-bash"><code class="language-bash"> static public void QueryList<span class="token punctuation">(</span><span class="token punctuation">)</span> //查询多行数据 SqlDataReader        <span class="token punctuation">{</span>            string constr <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select * from Category"</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlDataReader dr <span class="token operator">=</span> cmd.ExecuteReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dr.HasRows<span class="token punctuation">)</span>//是返回返回结果            <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>dr.Read<span class="token punctuation">(</span><span class="token punctuation">))</span>//前进下一行记录                <span class="token punctuation">{</span>                    //Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span>4<span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //for <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> 5<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>                    //<span class="token punctuation">{</span>                    //    Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //<span class="token punctuation">}</span>                    Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> +<span class="token string">"+"</span>+ dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //Console.WriteLine<span class="token punctuation">(</span>dr.GetOrdinal<span class="token punctuation">(</span><span class="token string">"C_id"</span><span class="token punctuation">)</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"无数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            dr.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="使用适配器读取数据-填充数据集-SqlDataAdapter"><a href="#使用适配器读取数据-填充数据集-SqlDataAdapter" class="headerlink" title="使用适配器读取数据,填充数据集 SqlDataAdapter"></a>使用适配器读取数据,填充数据集 SqlDataAdapter</h2><pre class=" language-bash"><code class="language-bash">  static public void QueryListByAdapter<span class="token punctuation">(</span><span class="token punctuation">)</span> //使用适配器读取数据,填充数据集 SqlDataAdapter        <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select * from Category"</span><span class="token punctuation">;</span>            //创建适配器，告诉它要做什么事情，走那条路            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建数据集对象（程序端的临时数据库）            DataSet ds <span class="token operator">=</span> new DataSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //调用fill方法，填充数据集（先去数据库查询数据集，并把结果集返回赋值给数据集）            da.Fill<span class="token punctuation">(</span>ds,<span class="token string">"table1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //获取数据集中的每一张表            DataTable dt <span class="token operator">=</span> ds.Tables<span class="token punctuation">[</span><span class="token string">"table1"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            //循环数据表中的每一行            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dt.Rows.Count<span class="token punctuation">;</span>i++ <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                DataRow dr <span class="token operator">=</span> dt.Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                //每一行里的每一列                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span></code></pre><h2 id="使用适配器读取数据-填充表-SqlDataAdapter"><a href="#使用适配器读取数据-填充表-SqlDataAdapter" class="headerlink" title="使用适配器读取数据,填充表 SqlDataAdapter"></a>使用适配器读取数据,填充表 SqlDataAdapter</h2><pre class=" language-bash"><code class="language-bash">  static public void QueryListByAdapter2<span class="token punctuation">(</span><span class="token punctuation">)</span> //使用适配器读取数据,填充表 SqlDataAdapter        <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            string sqlstr <span class="token operator">=</span> <span class="token string">"select * from Category"</span><span class="token punctuation">;</span>            //创建适配器，告诉它要做什么事情，走那条路            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>sqlstr, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            //创建数据表（程序端的临时数据库）            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //调用fill方法，填充数据集（先去数据库查询数据集，并把结果集返回赋值给数据集）            da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            //循环数据表中的每一行            foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            //for <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dt.Rows.Count<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            //<span class="token punctuation">{</span>            //    DataRow dr <span class="token operator">=</span> dt.Rows<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            //    //每一行里的每一列            //    Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //<span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="调用存储过程-单个参数"><a href="#调用存储过程-单个参数" class="headerlink" title="调用存储过程 单个参数"></a>调用存储过程 单个参数</h2><pre class=" language-bash"><code class="language-bash"> static public void QueryListByProc<span class="token punctuation">(</span><span class="token punctuation">)</span> //调用存储过程 单个参数        <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=book;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token string">"usp_getBook"</span>, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd.CommandType <span class="token operator">=</span> CommandType.StoredProcedure<span class="token punctuation">;</span> //指定命令类型为存储过程            SqlParameter sp<span class="token operator">=</span>new SqlParameter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//指定存储过程中的参数            sp.ParameterName <span class="token operator">=</span> <span class="token string">"@CateId"</span><span class="token punctuation">;</span>            sp.SqlDbType <span class="token operator">=</span> SqlDbType.Int<span class="token punctuation">;</span>            sp.Value <span class="token operator">=</span> 3<span class="token punctuation">;</span>            cmd.Parameters.Add<span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>//将参数对象加入到命令对象的参数集合中            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"C_id"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_name"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_remark"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_isdel"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"+"</span> + dr<span class="token punctuation">[</span><span class="token string">"C_addtime"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h2 id="调用存储过程，多参数"><a href="#调用存储过程，多参数" class="headerlink" title="调用存储过程，多参数"></a>调用存储过程，多参数</h2><pre class=" language-bash"><code class="language-bash">        static public void QueryListByProc2<span class="token punctuation">(</span><span class="token punctuation">)</span>//调用存储过程，多参数         <span class="token punctuation">{</span>            string str <span class="token operator">=</span> @<span class="token string">"server=.;database=Bank;uid=sa;pwd=sa;"</span><span class="token punctuation">;</span>            SqlConnection con <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token string">"getBank"</span>, con<span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd.CommandType <span class="token operator">=</span> CommandType.StoredProcedure<span class="token punctuation">;</span>//指定作为存储过程执行            SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> sp <span class="token operator">=</span> <span class="token punctuation">{</span> new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageSize"</span>, SqlDbType.Int, 4<span class="token punctuation">)</span>,                                  new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageindex"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                  new SqlParameter<span class="token punctuation">(</span><span class="token string">"@rowCount"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                  new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageCount"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>                                <span class="token punctuation">}</span><span class="token punctuation">;</span>            sp<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 2<span class="token punctuation">;</span>//设置搜索第一页            sp<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 5<span class="token punctuation">;</span>//设置显示的页数            sp<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>//输出参数            sp<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>            //sp<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 5<span class="token punctuation">;</span>            //sp<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value <span class="token operator">=</span> 5<span class="token punctuation">;</span>            cmd.Parameters.AddRange<span class="token punctuation">(</span>sp<span class="token punctuation">)</span><span class="token punctuation">;</span>//为cmd对象添加参数数组            SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>//创建适配器            DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创建数据表（程序端）            da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>DataRow dr <span class="token keyword">in</span> dt.Rows<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span>dr<span class="token punctuation">[</span><span class="token string">"R"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"+"</span>+dr<span class="token punctuation">[</span><span class="token string">"bankID"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"+"</span>+dr<span class="token punctuation">[</span><span class="token string">"customerName"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span>+<span class="token string">"+"</span>+dr<span class="token punctuation">[</span><span class="token string">"currentMoney"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            int rowCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>cmd.Parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>            int pageCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>cmd.Parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"{0},{1}"</span>,rowCount,pageCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="SqlHelper"><a href="#SqlHelper" class="headerlink" title="SqlHelper"></a>SqlHelper</h2><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Data<span class="token punctuation">;</span>using System.Configuration<span class="token punctuation">;</span>using System.Data.SqlClient<span class="token punctuation">;</span>namespace Power_2.DAL<span class="token punctuation">{</span>    class SqlHelper    <span class="token punctuation">{</span> //每次打开一个连接保持快速连接        private static <span class="token function">readonly</span> string constr <span class="token operator">=</span> ConfigurationManager.ConnectionStrings<span class="token punctuation">[</span><span class="token string">"conStr"</span><span class="token punctuation">]</span>.ConnectionString<span class="token punctuation">;</span>        //封装方法的原则：把不变大的放到方法里，把变化的放参数中到        private static SqlConnection conn<span class="token punctuation">;</span> //连接        public static SqlConnection Conn        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> null <span class="token operator">||</span> conn.State <span class="token operator">==</span> ConnectionState.Broken<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> conn<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 析构函数，自动消除，防止没有删除完，程序自动调用        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sql"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        ~SqlHelper<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public void Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span> //写个方法可以调用回收        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn.State <span class="token operator">!=</span> ConnectionState.Closed<span class="token punctuation">)</span>                    conn.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                conn.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 执行的语句 执行增删改        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sql"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static int ExecuteNonQuery<span class="token punctuation">(</span>string sql<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 参数执行的语句 执行增删改        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sqlstr"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"paras"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static int ExecuteNonQuery<span class="token punctuation">(</span>string sqlstr, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sqlstr, conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                int res <span class="token operator">=</span> 0<span class="token punctuation">;</span>                try                <span class="token punctuation">{</span>                    res <span class="token operator">=</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    throw ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                finally                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd.Parameters.Count <span class="token operator">></span> 0<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            cmd.Parameters.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        cmd.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        cmd <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                Conn.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> res<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ExecuteScalar<span class="token punctuation">(</span>string sql<span class="token punctuation">)</span> //查询单个值        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ExecuteScalar<span class="token punctuation">(</span>string sql, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span> //查询单个值        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cmd.CommandText <span class="token operator">=</span> sql<span class="token punctuation">;</span>                    <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 查询结果集比较少的sql        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sql"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"paras"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static DataTable ExecuteDataTable<span class="token punctuation">(</span>string sql, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> paras<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span>            <span class="token punctuation">{</span>                conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span>sql,conn<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>paras <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> paras.Length <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cmd.Parameters.AddRange<span class="token punctuation">(</span>paras<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                SqlDataAdapter adapter <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                try                <span class="token punctuation">{</span>                    adapter.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    throw ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                finally                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        adapter.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        adapter <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> dt<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static SqlDataReader ExecuteDataReader<span class="token punctuation">(</span>string cmdText, params SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>            conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            using <span class="token punctuation">(</span>SqlCommand cmd <span class="token operator">=</span> conn.CreateCommand<span class="token punctuation">(</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                cmd.CommandText <span class="token operator">=</span> cmdText<span class="token punctuation">;</span>                cmd.Parameters.AddRange<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> cmd.ExecuteReader<span class="token punctuation">(</span>CommandBehavior.CloseConnection<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 执行简单分页存储过程        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pageIndex"</span><span class="token operator">></span>每页行数<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pageSize"</span><span class="token operator">></span>当前页面数<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"rowCount"</span><span class="token operator">></span>总行数（传出参数）<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pageCount"</span><span class="token operator">></span>总页数（传出参数）<span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        public static DataTable ExecProSimplePageList<span class="token punctuation">(</span>int pageIndex, int pageSize, out int rowCount, out int pageCount<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            rowCount <span class="token operator">=</span> 1<span class="token punctuation">;</span>            pageCount <span class="token operator">=</span> 1<span class="token punctuation">;</span>            SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span><span class="token punctuation">{</span>                                      new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageindex"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                       new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageSize "</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                       new SqlParameter<span class="token punctuation">(</span><span class="token string">"@rowCount "</span>,SqlDbType.Int,4<span class="token punctuation">)</span>,                                       new SqlParameter<span class="token punctuation">(</span><span class="token string">"@pageCount"</span>,SqlDbType.Int,4<span class="token punctuation">)</span>                                      <span class="token punctuation">}</span><span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>0<span class="token punctuation">]</span>.Value <span class="token operator">=</span> pageIndex<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>1<span class="token punctuation">]</span>.Value <span class="token operator">=</span> pageSize<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value <span class="token operator">=</span> rowCount<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value <span class="token operator">=</span> pageCount<span class="token punctuation">;</span>            parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Direction <span class="token operator">=</span> ParameterDirection.Output<span class="token punctuation">;</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             using <span class="token punctuation">(</span>SqlConnection conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">))</span><span class="token punctuation">{</span>                 cmd.Connection <span class="token operator">=</span> conn<span class="token punctuation">;</span>                 cmd.CommandText <span class="token operator">=</span> <span class="token string">"usp_Book_paging"</span><span class="token punctuation">;</span>                 cmd.CommandType <span class="token operator">=</span> CommandType.StoredProcedure<span class="token punctuation">;</span>                 cmd.Parameters.AddRange<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>                 SqlDataAdapter da <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                 DataTable dt <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 da.Fill<span class="token punctuation">(</span>dt<span class="token punctuation">)</span><span class="token punctuation">;</span>                 rowCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>parameters<span class="token punctuation">[</span>2<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                 pageCount <span class="token operator">=</span> Convert.ToInt32<span class="token punctuation">(</span>parameters<span class="token punctuation">[</span>3<span class="token punctuation">]</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> dt<span class="token punctuation">;</span>             <span class="token punctuation">}</span>              <span class="token punctuation">}</span>        public static object FromDbValue<span class="token punctuation">(</span>object value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> DBNull.Value<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        public static object ToDbValue<span class="token punctuation">(</span>object value<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> DBNull.Value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        ////////////////////执行存储过程的增删查改//////////////////////////        private static SqlConnection CNN        <span class="token punctuation">{</span>            get            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn <span class="token operator">=</span> new SqlConnection<span class="token punctuation">(</span>constr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>conn.State <span class="token operator">!=</span> ConnectionState.Open<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    conn.Open<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> conn<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#region 连接等都写在一个方法里</span>        private static SqlCommand CreateCommand<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> new SqlCommand<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cmd.Connection <span class="token operator">=</span> CNN<span class="token punctuation">;</span>            cmd.CommandText <span class="token operator">=</span> cmdText<span class="token punctuation">;</span>            cmd.CommandType <span class="token operator">=</span> cmdType<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parms <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cmd.Parameters.AddRange<span class="token punctuation">(</span>parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> cmd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ///         <span class="token comment" spellcheck="true">#endregion &lt;summary></span>        ///执行增删改功能储存过程        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region ExecuteCommand</span>        public static int ExecuteCommand<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> ExecuteCommand<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static int ExecuteCommand<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> ExecuteCommand<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static int ExecuteCommand<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cmd.ExecuteNonQuery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 返回一张表        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region GetTable</span>        public static DataTable GetTable<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetTable<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static DataTable GetTable<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetTable<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static DataTable GetTable<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DataTable table <span class="token operator">=</span> new DataTable<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SqlDataAdapter adapter <span class="token operator">=</span> new SqlDataAdapter<span class="token punctuation">(</span>CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">))</span><span class="token punctuation">;</span>            adapter.Fill<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> table<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// SqlDataReader可以读一行行数据的对象、查询多行数据 SqlDataReader        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region GetReader</span>        public static SqlDataReader GetReader<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetReader<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static SqlDataReader GetReader<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetReader<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static SqlDataReader GetReader<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cmd.ExecuteReader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// 返回单个值        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"cmdText"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>returns<span class="token operator">></span><span class="token operator">&lt;</span>/returns<span class="token operator">></span>        <span class="token comment" spellcheck="true">#region GetScalar</span>        public static object GetScalar<span class="token punctuation">(</span>string cmdText<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetScalar<span class="token punctuation">(</span>cmdText, null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static object GetScalar<span class="token punctuation">(</span>string cmdText, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> GetScalar<span class="token punctuation">(</span>cmdText, CommandType.StoredProcedure, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public static object GetScalar<span class="token punctuation">(</span>string cmdText, CommandType cmdType, SqlParameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parms<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            SqlCommand cmd <span class="token operator">=</span> CreateCommand<span class="token punctuation">(</span>cmdText, cmdType, parms<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> cmd.ExecuteScalar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> ADO.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML解析demo</title>
      <link href="/2019/01/08/xml/"/>
      <url>/2019/01/08/xml/</url>
      
        <content type="html"><![CDATA[<h2 id="创建xml"><a href="#创建xml" class="headerlink" title="创建xml"></a>创建xml</h2><pre class=" language-bash"><code class="language-bash">  static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">{</span>  //1.创建一个XDocument对象      XDocument writeXml <span class="token operator">=</span> new XDocument<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     //2.增加一个根节点      XElement XRoot <span class="token operator">=</span> new XElement<span class="token punctuation">(</span><span class="token string">"WebSites"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      //3.将根节点加到writeXML中      writeXml.Add<span class="token punctuation">(</span>XRoot<span class="token punctuation">)</span><span class="token punctuation">;</span>      //4.写子节点      XElement XeBaidu <span class="token operator">=</span> new XElement<span class="token punctuation">(</span><span class="token string">"WebSite"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      XeBaidu.SetAttributeValue<span class="token punctuation">(</span><span class="token string">"url"</span>, <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      //5.把子节点加到根节点上      //快速添加子节点      XRoot.SetElementValue<span class="token punctuation">(</span><span class="token string">"webSiteCount"</span>,100<span class="token punctuation">)</span><span class="token punctuation">;</span>      XRoot.Add<span class="token punctuation">(</span>XeBaidu<span class="token punctuation">)</span><span class="token punctuation">;</span>      //继续增加子元素增加子标签      XeBaidu.SetElementValue<span class="token punctuation">(</span><span class="token string">"name"</span>, <span class="token string">"笑笑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      XeBaidu.SetElementValue<span class="token punctuation">(</span><span class="token string">"age"</span>, <span class="token string">"19"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      writeXml.Save<span class="token punctuation">(</span><span class="token string">"Web.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h2 id="解析XML"><a href="#解析XML" class="headerlink" title="解析XML"></a>解析XML</h2><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>     XDocument doc <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\订单练习\orders.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     XElement orderElement <span class="token operator">=</span> doc.Root<span class="token punctuation">;</span>     XElement customerElement<span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"CustomerName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     XElement orderNumberElement <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"orderNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     XElement orderItems <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderName <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderCount <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     foreach <span class="token punctuation">(</span>XElement order <span class="token keyword">in</span> orderItems.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span>         <span class="token punctuation">{</span>               orderName.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>               orderCount.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Count"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        Console.WriteLine<span class="token punctuation">(</span>customerElement.Value+<span class="token string">"的订单"</span>+orderNumberElement.Value+<span class="token string">"买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Console.WriteLine<span class="token punctuation">(</span>orderNae<span class="token punctuation">[</span>0<span class="token punctuation">]</span> +orderCount<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>2<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    ////////////////XML 文件<span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>order<span class="token operator">></span>  <span class="token operator">&lt;</span>CustomerName<span class="token operator">></span>小肖<span class="token operator">&lt;</span>/CustomerName<span class="token operator">></span>  <span class="token operator">&lt;</span>orderNumber<span class="token operator">></span>BJ200888<span class="token operator">&lt;</span>/orderNumber<span class="token operator">></span>  <span class="token operator">&lt;</span>items<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电脑"</span> Count<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电视"</span> Count<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"水杯"</span> Count<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>  <span class="token operator">&lt;</span>/items<span class="token operator">></span><span class="token operator">&lt;</span>/order<span class="token operator">></span></code></pre><h2 id="XML序列化"><a href="#XML序列化" class="headerlink" title="XML序列化"></a>XML序列化</h2><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Person per <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per.name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span>        per.age <span class="token operator">=</span> 18<span class="token punctuation">;</span>        Person per1 <span class="token operator">=</span> new Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        per1.name <span class="token operator">=</span> <span class="token string">"dfafd"</span><span class="token punctuation">;</span>        per1.age <span class="token operator">=</span> 12<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list.Add<span class="token punctuation">(</span>per<span class="token punctuation">)</span><span class="token punctuation">;</span>        list.Add<span class="token punctuation">(</span>per1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#region 序列号一般的类</span>        //XmlSerializer xmlSer <span class="token operator">=</span> new XmlSerializer<span class="token punctuation">(</span>typeof<span class="token punctuation">(</span>Person<span class="token punctuation">))</span><span class="token punctuation">;</span>        //using <span class="token punctuation">(</span>FileStream fs <span class="token operator">=</span> File.OpenWrite<span class="token punctuation">(</span><span class="token string">"Person.xml"</span><span class="token punctuation">))</span>        //<span class="token punctuation">{</span>        //    xmlSer.Serialize<span class="token punctuation">(</span>fs, per<span class="token punctuation">)</span><span class="token punctuation">;</span>        //<span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">#endregion</span>        <span class="token comment" spellcheck="true">#region 序列号集合</span>        XmlSerializer xmlser<span class="token operator">=</span>new XmlSerializer<span class="token punctuation">(</span>typeof<span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">))</span><span class="token punctuation">;</span>        using <span class="token punctuation">(</span>FileStream fs <span class="token operator">=</span> File.OpenWrite<span class="token punctuation">(</span><span class="token string">"list.xml"</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>            xmlser.Serialize<span class="token punctuation">(</span>fs, list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#endregion</span>        Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  public  class Person <span class="token punctuation">{</span>        public string name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        public int age <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="studentmessage-xml文件"><a href="#studentmessage-xml文件" class="headerlink" title="studentmessage.xml文件"></a>studentmessage.xml文件</h2><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>student<span class="token operator">></span>  <span class="token operator">&lt;</span>net09<span class="token operator">></span>    <span class="token operator">&lt;</span>preson id<span class="token operator">=</span><span class="token string">"cz001"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>小小<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>22<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>女<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/preson<span class="token operator">></span>    <span class="token operator">&lt;</span>person id<span class="token operator">=</span><span class="token string">"cz002"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>小周<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>21<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>男<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/person<span class="token operator">></span>  <span class="token operator">&lt;</span>/net09<span class="token operator">></span>  <span class="token operator">&lt;</span>net08<span class="token operator">></span>    <span class="token operator">&lt;</span>person id<span class="token operator">=</span><span class="token string">"cx001"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>嘉怡<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>16<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>女<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/person<span class="token operator">></span>    <span class="token operator">&lt;</span>person id<span class="token operator">=</span><span class="token string">"cx002"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>name<span class="token operator">></span>小肖<span class="token operator">&lt;</span>/name<span class="token operator">></span>      <span class="token operator">&lt;</span>age<span class="token operator">></span>18<span class="token operator">&lt;</span>/age<span class="token operator">></span>      <span class="token operator">&lt;</span>sex<span class="token operator">></span>男<span class="token operator">&lt;</span>/sex<span class="token operator">></span>    <span class="token operator">&lt;</span>/person<span class="token operator">></span>      <span class="token operator">&lt;</span>/net08<span class="token operator">></span><span class="token operator">&lt;</span>/student<span class="token operator">></span></code></pre><h2 id="XML加载"><a href="#XML加载" class="headerlink" title="XML加载"></a>XML加载</h2><pre class=" language-bash"><code class="language-bash"> private void btnXml_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //1加载            XDocument docxml <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\XML操作\studentmessage.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //2.获取根节点            XElement xmlRoot <span class="token operator">=</span> docxml.Root<span class="token punctuation">;</span>            //3.把根节点加到TreeView上            TreeNode treeviewroot <span class="token operator">=</span> tvXmlShow.Nodes.Add<span class="token punctuation">(</span>xmlRoot.Name.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //4.递归加载            LoadNodes<span class="token punctuation">(</span>xmlRoot,treeviewroot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //foreach没了，就停止了        private void LoadNodes<span class="token punctuation">(</span>XElement xmlRoot, TreeNode treeviewroot<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            foreach <span class="token punctuation">(</span>XElement ele <span class="token keyword">in</span> xmlRoot.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ele.Elements<span class="token punctuation">(</span><span class="token punctuation">)</span>.Count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>   //绑定的是元素本身                    TreeNode node <span class="token operator">=</span> treeviewroot.Nodes.Add<span class="token punctuation">(</span>ele.Name.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    //如果有属性的话，怎遍历属性                    XAttribute eleAttribute<span class="token operator">=</span> ele.Attribute<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>eleAttribute <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        node.Text +<span class="token operator">=</span> <span class="token string">"{"</span> + eleAttribute.Name + <span class="token string">"="</span> + eleAttribute.Value + <span class="token string">"}"</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    LoadNodes<span class="token punctuation">(</span>ele, node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> TreeNode node <span class="token operator">=</span> treeviewroot.Nodes.Add<span class="token punctuation">(</span>ele.Value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p><img src="/2019/01/08/xml/1.jpg" alt="图1"></p><h2 id="经典案例银行xml"><a href="#经典案例银行xml" class="headerlink" title="经典案例银行xml"></a>经典案例银行xml</h2><h3 id="ytbank-xml"><a href="#ytbank-xml" class="headerlink" title="ytbank.xml"></a>ytbank.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span> <span class="token operator">&lt;</span>CFX<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000001"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"腾讯销售部"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"新浪财务部"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000002"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000003"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000004"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000005"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000006"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000007"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000008"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000009"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000010"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000011"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000012"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000013"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000014"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span>        <span class="token operator">&lt;</span>MSG<span class="token operator">></span>            <span class="token operator">&lt;</span>交易码  val<span class="token operator">=</span><span class="token string">"1000"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>流水号  val<span class="token operator">=</span><span class="token string">"100000000000000015"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>金额  val<span class="token operator">=</span><span class="token string">"1234567890.12"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>付款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款机构  val<span class="token operator">=</span><span class="token string">"1234"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>收款单位账号  val<span class="token operator">=</span><span class="token string">"12345678901234567890"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/MSG<span class="token operator">></span><span class="token operator">&lt;</span>/CFX<span class="token operator">></span></code></pre><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><pre class=" language-bash"><code class="language-bash"> static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        XDocument bankdoc <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\银行bank解析\ytbank.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XElement bankroot <span class="token operator">=</span> bankdoc.Root<span class="token punctuation">;</span>        string businesscode, serialnumber, money, payorganization, payunit,  getorganization, getunit<span class="token punctuation">;</span>        foreach <span class="token punctuation">(</span>XElement bankmsg <span class="token keyword">in</span> bankroot.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>            businesscode <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"交易码"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            serialnumber <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"流水号"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            money <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"金额"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            payorganization <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"付款机构"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            payunit <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"付款单位账号"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            getorganization <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"收款机构"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            getunit <span class="token operator">=</span> bankmsg.Element<span class="token punctuation">(</span><span class="token string">"收款单位账号"</span><span class="token punctuation">)</span>.Attribute<span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"交易码"</span> + businesscode + <span class="token string">"流水号"</span> + serialnumber + <span class="token string">"金额"</span> + money<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"付款机构"</span> + payorganization + <span class="token string">"付款单位账号"</span> + payunit<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"收款机构"</span> + getorganization + <span class="token string">"收款单位账号 "</span> + getunit<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h2 id="订单练习"><a href="#订单练习" class="headerlink" title="订单练习"></a>订单练习</h2><h3 id="orders-xml"><a href="#orders-xml" class="headerlink" title="orders.xml"></a>orders.xml</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span> ?<span class="token operator">></span><span class="token operator">&lt;</span>order<span class="token operator">></span>  <span class="token operator">&lt;</span>CustomerName<span class="token operator">></span>小肖<span class="token operator">&lt;</span>/CustomerName<span class="token operator">></span>  <span class="token operator">&lt;</span>orderNumber<span class="token operator">></span>BJ200888<span class="token operator">&lt;</span>/orderNumber<span class="token operator">></span>  <span class="token operator">&lt;</span>items<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电脑"</span> Count<span class="token operator">=</span><span class="token string">"30"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"电视"</span> Count<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>    <span class="token operator">&lt;</span>orederItem Name<span class="token operator">=</span><span class="token string">"水杯"</span> Count<span class="token operator">=</span><span class="token string">"20"</span><span class="token operator">></span><span class="token operator">&lt;</span>/orederItem<span class="token operator">></span>  <span class="token operator">&lt;</span>/items<span class="token operator">></span><span class="token operator">&lt;</span>/order<span class="token operator">></span></code></pre><h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><pre class=" language-bash"><code class="language-bash">   static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            XDocument doc <span class="token operator">=</span> XDocument.Load<span class="token punctuation">(</span>@<span class="token string">"E:\practice\XML操作\订单练习\orders.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XElement orderElement <span class="token operator">=</span> doc.Root<span class="token punctuation">;</span>            XElement customerElement<span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"CustomerName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XElement orderNumberElement <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"orderNumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            XElement orderItems <span class="token operator">=</span> orderElement.Element<span class="token punctuation">(</span><span class="token string">"items"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderName <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>string<span class="token operator">></span> orderCount <span class="token operator">=</span> new List<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>XElement order <span class="token keyword">in</span> orderItems.Elements<span class="token punctuation">(</span><span class="token punctuation">))</span>                <span class="token punctuation">{</span>                      orderName.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Name"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                      orderCount.Add<span class="token punctuation">(</span>order.Attribute<span class="token punctuation">(</span><span class="token string">"Count"</span><span class="token punctuation">)</span>.Value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>               Console.WriteLine<span class="token punctuation">(</span>customerElement.Value+<span class="token string">"的订单"</span>+orderNumberElement.Value+<span class="token string">"买"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               Console.WriteLine<span class="token punctuation">(</span>orderName<span class="token punctuation">[</span>0<span class="token punctuation">]</span> + orderCount<span class="token punctuation">[</span>0<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>1<span class="token punctuation">]</span>+orderName<span class="token punctuation">[</span>2<span class="token punctuation">]</span>+orderCount<span class="token punctuation">[</span>2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#委托Demo三界面同步</title>
      <link href="/2019/01/08/c-shi-jian-wei-tuo-demo-san-jie-mian-tong-bu/"/>
      <url>/2019/01/08/c-shi-jian-wei-tuo-demo-san-jie-mian-tong-bu/</url>
      
        <content type="html"><![CDATA[<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>委托（delegate）“一个函数赋值给一个委托变量后，调用这个委托等价于调用那个函数<br>委托就是能存放符合签名方法指针的容器</p><ol><li>委托是一种数据类型，引用类型，像类一样（可以声明委托类型变量）</li><li>使用委托的时候必须new一个委托对象，即使看到的代码没有new委托对象，编译器也会在编译时<br>帮我们new赋值给委托的方法，其实是存储在委托对象中的</li><li>委托（在代码中动态嵌入一个方法）使用的步骤：<br>1&gt;定义一个委托类型<br> public delegate void form2delegate();<br>2&gt;声明一个委托变量<br>  form2delegate wd=new form2delegate(方法名);<br>3&gt;调用委托<br>  if(wd !=null){<br> //调用委托<br>   wd();<br>  或wd.Invoke();<br> }</li><li>什么情况下用委托？委托有什么用？<br>1.有一段代码<br>2.变化（当一个类型中需要嵌入一段代码，但是这段代码具有不确定性，是根据使用这个类型的用户来确定代码的，这种情况下就可以在该类型中，使用一个委托，保证在某种情况下调用这个委托，<br>这时，用户将对应的方法传递给该委托，则就会调用这个方法）</li></ol><p>&emsp;自定义控件中的事件会大量使用到委托（写事件的时候会用到委托）<br>//可以把静态方法或私有方法赋值到委托变量，赋值后能使用到该委托变量的地方<br>就能使用该方法<br>–匿名方法： myDelegate md=delegate(){ console…};<br>调用： md();<br> public delegate void myDelegate();<br>–事件  ：委托可以实现事件所有功能时代<br>事件就是委托封装了add和remove方法，不会让别人捣乱 本质还是委托<br>定义事件之前要定义委托;</p><pre class=" language-bash"><code class="language-bash">public delegate void myTriplechick<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>public event myTriplechick Tirpclick<span class="token punctuation">;</span></code></pre><p>事件只能使用+=或-=赋值，避免使用=赋值时覆盖问题<br>/<br>委托和事件区别：委托是类型，事件是对象，相当于一个委托的变量（可以理解为对委托变量的封装（私有委托）），<br>委托可以在外部调用，可以用=号赋值，事件只能在定义事件的内部来调用，只能用+=或-=赋值,委托可以实现件的所有功能，事件相对于对委托做了一个限制。<br>/<br>事件作用与委托变量一样。<br>–程序集（exe,dll）:类型元数据（代码中每一个类型和成员），程序集元数据（程序集清单），IL代码，资源文件<br>可以通过Assmblyinfo.cs文件来定义</p><pre class=" language-bash"><code class="language-bash">namespace 委托<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        public delegate void DGSay<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//声明委托类        public delegate void DGsay2<span class="token punctuation">(</span>string msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            DGSay saydelegate <span class="token operator">=</span> new DGSay<span class="token punctuation">(</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>//方法放进去            saydelegate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DGsay2 say2delegat <span class="token operator">=</span> new DGsay2<span class="token punctuation">(</span>say2<span class="token punctuation">)</span><span class="token punctuation">;</span>            say2delegat<span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void say<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>           Console.WriteLine<span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void say2<span class="token punctuation">(</span>string msg<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三界面同步Demo"><a href="#三界面同步Demo" class="headerlink" title="三界面同步Demo"></a>三界面同步Demo</h2><h3 id="委托当参数"><a href="#委托当参数" class="headerlink" title="委托当参数"></a>委托当参数</h3><pre class=" language-bash"><code class="language-bash">         //定义委托，它定义了可以代表的方法的类型      public delegate void GreetingDelegate<span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">;</span>      class Program <span class="token punctuation">{</span>          private static void EnglishGreeting<span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 Console.WriteLine<span class="token punctuation">(</span>”Morning, ” + name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> Www~          private static void ChineseGreeting<span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 Console.WriteLine<span class="token punctuation">(</span>”早上好, ” + name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>           //注意此方法，它接受一个GreetingDelegate类型的方法作为参数          private static void GreetPeople<span class="token punctuation">(</span>string name, GreetingDelegate MakeGreeting<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 MakeGreeting<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 GreetPeople<span class="token punctuation">(</span>”Jimmy Zhang”, EnglishGreeting<span class="token punctuation">)</span><span class="token punctuation">;</span>                 GreetPeople<span class="token punctuation">(</span>”张子阳”, ChineseGreeting<span class="token punctuation">)</span><span class="token punctuation">;</span>                 Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="定义事件"><a href="#定义事件" class="headerlink" title="定义事件"></a>定义事件</h3><pre class=" language-bash"><code class="language-bash">namespace 最简单的自定义事件<span class="token punctuation">{</span>     /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>     /// 事件发送类     /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>     class Class1     <span class="token punctuation">{</span>         public delegate void UserRequest<span class="token punctuation">(</span>object sender,EventArgs e<span class="token punctuation">)</span><span class="token punctuation">;</span> //定义委托         public event UserRequest OnUserRequest<span class="token punctuation">;</span> //定义一个委托类型的事件         public void run<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             while<span class="token punctuation">(</span>true<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 if<span class="token punctuation">(</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">"a"</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>//事件监听                     OnUserRequest<span class="token punctuation">(</span>this,new EventArgs<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //产生事件                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>     /// 事件接收类     /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>     class Class2     <span class="token punctuation">{</span>         static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>         <span class="token punctuation">{</span>             Class1 c1 <span class="token operator">=</span> new Class1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             c1.OnUserRequest +<span class="token operator">=</span> new Class1.UserRequest<span class="token punctuation">(</span>c1_OnUserRequest<span class="token punctuation">)</span><span class="token punctuation">;</span> //委托实例化后绑定到事件             c1.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         private static void c1_OnUserRequest<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>         <span class="token punctuation">{</span>//事件处理方法             Console.WriteLine<span class="token punctuation">(</span><span class="token string">"/t你触发了事件！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span>namespace ConsoleApplication2<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            person p <span class="token operator">=</span> new person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p.hello +<span class="token operator">=</span> new person.say<span class="token punctuation">(</span>p_hello<span class="token punctuation">)</span><span class="token punctuation">;</span>            p.run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        static void p_hello<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    class person <span class="token punctuation">{</span>        public delegate void say<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        public event say hello<span class="token punctuation">;</span>        public void run<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            hello<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>  </code></pre><h3 id="Form1"><a href="#Form1" class="headerlink" title="Form1"></a>Form1</h3><pre class=" language-bash"><code class="language-bash">   private void btnForm2_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form2 form2 <span class="token operator">=</span> new Form2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form2.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void btnForm3_Click<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form3 form3 <span class="token operator">=</span> new Form3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            form3.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public delegate void ColorDelegate<span class="token punctuation">(</span>string color<span class="token punctuation">)</span><span class="token punctuation">;</span>        public static ColorDelegate ColorChange <span class="token operator">=</span> null<span class="token punctuation">;</span>        private void cbColor_SelectedIndexChanged<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ColorChange <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ColorChange<span class="token punctuation">(</span>this.cbColor.Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><h3 id="Form2"><a href="#Form2" class="headerlink" title="Form2"></a>Form2</h3><pre class=" language-bash"><code class="language-bash">   private void Form2_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form1.ColorChange +<span class="token operator">=</span> delegate<span class="token punctuation">(</span>string color<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                switch <span class="token punctuation">(</span>color<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"red"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Red<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"black"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Black<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"blue"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Blue<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="Form3"><a href="#Form3" class="headerlink" title="Form3"></a>Form3</h3><pre class=" language-bash"><code class="language-bash">  private void Form3_Load<span class="token punctuation">(</span>object sender, EventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Form1.ColorChange +<span class="token operator">=</span> delegate<span class="token punctuation">(</span>string color<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                switch <span class="token punctuation">(</span>color<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">case</span> <span class="token string">"red"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Red<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"black"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Black<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> <span class="token string">"blue"</span><span class="token keyword">:</span> this.BackColor <span class="token operator">=</span> Color.Blue<span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流的使用</title>
      <link href="/2019/01/03/io-liu-de-shi-yong/"/>
      <url>/2019/01/03/io-liu-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="IO流的一般使用"><a href="#IO流的一般使用" class="headerlink" title="IO流的一般使用"></a>IO流的一般使用</h2><pre class=" language-bash"><code class="language-bash">string ce<span class="token operator">=</span><span class="token string">"测试"</span><span class="token punctuation">;</span>File.WriteAllText<span class="token punctuation">(</span>@<span class="token string">"12.txt"</span>,ce,Encoding.UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span> //Path类string s1 <span class="token operator">=</span> @<span class="token string">"C:\a"</span><span class="token punctuation">;</span>string s2 <span class="token operator">=</span> <span class="token string">"b.txt"</span><span class="token punctuation">;</span>//combine处理末尾\问题string s3 <span class="token operator">=</span> Path.Combine<span class="token punctuation">(</span>s1, s2<span class="token punctuation">)</span><span class="token punctuation">;</span>Console.WriteLine<span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>string g1 <span class="token operator">=</span> @<span class="token string">"c:\windows\test\a.txt"</span><span class="token punctuation">;</span>// 1.获取文件名Console.WriteLine<span class="token punctuation">(</span>Path.GetFileName<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>// 2.获取目录Console.WriteLine<span class="token punctuation">(</span>Path.GetDirectoryName<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//3.获取文件名不包括扩展名Console.WriteLine<span class="token punctuation">(</span>Path.GetFileNameWithoutExtension<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//4.获取扩展名Console.WriteLine<span class="token punctuation">(</span>Path.GetExtension<span class="token punctuation">(</span>g1<span class="token punctuation">))</span><span class="token punctuation">;</span>//5.获取完整路劲<span class="token punctuation">..</span>/获取父目录Console.WriteLine<span class="token punctuation">(</span>Path.GetFullPath<span class="token punctuation">(</span><span class="token string">"12.txt"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//6.获取当前用户临时目录Console.WriteLine<span class="token punctuation">(</span>Path.GetTempPath<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//7.获取一个随机的文件名（也可以用作文件夹名）Console.WriteLine<span class="token punctuation">(</span>Path.GetRandomFileName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//8.获取一个随机的文件名，并在临时目录下创建这个文件Console.WriteLine<span class="token punctuation">(</span>Path.GetTempFileName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span></code></pre><h2 id="StreamWriter字符串生成js文件"><a href="#StreamWriter字符串生成js文件" class="headerlink" title="StreamWriter字符串生成js文件"></a>StreamWriter字符串生成js文件</h2><pre class=" language-bash"><code class="language-bash"> string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> string path <span class="token operator">=</span> <span class="token string">"D:/newfdc"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string FileName <span class="token operator">=</span><span class="token string">"hello.js"</span><span class="token punctuation">;</span> Encoding code <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> StreamWriter sw <span class="token operator">=</span> new StreamWriter<span class="token punctuation">(</span>Path.Combine<span class="token punctuation">(</span>path, FileName<span class="token punctuation">)</span>, false, code<span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Write<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sw.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="file-copy使用"><a href="#file-copy使用" class="headerlink" title="file.copy使用"></a>file.copy使用</h2><pre class=" language-bash"><code class="language-bash"> string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span> string path <span class="token operator">=</span> <span class="token string">"D:/newfdc"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string FileName <span class="token operator">=</span><span class="token string">"hello.js"</span><span class="token punctuation">;</span> Encoding code <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> string nowpath <span class="token operator">=</span> Path.Combine<span class="token punctuation">(</span>path, FileName<span class="token punctuation">)</span><span class="token punctuation">;</span>//现有文件 string path2 <span class="token operator">=</span> <span class="token string">"E:/new"</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path2<span class="token punctuation">))</span> <span class="token punctuation">{</span>     Directory.CreateDirectory<span class="token punctuation">(</span>path2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> string name <span class="token operator">=</span> <span class="token string">"copy.js"</span><span class="token punctuation">;</span> File.Copy<span class="token punctuation">(</span>nowpath,Path.Combine<span class="token punctuation">(</span>path2,name<span class="token punctuation">)</span>,true<span class="token punctuation">)</span><span class="token punctuation">;</span> Console.WriteLine<span class="token punctuation">(</span><span class="token string">"复制成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Console.ReadKey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><pre class=" language-bash"><code class="language-bash">  <span class="token keyword">if</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span>  <span class="token punctuation">{</span>      path <span class="token operator">=</span> System.Configuration.ConfigurationSettings.AppSettings<span class="token punctuation">[</span><span class="token string">"jsupload"</span><span class="token punctuation">]</span>.ToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Directory.Exists<span class="token punctuation">(</span>path<span class="token punctuation">))</span>      <span class="token punctuation">{</span>          Directory.CreateDirectory<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      File.Copy<span class="token punctuation">(</span>localfileName, Path.Combine<span class="token punctuation">(</span>path, ftpfileName<span class="token punctuation">)</span>, true<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h2 id="StreamWriter和reader"><a href="#StreamWriter和reader" class="headerlink" title="StreamWriter和reader"></a>StreamWriter和reader</h2><pre class=" language-bash"><code class="language-bash"> string mobile <span class="token operator">=</span> <span class="token string">"13628611111"</span><span class="token punctuation">;</span> StreamWriter writer <span class="token operator">=</span> new StreamWriter<span class="token punctuation">(</span><span class="token string">"SMS.txt"</span>, true, Encoding.UTF8<span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Write<span class="token punctuation">(</span>mobile<span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Write<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> writer.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> StreamReader reader <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span><span class="token string">"SMS.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string read<span class="token operator">=</span> reader.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span>int count <span class="token operator">=</span> 0<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>read.IndexOf<span class="token punctuation">(</span>mobile, i<span class="token punctuation">)</span> <span class="token operator">>=</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span> i<span class="token operator">=</span>read.IndexOf<span class="token punctuation">(</span>mobile,i<span class="token punctuation">)</span>+1<span class="token punctuation">;</span>  count++<span class="token punctuation">;</span> <span class="token punctuation">}</span>Console.WriteLine<span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Serializable序列号案例"><a href="#Serializable序列号案例" class="headerlink" title="Serializable序列号案例"></a>Serializable序列号案例</h2><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>public class ClassToSerialize<span class="token punctuation">{</span>    public int <span class="token function">id</span> <span class="token operator">=</span> 100<span class="token punctuation">;</span>    public string name <span class="token operator">=</span> <span class="token string">"Name"</span><span class="token punctuation">;</span>    <span class="token punctuation">[</span>NonSerialized<span class="token punctuation">]</span>    public string Sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>public void SerializeNow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ClassToSerialize c <span class="token operator">=</span> new ClassToSerialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     FileStream fileStream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"c:\\temp.dat"</span>, FileMode.Create<span class="token punctuation">)</span><span class="token punctuation">;</span>     BinaryFormatter b <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     b.Serialize<span class="token punctuation">(</span>fileStream, c<span class="token punctuation">)</span><span class="token punctuation">;</span>     fileStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> public void DeSerializeNow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ClassToSerialize c <span class="token operator">=</span> new ClassToSerialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     c.Sex <span class="token operator">=</span> <span class="token string">"kkkk"</span><span class="token punctuation">;</span>     FileStream fileStream <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"c:\\temp.dat"</span>, FileMode.Open, FileAccess.Read, FileShare.Read<span class="token punctuation">)</span><span class="token punctuation">;</span>     BinaryFormatter b <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     c <span class="token operator">=</span> b.Deserialize<span class="token punctuation">(</span>fileStream<span class="token punctuation">)</span> as ClassToSerialize<span class="token punctuation">;</span>       Response.Write<span class="token punctuation">(</span>c.name<span class="token punctuation">)</span><span class="token punctuation">;</span>     Response.Write<span class="token punctuation">(</span>c.Sex<span class="token punctuation">)</span><span class="token punctuation">;</span>     fileStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>//////////////////////////////<span class="token punctuation">[</span>Serializable<span class="token punctuation">]</span>public class XRentManager<span class="token punctuation">{</span>   public XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>       m_DicMyTraffics <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       m_DicRenteds <span class="token operator">=</span> new Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//出租集合   <span class="token punctuation">}</span>   ///字典集合：保存可以出租的车   private Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> m_DicMyTraffics<span class="token punctuation">;</span>   internal Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> DicMyTraffics   <span class="token punctuation">{</span>        get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DicMyTraffics<span class="token punctuation">;</span> <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    /// 获取可以出租的汽车集合    private Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> m_DicRenteds<span class="token punctuation">;</span>   /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>   /// 汽车入库或者出租的车回库   /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>   internal Dictionary<span class="token operator">&lt;</span>string, TrafficInfo<span class="token operator">></span> DicRenteds   <span class="token punctuation">{</span>     get <span class="token punctuation">{</span> <span class="token keyword">return</span> m_DicRenteds<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#region 反序列化</span> FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"Students.bin"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>fs.Length <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>     m_RM <span class="token operator">=</span> bf.Deserialize<span class="token punctuation">(</span>fs<span class="token punctuation">)</span> as XRentManager<span class="token punctuation">;</span>//反序列化 <span class="token punctuation">}</span> bf <span class="token operator">=</span> null<span class="token punctuation">;</span> fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   //正序列化 XRentManager m_RM <span class="token operator">=</span> new XRentManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#region 序列化</span> FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span><span class="token string">"Students.bin"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> BinaryFormatter bf <span class="token operator">=</span> new BinaryFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//创建序列化 bf.Serialize<span class="token punctuation">(</span>fs, m_RM<span class="token punctuation">)</span><span class="token punctuation">;</span>//保存 bf <span class="token operator">=</span> null<span class="token punctuation">;</span> fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#endregion</span></code></pre><h2 id="Direcotry类（操作目录）"><a href="#Direcotry类（操作目录）" class="headerlink" title="Direcotry类（操作目录）"></a>Direcotry类（操作目录）</h2><pre class=" language-bash"><code class="language-bash">//1.创建一些目录Directory.CreateDirectory<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//2.获取当前目录下的所有的直接子目录<span class="token punctuation">(</span>文件夹<span class="token punctuation">)</span>第二个参数包含<span class="token string">"*I*"</span>，第三个参数，是当前目录还是所有搜索string <span class="token punctuation">[</span><span class="token punctuation">]</span> dirs<span class="token operator">=</span> Directory.GetDirectories<span class="token punctuation">(</span>@<span class="token string">"c:\");foreach(string item in dirs ){    Console.WriteLine(item);}//3.获取当前目录下的所有文件string[] files = Directory.GetFiles(@"</span>c:\<span class="token string">");foreach (string item in files) {   Console.WriteLine(item);}//4.判断是否有这个目录返boolDirectory.Exists(@"</span>C:\test1<span class="token string">");//5.删目录Directory.Delete(@"</span>C:\test1<span class="token string">",true);//6.移动，剪切，移动到同一个地方，改名字，就是重名Directory.Move(@"</span>C:\a.txt<span class="token string">", @"</span>C:\a\a.txt"<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><pre class=" language-bash"><code class="language-bash">    //1.判断文件是否存在？2.删除DeleteFile.Exists<span class="token punctuation">(</span>@<span class="token string">"C:\1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //2.读取也有对应的写入File.ReadAllLines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File.ReadAllBytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>File.ReadAllText<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="文件流-FileStream"><a href="#文件流-FileStream" class="headerlink" title="文件流 FileStream"></a>文件流 FileStream</h2><pre class=" language-bash"><code class="language-bash"> //1.创建一个文件流 FileStream fs <span class="token operator">=</span> new FileStream<span class="token punctuation">(</span>@<span class="token string">"c:\txt.txt"</span>, FileMode.OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span> //2.读或写,每次读取的内容都有放在缓冲区中 byte<span class="token punctuation">[</span><span class="token punctuation">]</span> byts<span class="token operator">=</span>new byte<span class="token punctuation">[</span>fs.Length<span class="token punctuation">]</span><span class="token punctuation">;</span> //设置、字节 //第一个参数：文件中的字节读取到该数组中，0是从第0个索引开始放，第三个参数数最多读取的字长 fs.Read<span class="token punctuation">(</span>byts, 0, byts.Length<span class="token punctuation">)</span><span class="token punctuation">;</span> //文件流要关闭和释放 fs.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> fs.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebClient抓取网页代码</title>
      <link href="/2019/01/03/webclient-zhua-qu-wang-ye-dai-ma/"/>
      <url>/2019/01/03/webclient-zhua-qu-wang-ye-dai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="WebClient类"><a href="#WebClient类" class="headerlink" title="WebClient类"></a>WebClient类<br></h2><p>&emsp;WebClient类位于System.Net命名空间下，WebClient类提供向URI标识的任何本地、Intranet或Internet资源发送数据以及从这些资源接收数据的公共方法。<br>源代码:</p><pre class=" language-bash"><code class="language-bash">///引用命名空间using System.IO<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>PageUrl <span class="token operator">=</span> <span class="token string">"http://www.webkaka.com"</span><span class="token punctuation">;</span> //需要获取源代码的网页WebClient <span class="token function">wc</span> <span class="token operator">=</span> new WebClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 创建WebClient实例提供向URI 标识的资源发送数据和从URI 标识的资源接收数据wc.Credentials <span class="token operator">=</span> CredentialCache.DefaultCredentials<span class="token punctuation">;</span> // 获取或设置用于对向 Internet 资源的请求进行身份验证的网络凭据。///方法一：Encoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> pageData <span class="token operator">=</span> wc.DownloadData<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> // 从资源下载数据并返回字节数组。ContentHtml.Text <span class="token operator">=</span> enc.GetString<span class="token punctuation">(</span>pageData<span class="token punctuation">)</span><span class="token punctuation">;</span> // 输出字符串<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件</code></pre><pre class=" language-bash"><code class="language-bash">/// 方法二：/// ***************代码开始**********Stream resStream <span class="token operator">=</span> wc.OpenRead<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> //以流的形式打开URLEncoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312StreamReader sr <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span>resStream,enc<span class="token punctuation">)</span><span class="token punctuation">;</span> //以指定的编码方式读取数据流ContentHtml.Text <span class="token operator">=</span> sr.ReadToEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //输出<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件 resStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>/// **************代码结束********/// wc.Dispose<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="WebRequest类"><a href="#WebRequest类" class="headerlink" title="WebRequest类"></a>WebRequest类</h2><p>&emsp;WebRequest类是.NET Framework中“请求/响应”模型的abstract基类，用于访问Internet数据。使用WebRequest类请求/响应模型的应用程序可以用协议不可知的方式从Internet请求数据，在这种方式下，应用程序处理WebRequest类的实例，而协议特定的子类则执行请求的具体细节，请求从应用程序发送到某个特定的URI，如服务器上的网页。URI从一个为应用程序注册的WebRequest子类列表中确定要创建的适当子类。注册WebRequest子类通常是为了处理某个特定的协议（如HTTP或FTP），但是也可以注册它以处理对特定服务器或服务器上的路径的请求。<br><br>&emsp;WebRequest类中最常用的是Create方法，Create方法用于为指定的URI方案初始化新的WebRequest实例。</p><pre class=" language-bash"><code class="language-bash">　　语法：public static WebRequest Create<span class="token punctuation">(</span>　 string requestUriString<span class="token punctuation">)</span></code></pre><p>　　参数：requestUriString：标识Internet资源的URI。<br><br>　　返回值：特定URI方案的WebRequest子类。<br><br>　　注意：Create方法将运行时确定的WebRequest类的子类作为与requestUri最接近的注册匹配项返回。例如，当以http://开头的URI在requestUri中传递时，由Create返回一个HttpWebRequest。如果改为传递以file://开头的URI，则Create方法将返回FileWebRequest实例。.NET Framework包括对http://和file:// URI方案的支持。</p><h2 id="WebResponse类"><a href="#WebResponse类" class="headerlink" title="WebResponse类"></a>WebResponse类</h2><p>&emsp;WebResponse类是abstract基类，协议特定的响应类从该抽象基类派生。应用程序可以使用 WebResponse类的实例以协议不可知的方式参与请求和响应事务，而从WebResponse类派生的协议特定的类携带请求的详细信息。<br>　　在WebResponse类中最常用的是GetResponse方法，GetResponse方法用于当在子类中被重写时，返回对 Internet 请求的响应<br>　　语法：<br>　　public virtual WebResponse GetResponse ()<br>　　返回值：包含对Internet请求的响应的WebResponse。</p><pre class=" language-bash"><code class="language-bash">源代码///引用命名空间using System.IO<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>PageUrl <span class="token operator">=</span> <span class="token string">"http://www.webkaka.com"</span><span class="token punctuation">;</span> //需要获取源代码的网页WebRequest request <span class="token operator">=</span> WebRequest.Create<span class="token punctuation">(</span>PageUrl<span class="token punctuation">)</span><span class="token punctuation">;</span> //WebRequest.Create方法，返回WebRequest的子类HttpWebRequestWebResponse response <span class="token operator">=</span> request.GetResponse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //WebRequest.GetResponse方法，返回对 Internet 请求的响应Stream resStream <span class="token operator">=</span> response.GetResponseStream<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //WebResponse.GetResponseStream 方法，从 Internet 资源返回数据流。 Encoding enc <span class="token operator">=</span> Encoding.GetEncoding<span class="token punctuation">(</span><span class="token string">"GB2312"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 如果是乱码就改成 utf-8 / GB2312StreamReader sr <span class="token operator">=</span> new StreamReader<span class="token punctuation">(</span>resStream, enc<span class="token punctuation">)</span><span class="token punctuation">;</span> //命名空间:System.IO。 StreamReader 类实现一个 TextReader <span class="token punctuation">(</span>TextReader类，表示可读取连续字符系列的读取器<span class="token punctuation">)</span>，使其以一种特定的编码从字节流中读取字符。 ContentHtml.Text <span class="token operator">=</span> sr.ReadToEnd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //输出<span class="token punctuation">(</span>HTML代码<span class="token punctuation">)</span>，ContentHtml为Multiline模式的TextBox控件resStream.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sr.Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asp.Net页面生命周期</title>
      <link href="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/"/>
      <url>/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Asp-Net页面生命周期"><a href="#Asp-Net页面生命周期" class="headerlink" title="Asp.Net页面生命周期"></a>Asp.Net页面生命周期</h1><h2 id="1-什么是Asp-Net页面生命周期"><a href="#1-什么是Asp-Net页面生命周期" class="headerlink" title="1.什么是Asp.Net页面生命周期"></a>1.什么是Asp.Net页面生命周期</h2><p>&emsp; 当我们在浏览器地址栏中输入网址，回车查看页面时，这时会向服务器端（IIS）发送一个request请求，服务器就会判断发送过来的请求页面，  完全识别 HTTP 页面处理程序类后，ASP.NET 运行时将调用处理程序的 ProcessRequest 方法来处理请求，来创建页面对象。通常情况下，无需更改此方法的实现，因为它是由 Page 类提供的。接下来被创建页面对象的ProcessRequest方法使页面经历了各个阶段：初始化、加载视图状态信息和回发数据、加载页面的用户代码以及执行回发服务器端事件。之后，页面进入显示模式：收集更新的视图状态，生成 HTML 代码并随后将代码发送到输出控制台。最后，卸载页面，并认为请求处理完毕。其中页面对象ProcessRequest方法 完成的这一系列事件的处理过程就是Asp.Net页面生命周期。</p><h2 id="2-了解Asp-Net页面生命周期的好处"><a href="#2-了解Asp-Net页面生命周期的好处" class="headerlink" title="2.了解Asp.Net页面生命周期的好处"></a>2.了解Asp.Net页面生命周期的好处</h2><p>&emsp;  了解个掌握ASP.NET页面生命周期是非常必要的，这有助于我们更加灵活的控制页面，以我们需要的方式编程开发。ASP.NET页运行时，此页会经历一个又一个的事件链，每个事件链中执行不同的行为，这所有的行为共同组成我们所需要的页面。了解了生命周期也更有助于我们对程序调试中发生问题的地方的定位。</p><h2 id="3-Asp-Net页面生命周期简化版流程"><a href="#3-Asp-Net页面生命周期简化版流程" class="headerlink" title="3.Asp.Net页面生命周期简化版流程"></a>3.Asp.Net页面生命周期简化版流程</h2><p>页面初始化          Page_Init<br>加载View State      LoadViewState<br>回发数据处理      LoadPostData<br>页面加载          Page_Load<br>回发通知          RaisePostDataChangedEvent<br>回发事件处理     RaisePostBackEvent<br>页面预渲染       Page_PreRender<br>保存             viewstate SaveViewState<br>Page渲染         Page_Render<br>Page 卸载       Page_UnLoad<br>&emsp;要是详细写太多了也不好理解，简化版看图：<br><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/4.jpg" alt=""></p><h2 id="4-什么地方用到了Asp-Net-页面生命周期"><a href="#4-什么地方用到了Asp-Net-页面生命周期" class="headerlink" title="4.什么地方用到了Asp.Net 页面生命周期"></a>4.什么地方用到了Asp.Net 页面生命周期</h2><p>1  第一张图片从全局说明从客户端发出一个Request请求，服务器windows内核中的HTTP.SYS组件接收该请求开始到IIS处理完该请求并响应到客户端结束。<br><br>2  第二张图片为图1中Http处理管线的详细步骤<br><br>3  第三张图片为图2Http处理管线中调用处理程序(HttpHandler,  此处为Page对象)的详细生命周期过程。</p><p><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/1.jpg" alt="图1"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/2.png" alt="图2"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/3.png" alt="图3"></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http响应码</title>
      <link href="/2019/01/02/http-xiang-ying-ma/"/>
      <url>/2019/01/02/http-xiang-ying-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Http请求"><a href="#1-Http请求" class="headerlink" title="1.Http请求"></a>1.Http请求</h2><p>&emsp;浏览器 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 先看本地电脑是否存在百度服务器的IP，如果存在直接 发送请求报文，如果不存在,则会先请求 DNS服务器，通过映射关系找到 百度 服务器的 IP地址返回给浏览器，浏览器保存IP ，并通过流的方式向 百度服务器 发送 转化为byte[]的请求报文。</p><h2 id="2-TTP协议响应码"><a href="#2-TTP协议响应码" class="headerlink" title="2.TTP协议响应码"></a>2.TTP协议响应码<br></h2><p>&emsp;    “200” : OK <br><br>&emsp;    “302” : Found 重定向<br><br>&emsp;    “400” : Bad Request 错误请求,发出错误的不符合Http协议的请求<br><br>&emsp;    “403” : Forbidden 禁止<br><br>&emsp;    “404” : Not Found 未找到<br><br>&emsp;    “500” : Internal Server Error 服务器内部错误。<br><br>&emsp;    “503” : Service U navailable 一般是访问人数过多<br></p><ul><li>200段是成功；300段需要对请求做进一步处理；400段表示客户端请求错误；500段是服务器错误。</li></ul><h3 id="HTTP-常用ContentType"><a href="#HTTP-常用ContentType" class="headerlink" title="HTTP 常用ContentType"></a>HTTP 常用ContentType<br></h3><pre><code>type/html(默认是这个); image/gif;  image/jpeg; text/plain（普通文本）</code></pre><h3 id="http其他-（是无状态的）"><a href="#http其他-（是无状态的）" class="headerlink" title="http其他 （是无状态的）"></a>http其他 （是无状态的）<br></h3><p>http不会记得”上个请求是什么”，所以哪怕是同一个页面中的JS/CSS/JPG也都需要重复提交。</p><p>网页中如果有图片，CSS,JS等外部文件的话，这些请求都会在一个单独请求中,也就是说并不是页面的所有内容都在一个请求中完成,而是每个资源都是一个单独请求。</p><h2 id="3-服务器端"><a href="#3-服务器端" class="headerlink" title="3.服务器端"></a>3.服务器端</h2><p>&emsp;服务器端 分 内核模式 和用户模式 ， 内核模式为windows底层的一些东西内核模式(Kernel Model)中的 HTTP.SYS(无法看到，他实现了一个插件的机制，自己不处理程序，只负责接收请求，只负责接收请求，让其他exe等程序处理)监听80端口(监听的socket)，识别请求的协议：一般为HTTP，识别请求的端口,把请求发送给具体的应用程序(IIS安装后就在注册表里注册了)。<br>这时候还会再创建一个新的端口 来负责和请求的客户端通信(称为代理Socket或通信Socket)</p><ol><li>w3svc服务(托管)和 inetInfo.exe进程 和起来就是IIS<br>请求通过HTTP.SYS 交给 w3svc服务(svchost.exe),来查看INETINFO.exe<br>访问 IIS进程中的元数据(包含扩展注册信息) 查下请求后缀的文件应如何处理，</li></ol><p>如果是静态网页(.htm,.html等)会先通过内核模块再通过通信端口发送回去。</p><p>&emsp;如果是动态网页（.aspx）会交给扩展 aspnet_isapi.dll(非托管的代码写的,非托管和托管代码的桥梁)处理，然后aspnet_isapi会负责启动ApplicationDomain，请求交给（通过windows系统的句柄，句柄是操作系统的一些标识符） ISApiRuntime，在ISapiRuntime内部，通过ecb指针创建了一个HttpWorkRequest对象（就是简单的对报文的一个封装）然后将HttpWorkRequest对象 交给HttpRunTime PR方法，在PR方法内部又将HttpWorkRequest对象封装成了HttpContext(也就是把请求报文封装成了Request对象和Response对象)再通过HttpApplicationFactory创建一个具体的Application实例<br>然后请求随着 Application管道一次一次的流，在管道里面有19个公开的事件(共23)，请求留到Application的PR方法的时候，帮我们一次性的把19个事件都调用了，二者19个事件又允许我们开发人员自己注册响应方法，可以过滤响应报文(对报文的处理)第8个事件时会根据HttpContext中的RequestURL(请求的地址)会创建最终处理当前请求的Handler实例<br>在11个事件和12个事件之间会调用创建的Handler实例的PR方法</p><p>ISAPIRuntime.PR()通过ECB创建HttpWorkRequest对象，将请求报文放到其中</p><p>Http.Runtime.PR()创建HttpContext对象(包含HttpRequest对象和HttpResponse对象，分析浏览器的请求报文,然后将请求报文的数据存入HttpContext里的Resquest属性中)<br>HttpApplicationFactory 获取一个HttpApplication实例<br>HttpApplication执行管道23个事件,19个事公开给开发人员的(插件机制) ，负责创建和执行页面</p>]]></content>
      
      
      <categories>
          
          <category> Web原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>orcale总结</title>
      <link href="/2019/01/02/orcale-zong-jie/"/>
      <url>/2019/01/02/orcale-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="orcale-导出和导入数据"><a href="#orcale-导出和导入数据" class="headerlink" title="orcale 导出和导入数据"></a>orcale 导出和导入数据</h2><p>有些网友报错，一般都是没有dba权限，授权：</p><pre class=" language-bash"><code class="language-bash">sqlplus / as sysdba进入后直接创建用户并授予dba的权限例如：sqlplus / as sysdbaSQL*Plus: Release 11.1.0.7.0 - Production on 星期二 3月 22 09:10:48 2011Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1982, 2008, Oracle. All rights reserved.连接到:Oracle Database 11g Enterprise Edition Release 11.1.0.7.0 - ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing optionsSQL<span class="token operator">></span> create user testmin identified by testmin<span class="token punctuation">;</span>用户已创建。SQL<span class="token operator">></span> grant dba to testmin<span class="token punctuation">;</span>授权成功。SQL<span class="token operator">></span></code></pre><pre class=" language-bash"><code class="language-bash">数据库导出功能：1 将数据库TEST完全导出,用户名system 密码manager 导出到D:\daochu.dmp中exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp full<span class="token operator">=</span>y2 将数据库中system用户与sys用户的表导出exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp owner<span class="token operator">=</span><span class="token punctuation">(</span>system,sys<span class="token punctuation">)</span>3 将数据库中的表table1 、table2导出exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp tables<span class="token operator">=</span><span class="token punctuation">(</span>table1,table2<span class="token punctuation">)</span>4 将数据库中的表table1中的字段filed1以<span class="token string">"00"</span>打头的数据导出exp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp tables<span class="token operator">=</span><span class="token punctuation">(</span>table1<span class="token punctuation">)</span> query<span class="token operator">=</span>\" where filed1 like <span class="token string">'00%'</span>\"</code></pre><p>数据的导入</p><pre class=" language-bash"><code class="language-bash">1 将D:\daochu.dmp 中的数据导入 TEST数据库中。imp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp ignore<span class="token operator">=</span>y上面可能有点问题，因为有的表已经存在，然后它就报错，对该表就不进行导入。在后面加上 ignore<span class="token operator">=</span>y 就可以了。2 将d:\daochu.dmp中的表table1 导入imp system/manager@TEST file<span class="token operator">=</span>d:\daochu.dmp tables<span class="token operator">=</span><span class="token punctuation">(</span>table1<span class="token punctuation">)</span></code></pre><h2 id="orcale设置权限"><a href="#orcale设置权限" class="headerlink" title="orcale设置权限"></a>orcale设置权限</h2><p>Oracle 创建普通用户，并赋予权限</p><pre class=" language-bash"><code class="language-bash">1.采用sys or system / manager as sysdba<span class="token punctuation">;</span> 连接数据库。2.创建普通用户konglin: create user konglin identified by pwd_oracle<span class="token punctuation">;</span>删除用户, drop user konglin<span class="token punctuation">;</span>3.授予用户登录数据库的权限： grant create session to konglin<span class="token punctuation">;</span>4.授予用户操作表空间的权限：<span class="token operator">&lt;</span>br<span class="token operator">></span>grant unlimited tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant create tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant alter tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant drop tablespace to konglin<span class="token punctuation">;</span><span class="token operator">&lt;</span>br<span class="token operator">></span>grant manage tablespace to konglin<span class="token punctuation">;</span>5.授予用户操作表的权限：grant create table to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有create index权限, alter table, drop table权限<span class="token punctuation">)</span>6.授予用户操作视图的权限:grant create view to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有alter view, drop view权限<span class="token punctuation">)</span>7.授予用户操作触发器的权限：grant create trigger to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有alter trigger, drop trigger权限<span class="token punctuation">)</span>8.授予用户操作存储过程的权限：grant create procedure to konglin<span class="token punctuation">;</span><span class="token punctuation">(</span>包含有alter procedure, drop procedure 和function 以及 package权限<span class="token punctuation">)</span>9.授予用户操作序列的权限：grant create sequence to konglin<span class="token punctuation">;</span> <span class="token punctuation">(</span>包含有创建、修改、删除以及选择序列<span class="token punctuation">)</span>10.授予用户回退段权限：grant create rollback segment to konglin<span class="token punctuation">;</span>grant alter rollback segment to konglin<span class="token punctuation">;</span>grant drop rollback segment to konglin<span class="token punctuation">;</span>11.授予用户同义词权限：grant create synonym to konglin<span class="token punctuation">;</span><span class="token punctuation">(</span>包含drop synonym权限<span class="token punctuation">)</span>grant create public synonym to konglin<span class="token punctuation">;</span>grant drop public synonym to konglin<span class="token punctuation">;</span>12.授予用户关于用户的权限：grant create user to konglin<span class="token punctuation">;</span>grant alter user to konglin<span class="token punctuation">;</span>grant become user to konglin<span class="token punctuation">;</span>grant drop user to konglin<span class="token punctuation">;</span>13.授予用户关于角色的权限：grant create role to konglin<span class="token punctuation">;</span>14.授予用户操作概要文件的权限grant create profile to konglin<span class="token punctuation">;</span>grant alter profile to konglin<span class="token punctuation">;</span>grant drop profile to konglin<span class="token punctuation">;</span>15.允许从sys用户所拥有的数据字典表中进行选择grant <span class="token keyword">select</span> any dictionary to konglin<span class="token punctuation">;</span></code></pre><h2 id="sqlplus创建表基本操作"><a href="#sqlplus创建表基本操作" class="headerlink" title="sqlplus创建表基本操作"></a>sqlplus创建表基本操作</h2><pre class=" language-bash"><code class="language-bash">最高用户（系统管理员）可以删别人用户 drop userSQL<span class="token operator">></span> create user xiaoming identified by 123<span class="token punctuation">;</span> 创建用户SQL<span class="token operator">></span> grant connect to xiaoming<span class="token punctuation">;</span>授权SQL<span class="token operator">></span> grant <span class="token keyword">select</span> on emp to xiaoming；授权给小明SQL<span class="token operator">></span>show user 查看当前用户SQL<span class="token operator">></span>conn sysstem/manager 连接用户 账户/密码 连接SQL<span class="token operator">></span>对表user没权限 alter user 数据库用户名 <span class="token function">quota</span> unlimited on USERS<span class="token punctuation">;</span>SQL<span class="token operator">></span>GrantCreate session,create table,select any table,update any table,insert anytable,delete any table To user_namealter user zy20081 <span class="token function">quota</span> unlimited on USERS  空间操作权限 导入表给所有权限disc<span class="token punctuation">[</span>onnect<span class="token punctuation">]</span>断开连接passw<span class="token punctuation">[</span>ord<span class="token punctuation">]</span> 用户名 修改密码sys/system可以修改别人密码<span class="token keyword">exit</span> 退出文件操作命令sql<span class="token operator">></span>START d:\a.sql 运行一个脚本SQL<span class="token operator">></span>edit d:\a.sql 编辑。。。。。。截取中间内容。。。。。。。。。SQL<span class="token operator">></span> spool d:\bb.sql 建立SQL<span class="token operator">></span> <span class="token keyword">select</span> * from 表SQL<span class="token operator">></span> spool off<span class="token punctuation">;</span> 保存 。。。。。。。。。。。。。SQL<span class="token operator">></span> show linesize 设置显示行的宽度 默认是80个字符SQL<span class="token operator">></span>set linesize 90SQL<span class="token operator">></span> <span class="token keyword">set</span> pagesize 2<span class="token punctuation">;</span>设置分页。。。。。。。。。。。。。。。。。。。。。SQL<span class="token operator">></span> create user xiaoming identified by m123 创建账户和密码密码以字母开头 SQL<span class="token operator">></span>drop user xiaoming 删除用户</code></pre><h2 id="日志基本管理"><a href="#日志基本管理" class="headerlink" title="日志基本管理"></a>日志基本管理</h2><pre class=" language-bash"><code class="language-bash">1.强制日志切换（forcing log switches）alter system switch logfile<span class="token punctuation">;</span>2.强制执行检查点（forcing checkpoints）alter system checkpoint<span class="token punctuation">;</span>3.增加一个重做日志组 （adding online redo log groups）alter fatabases add logfile <span class="token punctuation">[</span> group 4 <span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token string">'/disk3/log4a.rdo'</span>,<span class="token string">'/disk4/log4b.rdo'</span><span class="token punctuation">)</span> size 1M<span class="token punctuation">;</span>4.增加一个重做日志文件<span class="token punctuation">(</span> adding online redo log memebers <span class="token punctuation">)</span>alter databases add logfile member<span class="token string">'/disk3/log1b.rdo'</span> to group 1,<span class="token string">'/disk4/log2b.rdo'</span> to group 2<span class="token punctuation">;</span>5.改变重做日志文件名 （changes the name of the online redo logfile）alter databases <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'c:/oracle/oradata/oradb/redo01.log'</span>to <span class="token string">'c:/oracle/oracdata/redo01.log'</span><span class="token punctuation">;</span>6.删除重做日志 （drio online redo log groups）alter database drop logfile groupp 3<span class="token punctuation">;</span>7.删除重做日志组（drop online redo log members）alter database drop logfile member <span class="token string">'c:/oracle/readata/red01.log'</span><span class="token punctuation">;</span>8.清空重做日志（clearing online redo log files）alter database <span class="token function">clear</span> <span class="token punctuation">[</span>unarchived<span class="token punctuation">]</span> logfile <span class="token string">'c:/oracle/log2a.rdo'</span><span class="token punctuation">;</span>9.使用logminer分析重做日志文件（using logminer analyzing redo logfiles）a.  <span class="token keyword">in</span> the init.ora specify utl_file_dir <span class="token operator">=</span> <span class="token string">' '</span>b.  execute dbms_logmnr_d.build<span class="token punctuation">(</span><span class="token string">'oradb.ora'</span>,<span class="token string">'c:\oracle\oradb\log'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c.  execute dbms_logmnr_add_logfile<span class="token punctuation">(</span><span class="token string">'c:\oracle\oradata\oradb\redo01.log'</span>,dbms_logmnr.new<span class="token punctuation">)</span><span class="token punctuation">;</span>d.  execute dbms_logmnr.add_logfile<span class="token punctuation">(</span><span class="token string">'c:\oracle\oradata\oradb\redo02.log'</span>,dbms_logmnr.addfile<span class="token punctuation">)</span><span class="token punctuation">;</span>e.  execute dbms_logmnr.start_logmnr<span class="token punctuation">(</span>dictfilename<span class="token operator">=</span><span class="token operator">></span><span class="token string">'c:\oracle\oradb\log\oradb.ora'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f.  <span class="token keyword">select</span> * from <span class="token function">v</span><span class="token variable">$logmnr_contents</span><span class="token punctuation">(</span>v<span class="token variable">$logmnr_dictionary</span>,v<span class="token variable">$logmnr_parameters</span> <span class="token function">v</span><span class="token variable">$logmnr_logs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g.  execute dbms_logmnr.end_logmnr<span class="token punctuation">;</span></code></pre><h2 id="表空间管理"><a href="#表空间管理" class="headerlink" title="表空间管理"></a>表空间管理</h2><pre class=" language-bash"><code class="language-bash">1.创建表空间（create tablespaces）create tablespace table_name datafile <span class="token string">'c:\oracle\oradata\file1.dbf'</span>size 100Mminimum extent 550k <span class="token punctuation">[</span>logging/nologging<span class="token punctuation">]</span>default storage <span class="token punctuation">(</span>initial 500k next 500k maxextents 500 pctinccease 0<span class="token punctuation">)</span><span class="token punctuation">[</span>online/offline<span class="token punctuation">]</span><span class="token punctuation">[</span>permanent/temporary<span class="token punctuation">]</span><span class="token punctuation">[</span>extent_management_clause<span class="token punctuation">]</span>2.创建本地管理的表空间<span class="token punctuation">(</span> locally managed tabalespace <span class="token punctuation">)</span>create tablespace user_data datafile <span class="token string">'c:\oracle\oradata\user_data001.dbf'</span>size 500Mextent management local uniform size 10M<span class="token punctuation">;</span>3. 创建临时表空间（temporary tablespace）create temporary tablespace temp tempfile <span class="token string">'c:\oracle\oradata\temppp01.dbf'</span>size 500Mextent managementlocal uniform size 10M<span class="token punctuation">;</span>4.改变表空间的存储参数（change the storage setting）alter tablespace app_data minimum extent 2M<span class="token punctuation">;</span>oralter tablespace app_date default storage<span class="token punctuation">(</span> initial 2M next 2M maxextents 999<span class="token punctuation">)</span><span class="token punctuation">;</span>5.使表空间离线或连线（taking tablespace offline or online）alter tablespace app_data offline<span class="token punctuation">;</span>oralter tablespace app_data online<span class="token punctuation">;</span>6.设置表空间为只读、可写模式（read_only tablespace）alter tablespace app_data <span class="token function">read</span> only <span class="token operator">|</span> <span class="token function">write</span><span class="token punctuation">;</span>7.删除表空间（droping tablespace）drop tablespace app_data including contents<span class="token punctuation">;</span>8.允许数据文件自动扩张（enableing automatic extension of data files）alter tablespace app_data add datafile <span class="token string">'c:\oracle\oradata\app_data01.dbf'</span>size 200Mautoextend on next 10Mmaxsize 500M<span class="token punctuation">;</span>9.手动改变数据文件大小（change the size fo data files manually）alter database datafile <span class="token string">'c:\oracle\oradata\app_data.dbf'</span>resize 200M<span class="token punctuation">;</span>10.改变表空间中的数据文件（mocing data files:alter tablespace）alter tablespace app_data <span class="token function">rename</span> datafile <span class="token string">'c:\oracle\oradata\app_data.dbf'</span> to <span class="token string">'c:\oracle\app_data.dbf'</span><span class="token punctuation">;</span>11.修改数据库中的数据文件（moving data files:alter database）alter database <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'c:\oracle\oradata\app_data.dbf'</span>to <span class="token string">'c:\oracle\app_data.dbf'</span><span class="token punctuation">;</span></code></pre><h2 id="表管理"><a href="#表管理" class="headerlink" title="表管理"></a>表管理</h2><pre class=" language-bash"><code class="language-bash">1.创建表create table table_name <span class="token punctuation">(</span>    column datatype,    <span class="token punctuation">[</span>column datatype<span class="token punctuation">]</span>    <span class="token punctuation">..</span><span class="token punctuation">..</span>.  <span class="token punctuation">)</span><span class="token punctuation">;</span>tablespace tablespace_name <span class="token punctuation">[</span> ppctfree integer <span class="token punctuation">]</span> <span class="token punctuation">[</span> pctused integer <span class="token punctuation">]</span><span class="token punctuation">[</span> initrans integer <span class="token punctuation">]</span><span class="token punctuation">[</span> maxtrans integer <span class="token punctuation">]</span>storage<span class="token punctuation">(</span> initial 200k next 200k ppctincrease 0 maxextents 50<span class="token punctuation">)</span> <span class="token punctuation">[</span> logging <span class="token operator">|</span> nologging <span class="token punctuation">]</span>  <span class="token punctuation">[</span> cache <span class="token operator">|</span> nocaahe <span class="token punctuation">]</span>2.复制一个已存在的表（copy an existing table）create table table_name <span class="token punctuation">[</span> logging <span class="token operator">|</span> nologging <span class="token punctuation">]</span> as subquery3.创建一个临时表（create temporary table）create global temporary table xay_temp as <span class="token keyword">select</span> * from xay<span class="token punctuation">;</span>on commint preserve rows/on commit delete rows4.pctfree 和 pctused 参数计算公式pctfree <span class="token operator">=</span> <span class="token punctuation">(</span>average row size - initial row size<span class="token punctuation">)</span>*100/average row sizepctused <span class="token operator">=</span> 100-pctfree-<span class="token punctuation">(</span>average row size * 100/available data space<span class="token punctuation">)</span>    pctfree <span class="token keyword">:</span> 指定表内每个数据块中空间的百分比。pctfree的值必须介于0和99之间。如果为零，表示可以通过插入新行来填充整个块。　　　　　　　　缺省值为10.此值表示每个块中保留着10%的空间，用于更新现有的行以及插入新行，每个块最多可以填充到90%    pctused <span class="token keyword">:</span> 指定为表内每个数据块的已用空间的最小百分比。如果一个块的已用空间低于pctused，则可在该块中插入行。pctused的值介于0和99之间的整数，缺省值为40.结合pctfree 和 pctused 就可以确定将新行插入到现有数据块中，还是插入到新块中。这两个参数值的和必须小于或等于100.使用这两个参数可以更有效地利用表内的空间。设置 pctfree 和pctused    pctfree 值越高，可为数据库块内的更新提供的空间就越大。如果表存在下面两种情况，则应设置一个更高的值：？某些列最初为null，后来更新为某个值？ 　　　　　　某些列由于更新，大小可能增加pctfree的值越高，块密度就越低，即每个块容纳的行数就越少。上面的公式确保块中有足够的空间供行增长使用。    pctused 以确保只有在具备足够空间来容纳一个平均大小的行时才将块返回到空闲列表中。　　　　　　如果空闲列表中的某个块没有足够的空间来插入一行，oracle服务器将查找空闲列表中的下个块、直到找到具备足够空间的块或者到达列表的末尾，这种线性扫描才会结束。　　　　　　使用给定的公式可以增加找到具有所有需空闲空间的块的概率，从而缩短扫描空闲列表时间。注：可以使用 analyze table 命令估算平均行大小的值。注：oracle9i “自动段空间管理” 功能可替代 pctused、freelists 和 freelist       groups.5.改变存储和块利用率参数（change storage and block utilization parameter）alter table table_name pctfree<span class="token operator">=</span>30 pctused<span class="token operator">=</span>50 storage<span class="token punctuation">(</span>next 500k minextents 2 maxextents 100<span class="token punctuation">)</span><span class="token punctuation">;</span>6.手工分配区间（extents）<span class="token punctuation">(</span>manually allxoating extents<span class="token punctuation">)</span>alter table table_name allocate extent <span class="token punctuation">(</span>size 500k datafile <span class="token string">'c:/oracle/data.dbf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>7.改变表的所属表空间（move tablespace）alter table employee move tablespace <span class="token function">users</span><span class="token punctuation">;</span>8.释放表中未用空间（deallocate of unused space）alter table table_name deallocate unused <span class="token punctuation">[</span> keep integer <span class="token punctuation">]</span>9.截断表（truncate）（truncate a table ）truncate table table_name<span class="token punctuation">;</span>截断一个表将删除表中所有行，从而释放已使用的空间。对应的索引将被截断注：truncate table 不是DML语句，是DDL语句。另外truncate与delete的区别是吗，delete不释放空间，truncate释放空间。10.删除表（drop a table）drop table table_name <span class="token punctuation">[</span>cascade constraints<span class="token punctuation">]</span><span class="token punctuation">;</span>11.删除列（drop a cloumn）alter table table_name drop column commentd cascade constraints checkppoint 1000<span class="token punctuation">;</span>oralter table table_name drop columns <span class="token keyword">continue</span><span class="token punctuation">;</span>12.表示某一列为未使用（unused）（mark a column sa unused）alter table table_name <span class="token keyword">set</span> unused column comments xascade constraints<span class="token punctuation">;</span>oralter table table_name dropp unused columns checkpoint 1000<span class="token punctuation">;</span>oralter table orders drop columns <span class="token keyword">continue</span> checkpoint 1000 data_dictionary <span class="token keyword">:</span> dba_unused_col_tabs<span class="token punctuation">;</span>除将列从表中删除以外，还可以先将列标记为 “未使用”，以后再删除。因为没有删除数据，所以此操作不回收磁盘空间，    因而具有速度比较快的优点。被标为 “未使用” 的列可在以后系统活动较少时从表中删除。     未使用的列就像不属于表一样。查询时看不到未使用列中的数据。此外，在执行 DESCRIBE 命令时，    也不会显示这些列的名称和数据类型。用户可以添加与未使用的列同名的新列。     如果想删除同一表中的两列，则可先将列设置为 “未使用” 然后再删除。在删除两列时，    表中的所有行都会更新两次；但如果将这些列设置为 “未使用” 然后再删除，则所有的行仅更新一次。</code></pre><h2 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h2><pre class=" language-bash"><code class="language-bash">1.创建一个基于函数的索引（creating function-based indexes）create index summit.item_quantity on summit.item<span class="token punctuation">(</span>quantity-quantity_shipped<span class="token punctuation">)</span><span class="token punctuation">;</span>基于函数的索引（function-based indexes）:如果在表中要建立索引的一列或多列上使用了函数或表达式，则创建的是基于函数的索引。基于函数的索引预先计算函数或表达式的值，病将结果存储在索引中。可以将基于函数的索引创建为B树或位图索引。2.创建一个B树索引（create a B-tree index）creae <span class="token punctuation">[</span> unique <span class="token punctuation">]</span> index index_name on table_name <span class="token punctuation">(</span>column,<span class="token punctuation">..</span> asc/desc<span class="token punctuation">)</span> tablespace tablespace_name <span class="token punctuation">[</span> pctfree integer <span class="token punctuation">]</span> <span class="token punctuation">[</span> initrans integer <span class="token punctuation">]</span><span class="token punctuation">[</span> maxtrans integer <span class="token punctuation">]</span><span class="token punctuation">[</span> logging <span class="token operator">|</span> nologging <span class="token punctuation">]</span><span class="token punctuation">[</span> nosort <span class="token punctuation">]</span>storage<span class="token punctuation">(</span>initial 200k next 200k pctincrease 0 maxextents 50<span class="token punctuation">)</span><span class="token punctuation">;</span>B树：平衡二叉树，oracle中用的最多的索引模式，使用与取值唯一性高的情况。只有两层，非叶级、叶级（指针所在级）3.索引中pctfree参数计算公式pctfree<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>maximum number of rows-initial number of rows<span class="token punctuation">)</span>*100/maximum number of rows4.创建一个反向键索引（creating reverse key indexes）create unique index xay_id on xay<span class="token punctuation">(</span>a<span class="token punctuation">)</span> reverse pctfree 30 storage <span class="token punctuation">(</span>initial 200k next 200k pctincrease 0 maxextents 50<span class="token punctuation">)</span> tablespace indx<span class="token punctuation">;</span>5.创建位图索引（creating reverse key indexes）create unique index say_id on xay<span class="token punctuation">(</span>a<span class="token punctuation">)</span> reverse pctfree 30 storage <span class="token punctuation">(</span>initial 200k next 200k pctincrease 0 maxextents 50<span class="token punctuation">)</span> tablespace indx<span class="token punctuation">;</span>在下列情况中，位图索引比 B 树索引更有利：     ?        当表包含数百万行且键列的基数很低（即，该列中重复的值很多）时。例如，对于包含护照记录的表的性别列和婚姻状况列而言，位图索引比 B 树索引更适合     ?        当查询经常使用涉及 OR 运算符的多个 WHERE 条件组合时     ?        当键列上存在只读或很少的更新操作时     （位图索引适用于取值的唯一性很低的情况）6.改变索引的存储参数（change storage parameter of index）alter index xay_id storage <span class="token punctuation">(</span> next 400k maxextents 100 <span class="token punctuation">)</span>7.为索引分配空间（allocating index space）alter index xay_id allocate extent <span class="token punctuation">(</span>size 200k datafile <span class="token string">'c:/oracle/index.dbf'</span><span class="token punctuation">)</span>8. alter index xay_id deallocate unused<span class="token punctuation">;</span>手动分配索引空间：     在表上进行频繁的插入操作前，可能需要向索引添加区。添加区可防止索引动态扩展并导致性能降低。     （其中指定的数据文件一定是索引所在表空间的数据文件）</code></pre><h2 id="约束管理"><a href="#约束管理" class="headerlink" title="约束管理"></a>约束管理</h2><pre class=" language-bash"><code class="language-bash">1.将约束定义为立即（immediate）或延迟（deferred）（define constraints as immediate or deferred）alter session <span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>immediate/deferred/default<span class="token punctuation">;</span><span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span> constraint_name/all immediate/deferred<span class="token punctuation">;</span><span class="token keyword">set</span> constraints 语句用于将特定事务的约束设置为 deferred 或 immediate.可以使用此语句设置约束名称列表或约束的模式。<span class="token keyword">set</span> constraints模式将一直持续到事务处理完成或者另一个set constraints语句重置模式<span class="token keyword">set</span> constraints语句还包含将约束设置为immediate或deferred的子句set constraints.此命令缺省为设置所有（all） 可延迟的约束（不能指定约束名称列表）。alter session <span class="token keyword">set</span> constraints 语句仅适用于当前会话2.删除表或表空间时连带删除其上的外检（约束）drop table table_name cascade constraintsordrop tablespace tablespace_name including contents cascade constraints在删除父表之前，必须先删除外键。可以使用以下一条语句同事执行这两个操作：drop table table_name cascade constraints在未删除或禁用外键之前无法（truncated）父表。在删除包含附表的表空间之前，必须先删除外键。可使用下列命令完成该操作：drop tablespace tablespace_name including contentscascade constraints如果从父表中删除行时没有使用 delete cascade 选项，oracle 服务器必须确保子表中的行不包含相应的外键。同样，仅当子行中不包含旧键值时，才允许更新父键。如果字表的外键上没有索引，则oracle服务器索引子表并禁止更改以确保引用完整性。如果表上有索引，则通过锁定索引项并避免子表上有更具限制性的锁来维护引用完整性。如果必须从不同的事务处理同时更新两个表，则在外键列上创建索引。3.在创建表时定义约束（define constraints <span class="token keyword">while</span> create a table ）create table  xay<span class="token punctuation">(</span>id number<span class="token punctuation">(</span>7<span class="token punctuation">)</span> constraint xay_id pprimary key deferrable using index storage<span class="token punctuation">(</span>initial 100k next 100k <span class="token punctuation">)</span> tablespace indx<span class="token punctuation">)</span><span class="token punctuation">;</span>primary key /unique /references table<span class="token punctuation">(</span>column<span class="token punctuation">)</span> ／check4.启用当前禁用的约束（enable constraints）alter table xay <span class="token function">enable</span> novalidate constraint xay_id<span class="token punctuation">;</span>启用novalidate:对于当前已有索引的 primary key 和 unique 约束，启用novalidate 约束比启用validate约束要快的多，这是应为，如果使用该选项启用约束，则不要求锁定表。这种方法适合表上有许多DML活动的情况，如在oltp环境中。    但是，如果需要创建索引，使用这中启用约束的方法并不能比enable validate带来更多的好处，因为oracle服务器在建立索引时锁定表。5.启用约束（enable constraints）alter table xay <span class="token function">enable</span> validate constraint xay_id<span class="token punctuation">;</span></code></pre><h2 id="约束管理-1"><a href="#约束管理-1" class="headerlink" title="约束管理"></a>约束管理</h2><pre class=" language-bash"><code class="language-bash">1.将约束定义为立即（immediate）或延迟（deferred）（define constraints as immediate or deferred）alter session <span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span>immediate/deferred/default<span class="token punctuation">;</span><span class="token keyword">set</span> constraint<span class="token punctuation">[</span>s<span class="token punctuation">]</span> constraint_name/all immediate/deferred<span class="token punctuation">;</span><span class="token keyword">set</span> constraints 语句用于将特定事务的约束设置为 deferred 或 immediate.可以使用此语句设置约束名称列表或约束的模式。<span class="token keyword">set</span> constraints模式将一直持续到事务处理完成或者另一个set constraints语句重置模式<span class="token keyword">set</span> constraints语句还包含将约束设置为immediate或deferred的子句set constraints.此命令缺省为设置所有（all） 可延迟的约束（不能指定约束名称列表）。alter session <span class="token keyword">set</span> constraints 语句仅适用于当前会话2.删除表或表空间时连带删除其上的外检（约束）drop table table_name cascade constraintsordrop tablespace tablespace_name including contents cascade constraints在删除父表之前，必须先删除外键。可以使用以下一条语句同事执行这两个操作：drop table table_name cascade constraints在未删除或禁用外键之前无法（truncated）父表。在删除包含附表的表空间之前，必须先删除外键。可使用下列命令完成该操作：drop tablespace tablespace_name including contentscascade constraints如果从父表中删除行时没有使用 delete cascade 选项，oracle 服务器必须确保子表中的行不包含相应的外键。同样，仅当子行中不包含旧键值时，才允许更新父键。如果字表的外键上没有索引，则oracle服务器索引子表并禁止更改以确保引用完整性。如果表上有索引，则通过锁定索引项并避免子表上有更具限制性的锁来维护引用完整性。如果必须从不同的事务处理同时更新两个表，则在外键列上创建索引。3.在创建表时定义约束（define constraints <span class="token keyword">while</span> create a table ）create table  xay<span class="token punctuation">(</span>id number<span class="token punctuation">(</span>7<span class="token punctuation">)</span> constraint xay_id pprimary key deferrable using index storage<span class="token punctuation">(</span>initial 100k next 100k <span class="token punctuation">)</span> tablespace indx<span class="token punctuation">)</span><span class="token punctuation">;</span>primary key /unique /references table<span class="token punctuation">(</span>column<span class="token punctuation">)</span> ／check4.启用当前禁用的约束（enable constraints）alter table xay <span class="token function">enable</span> novalidate constraint xay_id<span class="token punctuation">;</span>启用novalidate:对于当前已有索引的 primary key 和 unique 约束，启用novalidate 约束比启用validate约束要快的多，这是应为，如果使用该选项启用约束，则不要求锁定表。这种方法适合表上有许多DML活动的情况，如在oltp环境中。    但是，如果需要创建索引，使用这中启用约束的方法并不能比enable validate带来更多的好处，因为oracle服务器在建立索引时锁定表。5.启用约束（enable constraints）alter table xay <span class="token function">enable</span> validate constraint xay_id<span class="token punctuation">;</span></code></pre><h2 id="加载（load）数据"><a href="#加载（load）数据" class="headerlink" title="加载（load）数据"></a>加载（load）数据</h2><pre class=" language-bash"><code class="language-bash">1.使用insert语句从另一张表中“直接加载”数据到新表（loading data using direct_load insert）insert //*+append*/into emp nologging<span class="token keyword">select</span> * from emp_old<span class="token punctuation">;</span>2.使用sql*loader加载数据（using sql*loader）sqlldr scott/tiger \control <span class="token operator">=</span> ulcase6.ctl \log <span class="token operator">=</span> ulcase6.log direct <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><h2 id="重整数据"><a href="#重整数据" class="headerlink" title="重整数据"></a>重整数据</h2><pre class=" language-bash"><code class="language-bash">1.使用export导出数据（using export）<span class="token variable">$exp</span> scott/tiger tables<span class="token punctuation">(</span>dept,emp<span class="token punctuation">)</span> file<span class="token operator">=</span>c:\emp.dmp log<span class="token operator">=</span>exp.log compress<span class="token operator">=</span>n direct<span class="token operator">=</span>y2.使用import导入数据（using impport）alter tablespace sales_ts <span class="token function">read</span> only<span class="token punctuation">;</span><span class="token variable">$expp</span> sys/<span class="token punctuation">..</span>  file<span class="token operator">=</span>xay.dmp transpport_tablespace<span class="token operator">=</span>y tablespace<span class="token operator">=</span>sales_ts triggers<span class="token operator">=</span>n constraints<span class="token operator">=</span>n<span class="token variable">$copy</span> datafile<span class="token variable">$imp</span> sys/<span class="token punctuation">..</span> file<span class="token operator">=</span>xay.dmp transpport_tablespppace<span class="token operator">=</span>y datafiles<span class="token operator">=</span><span class="token punctuation">(</span>/disk/sles01.dbf,/disk2/sles02.dbf<span class="token punctuation">)</span>alter tablespace sales_ts <span class="token function">read</span> <span class="token function">write</span><span class="token punctuation">;</span>4.checking transport <span class="token keyword">set</span>DNMS_tts.transport_set_check<span class="token punctuation">(</span>ts_list <span class="token operator">=</span><span class="token operator">></span><span class="token string">'sales_ts'</span> <span class="token punctuation">..</span>,incl_constraints<span class="token operator">=</span><span class="token operator">></span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>在表transport_set_violations中查看dbms_tts.isselfcontained 为true 是，表示自包含</code></pre><h2 id="管理口令及相关资源"><a href="#管理口令及相关资源" class="headerlink" title="管理口令及相关资源"></a>管理口令及相关资源</h2><pre class=" language-bash"><code class="language-bash">1.修改用户账号、解锁及口令（controlling account lock and password）alter user jumcky identified by oracle account unlock<span class="token punctuation">;</span>2.user_privided password <span class="token keyword">function</span>function_name<span class="token punctuation">(</span>userid <span class="token keyword">in</span> varchar2<span class="token punctuation">(</span>30<span class="token punctuation">)</span>,password <span class="token keyword">in</span> varchar2<span class="token punctuation">(</span>30<span class="token punctuation">)</span>,old_password <span class="token keyword">in</span> varchar2<span class="token punctuation">(</span>30<span class="token punctuation">))</span> <span class="token keyword">return</span> boolean3.创建概要文件：设置口令参数（create a profile <span class="token keyword">:</span> password setting）create profile grace_5 limit failed_login_attempts 3password_lock_time unlimited password_life_time 30password_reuse_time 30 password_verify_function verify_functionpassword_grace_time 5<span class="token punctuation">;</span>4.修改概要文件（altering a profile）alter profile default limitfailed_lofin_attemppts 3password_life_time 60<span class="token punctuation">;</span>5.删除概要文件（drop a profile）drop profile grace_5 <span class="token punctuation">[</span>cascade<span class="token punctuation">]</span><span class="token punctuation">;</span>6.创建概要文件：设置资源限制（create a profile <span class="token keyword">:</span> resource limit）create profile developer_prof limit sessions_per_user 2cpu_per_session 10000 idle_time 60 connect_time 480<span class="token punctuation">;</span>7.view <span class="token operator">=</span><span class="token operator">></span>resource_cost <span class="token keyword">:</span> alter resource cost dba_users,dba_profiles8.允许资源限制（enable resource limits）alter system <span class="token keyword">set</span> resource_limit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><pre class=" language-bash"><code class="language-bash">1.创建用户（数据库认真方式）（create a user <span class="token keyword">:</span> database authentication）create user juncky identified by oracle default tablespace <span class="token function">users</span> temporary tablespace temp <span class="token function">quota</span> 10m/unlimited on data password  expire <span class="token punctuation">[</span> account  lock <span class="token operator">|</span> unock <span class="token punctuation">]</span> <span class="token punctuation">[</span> profile profilename <span class="token operator">|</span> default <span class="token punctuation">]</span><span class="token punctuation">;</span>2.修改用户的表空间限额（change user <span class="token function">quota</span> on tablespace）alter user juncky <span class="token function">quota</span> 0 on <span class="token function">users</span><span class="token punctuation">;</span>3.删除用户（drop  a user ）drop user juncky <span class="token punctuation">[</span> cascade <span class="token punctuation">]</span><span class="token punctuation">;</span>4.监控用户的视图（monitor user）view：dba_users, dba_ts_quotas</code></pre><h2 id="管理权限"><a href="#管理权限" class="headerlink" title="管理权限"></a>管理权限</h2><pre class=" language-bash"><code class="language-bash">1.系统权限（managing privileges）view <span class="token operator">=</span><span class="token operator">></span>system_privilege_map ,dba_sys_privs,session_privs2.授权系统权限（grant system privilege）grant create session,create table to managers<span class="token punctuation">;</span>orgrant create sessionto scott with admin option<span class="token punctuation">;</span>with admin option can gran grant or revoke privilege from any user or role<span class="token punctuation">;</span>3.sysdba和sysoper的权限（sysdba and sysoper privileges:）sysoper:startup,shtdown,alter database <span class="token function">open</span> <span class="token operator">|</span> mount,alter database backup controlfile,alter tablespacesysdba:sysoper privileges with admin option,create database,recover database <span class="token keyword">until</span>4.口令文件成员视图（password <span class="token function">file</span> members:）view:<span class="token operator">=</span>v<span class="token variable">$pwfile_users</span>5.07_dictionary_accessibility <span class="token operator">=</span> <span class="token boolean">true</span>restriction access to view or tables <span class="token keyword">in</span> other schema6.撤销系统权限（revoke system privilege）revoke create table from karen<span class="token punctuation">;</span>orrevoke create session from scott<span class="token punctuation">;</span>7.授权对象权限（grant object privilege）grant execute on dbms_pipe to public<span class="token punctuation">;</span>grant update<span class="token punctuation">(</span>first_name,salary<span class="token punctuation">)</span> on employee to karen with grant option<span class="token punctuation">;</span>8.显示对象权限的视图（display object privilege）view <span class="token operator">=</span><span class="token operator">></span>dba_tab_privs,dba_col_privs9.撤销用户的对象权限（revoke object privilege）revoke execute on dbms_pipe from scott <span class="token punctuation">[</span> cascade constraints <span class="token punctuation">]</span><span class="token punctuation">;</span>10.审计记录视图（audit record view）sys.aud$11.保护审计线索（protecting the audit trail）audit delete on sys.aud$ by access<span class="token punctuation">;</span>保护审计线索：应保护审计线索，以防添加，修改或删除审计信息。发布以下，命令：audit delete on sys.aud$ by access<span class="token punctuation">;</span>可防止审计线索未经授权即被删除<span class="token punctuation">;</span>只有DBA才拥有delete_catalog_role角色12.语句审计（statement auditing）audit user<span class="token punctuation">;</span>13.权限审计（privilege auditing）audit <span class="token keyword">select</span> any table by summit by access<span class="token punctuation">;</span>权限审计：该种审计执行操作应具有的相应系统权限进行选择性审计，如audit create any trigger. 可以设置权限审计对数据库中的所选用户或每个用户进行审计。14.方案对象审计（schema object auditing）sudit lock on summit.employee by access whenever successful<span class="token punctuation">;</span>方案对象审计：该种审计对待特定方案对象上的特定语句进行选择性审计，如 audit <span class="token keyword">select</span> on  hr.employees.方案对象审计始终适用于所有数据库用户。15.审计选项视图（view audit option）view <span class="token operator">=</span><span class="token operator">></span>all_def_audit_opts,dba_stmt_audit_opts,dba_priv_audit_opts,dba_obj_audit_opts16.设计结果视图（view audit result）view<span class="token operator">=</span><span class="token operator">></span>dba_audit_trail,dba_audit_exists,dba_audit_object,dba_audit_session,dba_audit_statement</code></pre><h2 id="管理角色"><a href="#管理角色" class="headerlink" title="管理角色"></a>管理角色</h2><pre class=" language-bash"><code class="language-bash">1.创建角色（create roles）create role sales_clerk<span class="token punctuation">;</span>orcreate role hr_clerk identified by bonus<span class="token punctuation">;</span>orcreate role hr_manager identified externally<span class="token punctuation">;</span>2.修改角色（modify role）alter role sales_clerk identified by commission<span class="token punctuation">;</span>oralter role hr_clerk identified externally<span class="token punctuation">;</span>oralter role hr_manager not identified<span class="token punctuation">;</span>3.分配角色（assigning roles）grant sales_clerk to scott<span class="token punctuation">;</span>oegrant hr_clerk to hr_manager<span class="token punctuation">;</span>orgrant hr_manager to scott with admin option<span class="token punctuation">;</span>4.建立缺省角色（establish default role）alter user scott default role hr_clerk,sales_clerk<span class="token punctuation">;</span>oralter user scott default role all<span class="token punctuation">;</span>oralter user scott default fole all except hr_clerk<span class="token punctuation">;</span>oralter user scott default role none<span class="token punctuation">;</span>5.允许和禁止角色（enable and disable roles）<span class="token keyword">set</span> role hr_clerk<span class="token punctuation">;</span>or<span class="token keyword">set</span> role sales_clerk identified by commission<span class="token punctuation">;</span>or<span class="token keyword">set</span> role all except sales_clerk<span class="token punctuation">;</span>or<span class="token keyword">set</span> role none<span class="token punctuation">;</span>6.撤销用户的角色（remove role from user）revoke sales_clerk from scott<span class="token punctuation">;</span>orrevoke hr_manager from public <span class="token punctuation">;</span>7.删除角色（remove role）drop role hr_manager<span class="token punctuation">;</span>8.显示角色信息的视图（display role information）view:<span class="token operator">=</span><span class="token operator">></span>dba_roles.dba_role_privs,role_role_privs,dba_sys_privs,role_sys_privs,role_tab_privs,session_roles</code></pre><h2 id="备份和恢复"><a href="#备份和恢复" class="headerlink" title="备份和恢复"></a>备份和恢复</h2><pre class=" language-bash"><code class="language-bash">1.备份恢复用相关视图<span class="token function">v</span><span class="token variable">$sga</span>,v<span class="token variable">$instance</span>,v<span class="token variable">$process</span>,v<span class="token variable">$bgprocess</span>,v<span class="token variable">$database</span>,v<span class="token variable">$datafile</span>,v<span class="token variable">$sgastat</span>2.为rman设置初始化参数rman need <span class="token keyword">set</span> dbwr_io_slaves or backup_tape_io_slaves and large_pool_size3.监控并行回滚的视图（monitoring parallel rollback）<span class="token function">v</span><span class="token variable">$fast_start_servers</span>,v<span class="token variable">$fast_start_transactions</span>4.执行一个冷备份（perform a closed database baskup <span class="token punctuation">(</span> noarchivelog <span class="token punctuation">)</span>）<span class="token function">shutdown</span> immediate<span class="token function">cp</span> files /backup/startup5.改变数据库文件的位置（restore to a different location）connect system/manager as sysdbastartupp <span class="token function">mount</span>alter database <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'/disk1/../user.dbf'</span> to <span class="token string">'/disk/../user.dbf'</span><span class="token punctuation">;</span>6.恢复命令（recover）语法（recover syntax）--recover a mounted databaserecover database<span class="token punctuation">;</span>recover datafile <span class="token string">'/disk1/data/df2.dbf'</span><span class="token punctuation">;</span>alter database recover database<span class="token punctuation">;</span>--recover an opened databaserecover tablespace user_data<span class="token punctuation">;</span>recover datafile 2<span class="token punctuation">;</span>alter database recover datafile 2<span class="token punctuation">;</span>7.设置自动应用重做日志文件（how to apply redo log files automatically）<span class="token keyword">set</span> autorecovery onrecover automatic datafile 4<span class="token punctuation">;</span>8.完全恢复（complete recovery）--method 1 <span class="token punctuation">(</span> mounted databe <span class="token punctuation">)</span>copy c:\backup\user.dbf  c:\oradata\user.dbfstartup <span class="token function">mount</span>recover datafile <span class="token string">'c:\oradata\user.dbf'</span><span class="token punctuation">;</span>alter database oppen<span class="token punctuation">;</span>--mothod 2 <span class="token punctuation">(</span> opened database,initially opened, not system or rollback datafile<span class="token punctuation">)</span>copy c:\backup\user.dbf  c:\oradata\user.dbf <span class="token punctuation">(</span> alter tablespace offline<span class="token punctuation">)</span>recover datafile <span class="token string">'c:\oradata\user.dbf'</span> orrecover tablespace user_data<span class="token punctuation">;</span>alter database datafile <span class="token string">'c:\oradata\user.dbf'</span> online or alter tablespace user_data online<span class="token punctuation">;</span>--method 3 <span class="token punctuation">(</span> opened database,initially closed not system or rollback datafile <span class="token punctuation">)</span>startup <span class="token function">mount</span>alter database datafile <span class="token string">'c:\oradata\user.dbf'</span> offline<span class="token punctuation">;</span>alter database <span class="token function">open</span>copy c:\backup\user.dbf  d:\oradata\user.dbfalter database <span class="token function">rename</span> <span class="token function">file</span> <span class="token string">'c:\oradata\user.dbf'</span> to <span class="token string">'d:\oradata\user.dbf'</span>recover datafile <span class="token string">'e:\oradata\user.dbf'</span> or recover tablespace user_data<span class="token punctuation">;</span>alter tablespace user_data online<span class="token punctuation">;</span>--method 4 <span class="token punctuation">(</span> loss of data <span class="token function">file</span> with no backup and have all archive log <span class="token punctuation">)</span>alter tablespace user_data offline immediate<span class="token punctuation">;</span>alter database create datafile <span class="token string">'d:\oradata\user.dbf'</span> as  <span class="token string">'c:\oradata\user.dbf'</span>recover tablespace user_data<span class="token punctuation">;</span>alter tablespace user_data online9.对一个打开的数据库进行备份（perform an <span class="token function">open</span> database backup）alter tablespace user_data begin backup<span class="token punctuation">;</span>copy files /backup/alter database datafile <span class="token string">'/c:/../data.dbf'</span> end backup<span class="token punctuation">;</span>alter system switch logfile<span class="token punctuation">;</span>10.备份一个控制文件（backup a control file）alter database backup controlfile to <span class="token string">'controll.bkp'</span><span class="token punctuation">;</span>alter database backup xontrolfile to trace<span class="token punctuation">;</span>11.非归档模式下的恢复（recovery （noarchivelog mode））<span class="token function">shutdown</span> abort<span class="token function">cp</span> filesstartup12.备份模式下的文件恢复（recovery of <span class="token function">file</span> <span class="token keyword">in</span> backup mode）alter database datafile 2 end backup<span class="token punctuation">;</span>13.清空重做日志文件（rclearing redo log file）alter database <span class="token function">clear</span> unarchived logfile group 1<span class="token punctuation">;</span>alter database <span class="token function">clear</span> unarchived logfile group 1 unrecoverable datafile<span class="token punctuation">;</span>14.重做日志的恢复（删除与重建）（redo log recovery）alter database add logfile group 3 <span class="token string">'c:\oradata\redo03.log'</span> size 1000k<span class="token punctuation">;</span>alter database drop logfile group 1<span class="token punctuation">;</span>alter database <span class="token function">open</span><span class="token punctuation">;</span>or <span class="token operator">></span>cpp c:\oradata\redo02.log ,c:\oradata\redo01.logalter database <span class="token function">clear</span> logfile ‘c:\oradata\log01.log’<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> orcale </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
