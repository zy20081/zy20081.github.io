<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Asp.Net页面生命周期</title>
      <link href="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/"/>
      <url>/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="Asp-Net页面生命周期"><a href="#Asp-Net页面生命周期" class="headerlink" title="Asp.Net页面生命周期"></a>Asp.Net页面生命周期</h1><h2 id="1-什么是Asp-Net页面生命周期"><a href="#1-什么是Asp-Net页面生命周期" class="headerlink" title="1.什么是Asp.Net页面生命周期"></a>1.什么是Asp.Net页面生命周期</h2><p>&emsp; 当我们在浏览器地址栏中输入网址，回车查看页面时，这时会向服务器端（IIS）发送一个request请求，服务器就会判断发送过来的请求页面，  完全识别 HTTP 页面处理程序类后，ASP.NET 运行时将调用处理程序的 ProcessRequest 方法来处理请求，来创建页面对象。通常情况下，无需更改此方法的实现，因为它是由 Page 类提供的。接下来被创建页面对象的ProcessRequest方法使页面经历了各个阶段：初始化、加载视图状态信息和回发数据、加载页面的用户代码以及执行回发服务器端事件。之后，页面进入显示模式：收集更新的视图状态，生成 HTML 代码并随后将代码发送到输出控制台。最后，卸载页面，并认为请求处理完毕。其中页面对象ProcessRequest方法 完成的这一系列事件的处理过程就是Asp.Net页面生命周期。</p><h2 id="2-了解Asp-Net页面生命周期的好处"><a href="#2-了解Asp-Net页面生命周期的好处" class="headerlink" title="2.了解Asp.Net页面生命周期的好处"></a>2.了解Asp.Net页面生命周期的好处</h2><p>&emsp;  了解个掌握ASP.NET页面生命周期是非常必要的，这有助于我们更加灵活的控制页面，以我们需要的方式编程开发。ASP.NET页运行时，此页会经历一个又一个的事件链，每个事件链中执行不同的行为，这所有的行为共同组成我们所需要的页面。了解了生命周期也更有助于我们对程序调试中发生问题的地方的定位。</p><h2 id="3-Asp-Net页面生命周期简化版流程"><a href="#3-Asp-Net页面生命周期简化版流程" class="headerlink" title="3.Asp.Net页面生命周期简化版流程"></a>3.Asp.Net页面生命周期简化版流程</h2><p>页面初始化          Page_Init<br>加载View State      LoadViewState<br>回发数据处理      LoadPostData<br>页面加载          Page_Load<br>回发通知          RaisePostDataChangedEvent<br>回发事件处理     RaisePostBackEvent<br>页面预渲染       Page_PreRender<br>保存             viewstate SaveViewState<br>Page渲染         Page_Render<br>Page 卸载       Page_UnLoad<br>&emsp;要是详细写太多了也不好理解，简化版看图：<br><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/4.jpg" alt=""></p><h2 id="4-什么地方用到了Asp-Net-页面生命周期"><a href="#4-什么地方用到了Asp-Net-页面生命周期" class="headerlink" title="4.什么地方用到了Asp.Net 页面生命周期"></a>4.什么地方用到了Asp.Net 页面生命周期</h2><p>1  第一张图片从全局说明从客户端发出一个Request请求，服务器windows内核中的HTTP.SYS组件接收该请求开始到IIS处理完该请求并响应到客户端结束。<br><br>2  第二张图片为图1中Http处理管线的详细步骤<br><br>3  第三张图片为图2Http处理管线中调用处理程序(HttpHandler,  此处为Page对象)的详细生命周期过程。</p><p><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/1.jpg" alt="图1"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/2.png" alt="图2"><br><img src="/2019/01/02/asp-net-ye-mian-sheng-ming-zhou-qi/3.png" alt="图3"></p>]]></content>
      
      
      <categories>
          
          <category> ASP.NET </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASP.NET原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http响应码</title>
      <link href="/2019/01/02/http-xiang-ying-ma/"/>
      <url>/2019/01/02/http-xiang-ying-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Http请求"><a href="#1-Http请求" class="headerlink" title="1.Http请求"></a>1.Http请求</h2><p>&emsp;浏览器 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 先看本地电脑是否存在百度服务器的IP，如果存在直接 发送请求报文，如果不存在,则会先请求 DNS服务器，通过映射关系找到 百度 服务器的 IP地址返回给浏览器，浏览器保存IP ，并通过流的方式向 百度服务器 发送 转化为byte[]的请求报文。</p><h2 id="2-TTP协议响应码"><a href="#2-TTP协议响应码" class="headerlink" title="2.TTP协议响应码"></a>2.TTP协议响应码<br></h2><p>&emsp;    “200” : OK <br><br>&emsp;    “302” : Found 重定向<br><br>&emsp;    “400” : Bad Request 错误请求,发出错误的不符合Http协议的请求<br><br>&emsp;    “403” : Forbidden 禁止<br><br>&emsp;    “404” : Not Found 未找到<br><br>&emsp;    “500” : Internal Server Error 服务器内部错误。<br><br>&emsp;    “503” : Service U navailable 一般是访问人数过多<br></p><ul><li>200段是成功；300段需要对请求做进一步处理；400段表示客户端请求错误；500段是服务器错误。</li></ul><h3 id="HTTP-常用ContentType"><a href="#HTTP-常用ContentType" class="headerlink" title="HTTP 常用ContentType"></a>HTTP 常用ContentType<br></h3><pre><code>type/html(默认是这个); image/gif;  image/jpeg; text/plain（普通文本）</code></pre><h3 id="http其他-（是无状态的）"><a href="#http其他-（是无状态的）" class="headerlink" title="http其他 （是无状态的）"></a>http其他 （是无状态的）<br></h3><p>http不会记得”上个请求是什么”，所以哪怕是同一个页面中的JS/CSS/JPG也都需要重复提交。</p><p>网页中如果有图片，CSS,JS等外部文件的话，这些请求都会在一个单独请求中,也就是说并不是页面的所有内容都在一个请求中完成,而是每个资源都是一个单独请求。</p><h2 id="3-服务器端"><a href="#3-服务器端" class="headerlink" title="3.服务器端"></a>3.服务器端</h2><p>&emsp;服务器端 分 内核模式 和用户模式 ， 内核模式为windows底层的一些东西内核模式(Kernel Model)中的 HTTP.SYS(无法看到，他实现了一个插件的机制，自己不处理程序，只负责接收请求，只负责接收请求，让其他exe等程序处理)监听80端口(监听的socket)，识别请求的协议：一般为HTTP，识别请求的端口,把请求发送给具体的应用程序(IIS安装后就在注册表里注册了)。<br>这时候还会再创建一个新的端口 来负责和请求的客户端通信(称为代理Socket或通信Socket)</p><ol><li>w3svc服务(托管)和 inetInfo.exe进程 和起来就是IIS<br>请求通过HTTP.SYS 交给 w3svc服务(svchost.exe),来查看INETINFO.exe<br>访问 IIS进程中的元数据(包含扩展注册信息) 查下请求后缀的文件应如何处理，</li></ol><p>如果是静态网页(.htm,.html等)会先通过内核模块再通过通信端口发送回去。</p><p>&emsp;如果是动态网页（.aspx）会交给扩展 aspnet_isapi.dll(非托管的代码写的,非托管和托管代码的桥梁)处理，然后aspnet_isapi会负责启动ApplicationDomain，请求交给（通过windows系统的句柄，句柄是操作系统的一些标识符） ISApiRuntime，在ISapiRuntime内部，通过ecb指针创建了一个HttpWorkRequest对象（就是简单的对报文的一个封装）然后将HttpWorkRequest对象 交给HttpRunTime PR方法，在PR方法内部又将HttpWorkRequest对象封装成了HttpContext(也就是把请求报文封装成了Request对象和Response对象)再通过HttpApplicationFactory创建一个具体的Application实例<br>然后请求随着 Application管道一次一次的流，在管道里面有19个公开的事件(共23)，请求留到Application的PR方法的时候，帮我们一次性的把19个事件都调用了，二者19个事件又允许我们开发人员自己注册响应方法，可以过滤响应报文(对报文的处理)第8个事件时会根据HttpContext中的RequestURL(请求的地址)会创建最终处理当前请求的Handler实例<br>在11个事件和12个事件之间会调用创建的Handler实例的PR方法</p><p>ISAPIRuntime.PR()通过ECB创建HttpWorkRequest对象，将请求报文放到其中</p><p>Http.Runtime.PR()创建HttpContext对象(包含HttpRequest对象和HttpResponse对象，分析浏览器的请求报文,然后将请求报文的数据存入HttpContext里的Resquest属性中)<br>HttpApplicationFactory 获取一个HttpApplication实例<br>HttpApplication执行管道23个事件,19个事公开给开发人员的(插件机制) ，负责创建和执行页面</p>]]></content>
      
      
      <categories>
          
          <category> Web原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
